
     Generated on:       09.10.2015 14:36
     Generated by:       Kirill Pashkov
     
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

function Main
{
	Param ([String]$Commandline)
	if ((Call-MainForm_psf) -eq "OK")
	{
		
	}
	$global:ExitCode = 0
}#endregion Source: Startup.pss

#region Source: MainForm.psf
function Call-MainForm_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	try{
		$local:type = [ProgressBarOverlay]
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms', 'System.Drawing') -TypeDefinition  @" 
		using System;
		using System.Windows.Forms;
		using System.Drawing;
        namespace SAPIENTypes
        {
		    public class ProgressBarOverlay : System.Windows.Forms.ProgressBar
	        {
	            protected override void WndProc(ref Message m)
	            { 
	                base.WndProc(ref m);
	                if (m.Msg == 0x000F)// WM_PAINT
	                {
	                    if (Style != System.Windows.Forms.ProgressBarStyle.Marquee || !string.IsNullOrEmpty(this.Text))
                        {
                            using (Graphics g = this.CreateGraphics())
                            {
                                using (StringFormat stringFormat = new StringFormat(StringFormatFlags.NoWrap))
                                {
                                    stringFormat.Alignment = StringAlignment.Center;
                                    stringFormat.LineAlignment = StringAlignment.Center;
                                    if (!string.IsNullOrEmpty(this.Text))
                                        g.DrawString(this.Text, this.Font, Brushes.Black, this.ClientRectangle, stringFormat);
                                    else
                                    {
                                        int percent = (int)(((double)Value / (double)Maximum) * 100);
                                        g.DrawString(percent.ToString() + "%", this.Font, Brushes.Black, this.ClientRectangle, stringFormat);
                                    }
                                }
                            }
                        }
	                }
	            }
              
                public string TextOverlay
                {
                    get
                    {
                        return base.Text;
                    }
                    set
                    {
                        base.Text = value;
                        Invalidate();
                    }
                }
	        }
        }
"@ | Out-Null
	}

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$MainForm = New-Object 'System.Windows.Forms.Form'
	$GroupboxTextInput = New-Object 'System.Windows.Forms.GroupBox'
	$buttonEdit = New-Object 'System.Windows.Forms.Button'
	$GroupboxPreviewTextLegend = New-Object 'System.Windows.Forms.GroupBox'
	$buttonPreviewBack = New-Object 'System.Windows.Forms.Button'
	$buttonPreviewForward = New-Object 'System.Windows.Forms.Button'
	$labelTo = New-Object 'System.Windows.Forms.Label'
	$textboxTo = New-Object 'System.Windows.Forms.TextBox'
	$ButtonLoadTextInput = New-Object 'System.Windows.Forms.Button'
	$buttonBrowseTextInput = New-Object 'System.Windows.Forms.Button'
	$textboxFileTextInput = New-Object 'System.Windows.Forms.TextBox'
	$richtextboxTextPattern = New-Object 'System.Windows.Forms.RichTextBox'
	$groupboxEmailSettings = New-Object 'System.Windows.Forms.GroupBox'
	$progressbaroverlay = New-Object 'SAPIENTypes.ProgressBarOverlay'
	$comboboxPriority = New-Object 'System.Windows.Forms.ComboBox'
	$Priority = New-Object 'System.Windows.Forms.Label'
	$labelSubject = New-Object 'System.Windows.Forms.Label'
	$textboxSubject = New-Object 'System.Windows.Forms.TextBox'
	$textboxDisplayName = New-Object 'System.Windows.Forms.TextBox'
	$labelDisplayName = New-Object 'System.Windows.Forms.Label'
	$textboxFrom = New-Object 'System.Windows.Forms.TextBox'
	$labelFrom = New-Object 'System.Windows.Forms.Label'
	$labelSmtpServerAdress = New-Object 'System.Windows.Forms.Label'
	$textboxSmtpServerAdress = New-Object 'System.Windows.Forms.TextBox'
	$buttonDistribute = New-Object 'System.Windows.Forms.Button'
	$GroupboxInputCsv = New-Object 'System.Windows.Forms.GroupBox'
	$textboxFileCsvInput = New-Object 'System.Windows.Forms.TextBox'
	$ButtonLoadCsvInput = New-Object 'System.Windows.Forms.Button'
	$buttonPreviewLoadedCsvFile = New-Object 'System.Windows.Forms.Button'
	$buttonBrowseCsvInput = New-Object 'System.Windows.Forms.Button'
	$GroupboxADSearch = New-Object 'System.Windows.Forms.GroupBox'
	$buttonStartJobADSearch = New-Object 'System.Windows.Forms.Button'
	$DataGridViewADSearch = New-Object 'System.Windows.Forms.DataGridView'
	$buttonPreviewADUsersSearch = New-Object 'System.Windows.Forms.Button'
	$GroupboxTextLegend = New-Object 'System.Windows.Forms.GroupBox'
	$DataGridViewTextLegend = New-Object 'System.Windows.Forms.DataGridView'
	$OpenfiledialogCsvInput = New-Object 'System.Windows.Forms.OpenFileDialog'
	$TimerNotifyWarning = New-Object 'System.Windows.Forms.Timer'
	$imagelistButtonBusyAnimation = New-Object 'System.Windows.Forms.ImageList'
	$timerJobTracker = New-Object 'System.Windows.Forms.Timer'
	$OpenfiledialogTextInput = New-Object 'System.Windows.Forms.OpenFileDialog'
	$TimerNotifySuccess = New-Object 'System.Windows.Forms.Timer'
	$contextmenustrip = New-Object 'System.Windows.Forms.ContextMenuStrip'
	$showLogsToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	Invoke-Requirements
	Invoke-CheckForConfig
	$OnLoadFormEvent = {
		if (-not (Test-Path 'HKCU:\Software\PK-Tools\Email Distribution'))
		{ New-RegistryKeys -New	}
		Check-Updates
		Invoke-DataGridViewTextLegend
		Invoke-DataGridViewActiveDirectoryUserSearch
		if (-not (Test-Path -Path $LogsBase -PathType Container))
		{ [void](New-Item -Path $LogsBase -ItemType Directory -Force) }
		[PSCustomObject]@{ Time = $(Get-Date -f HH:mm:ss); Action = 'Started'; Description = "Application started by ""$env:USERNAME""" } | Export-Csv -Path "$LogsBase\$((Get-Date).ToShortDateString())_log.csv" -NoTypeInformation -Encoding UTF8 -Append
		$comboboxPriority.Items.AddRange(('Low', 'Normal', 'High'))
		$comboboxPriority.SelectedIndex = 1
	}
	
	$ButtonLoadCsvInput_Click = {
		if ($textboxFileCsvInput.Text.Trim() -ne '')
		{
			$buttonPreviewADUsersSearch.Enabled = $false
			$GroupboxADSearch.Visible = $false
			$GroupboxTextLegend.Visible = $false
			$GroupboxTextInput.Visible = $false
			$buttonPreviewLoadedCsvFile.Text = 'Preview loaded csv file data'
			$buttonPreviewADUsersSearch.Text = 'Preview AD users search results'
			if (((Test-Path $($textboxFileCsvInput.Text.Trim()) -PathType Leaf) -eq $true) -and (([System.IO.Path]::GetExtension($textboxFileCsvInput.Text.Trim())) -eq '.csv'))
			{
				$Csv = Get-CsvInput -CsvPath $($textboxFileCsvInput.Text.Trim()) -Encoding 'Default'
				$Csv | Set-DataGridViewActiveDirectoryUserSearch
				if ($Csv -ne $null)
				{
					[PSCustomObject]@{ Time = $(Get-Date -f HH:mm:ss); Action = 'CsvInput'; Description = "Loaded csv file ""$($textboxFileCsvInput.Text.Trim())""" } | Export-Csv -Path "$LogsBase\$((Get-Date).ToShortDateString())_log.csv" -NoTypeInformation -Encoding UTF8 -Append
					$buttonPreviewLoadedCsvFile.Text = "Preview loaded csv file data ($($RawCsv.Count))"
					$buttonPreviewLoadedCsvFile.Enabled = $true
					$GroupboxADSearch.Visible = $true
					$ButtonLoadCsvInput.BackColor = 'YellowGreen'
					$TimerNotifySuccess.Start()
	
					if ($ADLookupSkip -eq $true)
					{
						$GroupboxADSearch.Visible = $false
						Invoke-DistributeStep
					}
					if ($TextPatternSkip -eq $true)
					{
						Invoke-TextInputStep -Skip
						$richtextboxTextPattern.ReadOnly = $false
						$buttonEdit.Text = 'Save'
						$richtextboxTextPattern.BackColor = 'Window'
						$richtextboxTextPattern.Focus()
					}
				}
				else
				{
					[void][System.Windows.Forms.MessageBox]::Show("Bad CSV file", "Error")
				}
			}
			else
			{
				$textboxFileCsvInput.BackColor = 'LightCoral'
				$TimerNotifyWarning.Start()
			}
		}
		else
		{
			$textboxFileCsvInput.BackColor = 'LightCoral'
			$TimerNotifyWarning.Start()
		}
	}
	
	$buttonBrowseCsvInput_Click = {
		
		if ($OpenfiledialogCsvInput.ShowDialog() -eq 'OK')
		{
			$textboxFileCsvInput.Text = $OpenfiledialogCsvInput.FileName
		}
	}
	
	$TimerNotifyWarning_Tick = {
		$TimerNotifyWarning.Stop()
		$textboxFileCsvInput.BackColor = 'Window'
		$textboxFileTextInput.BackColor = 'Window'
		$richtextboxTextPattern.BackColor = 'Window'
		$ButtonLoadTextInput.BackColor = 'Control'
	}
	
	$buttonPreviewLoadedCsvFile_Click = {
		Call-Preview_psf -Title 'Preview Csv' -Data $script:RawCsv
	}
	
	$buttonStartJobADSearch_Click = {
		$buttonStartJobADSearch.Enabled = $false
		$buttonPreviewADUsersSearch.Enabled = $false
		$DataGridViewADSearch.Enabled = $false
		$ButtonLoadCsvInput.Enabled = $false
		$GroupboxTextLegend.Visible = $false
		$GroupboxTextInput.Visible = $false
		$GroupboxPreviewTextLegend.Visible = $false
		$groupboxEmailSettings.Visible = $false
		$richtextboxTextPattern.Visible = $false
		$progressbaroverlay.Visible = $false
		$textboxFileTextInput.Clear()
		$buttonPreviewADUsersSearch.Text = 'Preview AD users search results'
		$Users = $script:RawCsv
		
		try
		{
			$Forest = Get-ADForest
			[PSCustomObject]@{ Time = $(Get-Date -f HH:mm:ss); Action = 'ADSearch'; Description = "Discovered forest ""$($Forest.Name)""" } | Export-Csv -Path "$LogsBase\$((Get-Date).ToShortDateString())_log.csv" -NoTypeInformation -Encoding UTF8 -Append
			$Domains = $Forest.Domains
		}
		catch
		{
			[PSCustomObject]@{ Time = $(Get-Date -f HH:mm:ss); Action = 'ADForest'; Description = $($Error[0].Exception.Message) } | Export-Csv -Path "$LogsBase\$((Get-Date).ToShortDateString())_log.csv" -NoTypeInformation -Encoding UTF8 -Append
		}
		$FilterName = $($DataGridViewADSearch.Rows[0].Cells[1].Value)
		$FilterElement = $($DataGridViewADSearch.Rows[0].Cells[0].Value)
		$CsvPropertiesList = $RawCsv | Get-Member -MemberType NoteProperty | Select -ExpandProperty Name
		Add-JobTracker -Name "JobName" `
					   -JobScript {
			param ($Users, $Domains, $FilterName, $FilterElement, $CsvPropertiesList, $LogsBase)
			Import-Module ActiveDirectory
			$ADSearchLookup = @()
			foreach ($Domain in ($Domains))
			{
				[PSCustomObject]@{
					Time = $(Get-Date -f HH:mm:ss); Action = 'ADSearch'; Description = "Starting discovering domain ""$Domain"""
				} | Export-Csv -Path "$LogsBase\$((Get-Date).ToShortDateString())_log.csv" -NoTypeInformation -Encoding UTF8 -Append
				$PDC = Get-ADDomainController -Discover -Service 'PrimaryDC' -Domain $Domain |
				Select-Object -ExpandProperty HostName
				[PSCustomObject]@{
					Time = $(Get-Date -f HH:mm:ss); Action = 'ADSearch'; Description = "Discovered PDC ""$PDC"" for domain ""$Domain"""
				} | Export-Csv -Path "$LogsBase\$((Get-Date).ToShortDateString())_log.csv" -NoTypeInformation -Encoding UTF8 -Append
				$Users | ForEach-Object -Process {
					$User = $_
					$FilterItem = $User.$FilterElement
					try
					{
						$AD_Info = Get-ADUser -Server $PDC -Filter {
							$FilterName -like $FilterItem
						} -Properties * -ErrorAction Stop | Select-Object -Property DisplayName, EmailAddress
						if ($AD_Info -ne $null)
						{
							[PSCustomObject]@{
								Time = $(Get-Date -f HH:mm:ss); Action = 'ADSearch'; Description = "Found matches for ""$FilterName -like $FilterItem"" in domain ""$Domain"""
							} | Export-Csv -Path "$LogsBase\$((Get-Date).ToShortDateString())_log.csv" -NoTypeInformation -Encoding UTF8 -Append
							$Object = New-Object -TypeName PSObject
							$Object | Add-Member -MemberType NoteProperty -Name DisplayName -Value $(if ($AD_Info.DisplayName.Count -gt 1)
							{
								$AD_Info.DisplayName[0]
							}
							else
							{
								$AD_Info.DisplayName
							}
							)
							$Object | Add-Member -MemberType NoteProperty -Name EmailAddress -Value $(if ($AD_Info.EmailAddress.Count -gt 1)
							{
								$AD_Info.EmailAddress[0]
							}
							else
							{
								$AD_Info.EmailAddress
							}
							)
							$CsvPropertiesList | ? { $_ -ne $FilterElement } | % {
								$PropertyItem = $_
								$Object | Add-Member -MemberType NoteProperty -Name "$PropertyItem (Csv-Source)" -Value $User.$PropertyItem
							}
							$Object | Add-Member -MemberType NoteProperty -Name Domain -Value $Domain
							$ADSearchLookup += $Object
						}
						else
						{
							[PSCustomObject]@{
								Time = $(Get-Date -f HH:mm:ss); Action = 'ADSearch'; Description = "No matches for ""$FilterName -like $FilterItem"" in domain ""$Domain"""
							} | Export-Csv -Path "$LogsBase\$((Get-Date).ToShortDateString())_log.csv" -NoTypeInformation -Encoding UTF8 -Append
						}
					}
					catch
					{
						[PSCustomObject]@{
							Time = $(Get-Date -f HH:mm:ss); Action = 'ADSearch'; Description = $($Error[0].Exception.Message)
						} | Export-Csv -Path "$LogsBase\$((Get-Date).ToShortDateString())_log.csv" -NoTypeInformation -Encoding UTF8 -Append
					}
				}
			}
			Write-Output $ADSearchLookup
		}`
					   -CompletedScript {
			Param ($Job)
			[array]$script:ADSearchResult = Receive-Job -Job $Job | Select-Object -Property * -ExcludeProperty PSComputerName, RunspaceId, PSShowComputerName
			$buttonStartJobADSearch.ImageIndex = -1
			$buttonStartJobADSearch.Enabled = $true
			$ButtonLoadCsvInput.Enabled = $true
			if ($ADSearchResult)
			{
				Invoke-DistributeStep
			}
			$DataGridViewADSearch.Enabled = $true
			
		}`
					   -UpdateScript {
			Param ($Job)
			if ($buttonStartJobADSearch.ImageList -ne $null)
			{
				if ($buttonStartJobADSearch.ImageIndex -lt $buttonStartJobADSearch.ImageList.Images.Count - 1)
				{
					$buttonStartJobADSearch.ImageIndex += 1
				}
				else
				{
					$buttonStartJobADSearch.ImageIndex = 0
				}
			}
		} -ArgumentList $Users, $Domains, $FilterName, $FilterElement, $CsvPropertiesList, $LogsBase
	}
	
	$formMain_FormClosed = [System.Windows.Forms.FormClosedEventHandler]{
		[PSCustomObject]@{
			Time = $(Get-Date -f HH:mm:ss); Action = 'Closed'; Description = 'Application closed'
		} | Export-Csv -Path "$LogsBase\$((Get-Date).ToShortDateString())_log.csv" -NoTypeInformation -Encoding UTF8 -Append
		Stop-JobTracker
	}
	
	$timerJobTracker_Tick = {
		Update-JobTracker
	}
	
	$JobTrackerList = New-Object System.Collections.ArrayList
	
	$buttonPreviewADUsersSearch_Click = {
		Call-Preview_psf -Title 'Preview AD Users Search' -Data $script:ADSearchResult
	}
	
	$buttonBrowseTextInput_Click = {
		
		if ($OpenfiledialogTextInput.ShowDialog() -eq 'OK')
		{
			$textboxFileTextInput.Text = $OpenfiledialogTextInput.FileName
		}
	}
	
	$ButtonLoadTextInput_Click = {
		if ($textboxFileTextInput.Text.Trim() -ne '')
		{
			if (((Test-Path $($textboxFileTextInput.Text.Trim()) -PathType Leaf) -eq $true) -and (([System.IO.Path]::GetExtension($textboxFileTextInput.Text.Trim())) -eq '.txt'))
			{
				Invoke-TextInputStep
			}
			else
			{
				$textboxFileTextInput.BackColor = 'LightCoral'
				$TimerNotifyWarning.Start()
			}
		}
		else
		{
			$textboxFileTextInput.BackColor = 'LightCoral'
			$TimerNotifyWarning.Start()
		}
	}
	
	$TimerNotifySuccess_Tick = {
		$TimerNotifySuccess.Stop()
		$ButtonLoadCsvInput.BackColor = 'Control'
		$ButtonLoadTextInput.BackColor = 'Control'
		$buttonStartJobADSearch.BackColor = 'Control'
		$progressbaroverlay.Visible = $false
	}
	$buttonPreviewBack_Click = {
		if ($PreviewItem -gt 0)
		{ $script:PreviewItem -= 1 }
		$GroupboxPreviewTextLegend.Text = "Preview $($PreviewItem + 1)/$($ADSearchResult.Count)"
		Get-TextLegendSetup | Set-PreviewTextByTextLeged -Item $PreviewItem
		Set-EmailPreview -Item $PreviewItem
	}
	
	$buttonPreviewForward_Click = {
		if ($PreviewItem -lt ($ADSearchResult.Count - 1))
		{ $script:PreviewItem += 1 }
		$GroupboxPreviewTextLegend.Text = "Preview $($PreviewItem + 1)/$($ADSearchResult.Count)"
		Get-TextLegendSetup | Set-PreviewTextByTextLeged -Item $PreviewItem
		Set-EmailPreview -Item $PreviewItem
	}
	
	$DataGridViewTextLegend_CurrentCellDirtyStateChanged = {
		$DataGridViewTextLegend.CommitEdit([System.Windows.Forms.DataGridViewDataErrorContexts]::Commit)
	}
	
	$DataGridViewTextLegend_CellValueChanged = [System.Windows.Forms.DataGridViewCellEventHandler]{
		Get-TextLegendSetup | Set-PreviewTextByTextLeged -Item $PreviewItem
		Set-EmailPreview -Item $PreviewItem
	}
	
	$showLogsToolStripMenuItem_Click = {
		Call-Logs_psf
	}
	
	$DataGridViewTextLegend_DataError = [System.Windows.Forms.DataGridViewDataErrorEventHandler]{
		{ }
	}
	
	$DataGridViewADSearch_DataError = [System.Windows.Forms.DataGridViewDataErrorEventHandler]{
		{ }
	}
	
	$buttonDistribute_Click = {
		$buttonDistribute.Enabled = $false
		$ButtonLoadCsvInput.Enabled = $false
		$ButtonLoadTextInput.Enabled = $false
		$ErrorCounter = 0
		$SmtpServer = $($textboxSmtpServerAdress.Text.Trim())
		$From = $($textboxFrom.Text.Trim())
		$DisplayName = $($textboxDisplayName.Text.Trim())
		$MessageFrom = New-Object System.Net.Mail.MailAddress ($From, $DisplayName)
		$MessageSubject = $($textboxSubject.Text.Trim())
		$Priority = $($comboboxPriority.SelectedItem)
		
		$ErrorText = "Encountered following errors:`n`n"
		if ($SmtpServer -eq '')
		{
			$ErrorText += "- Smtp server value is not specified`n"
			$ErrorCounter++
		}
		else
		{
			if (-not (Test-Connection $SmtpServer -Count 1 -Quiet))
			{
				$ErrorText += "- Smtp server ""$SmtpServer"" not responding`n"
				$ErrorCounter++
			}
		}
		if ($From -eq '')
		{
			$ErrorText += "- From value is not specified`n"
			$ErrorCounter++
		}
		else
		{
			if (-not ($From -match "^([a-z0-9]+[.+-])*([a-z0-9]+)+@(([a-z0-9]+[.-])+([a-z]{2,})$|(([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5])(\.|$)){4})"))
			{
				$ErrorText += "- From value ""$From"" is not valid email adress`n"
				$ErrorCounter++
			}
		}
		if ($MessageSubject -eq '')
		{
			$ErrorText += "- Subject value is not specified`n"
			$ErrorCounter++
		}
		if ($ErrorCounter -lt 1)
		{
			$Legend = Get-TextLegendSetup
			$EmailElement = Get-EmailElement
			if ($EmailElement)
			{
				$progressbaroverlay.Visible = $true
				$progressbaroverlay.Value = 0
				$progressbaroverlay.Maximum = $ADSearchResult.Count
				
				0..($ADSearchResult.Count - 1) | % {
					$CurrentArrayElement = $_
					$MessageText = $Legend | Set-MessageText -Item $CurrentArrayElement
					$EmailAdressTo = $ADSearchResult[$CurrentArrayElement].$EmailElement
					if ($EmailAdressTo)
					{
						if ($EmailAdressTo -match "^([a-z0-9]+[.+-])*([a-z0-9]+)+@(([a-z0-9]+[.-])+([a-z]{2,})$|(([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5])(\.|$)){4})")
						{
							$MailProperties = @{
								SmtpServer = $SmtpServer
								From = $MessageFrom
								To = $EmailAdressTo
								Subject = $MessageSubject
								Body = "$MessageText"
								BodyAsHtml = $True
								Priority = $Priority
								Encoding = ([System.Text.Encoding]::UTF8)
								ErrorVariable = 'MailStatus'
								ErrorAction = 'SilentlyContinue'
							}
							if ($script:Cc)
							{ $MailProperties.Add('Cc', $Cc) }
							if ($script:Bcc)
							{ $MailProperties.Add('Bcc', $Bcc) }
							Send-MailMessage @MailProperties
							if ($MailStatus.Count -gt 0)
							{
								[PSCustomObject]@{
									Time = $(Get-Date -f HH:mm:ss); Action = 'MailSent'; Description = "$false; $EmailAdressTo; $($Error[0].Exception.Message)"
								} | Export-Csv -Path "$LogsBase\$((Get-Date).ToShortDateString())_log.csv" -NoTypeInformation -Encoding UTF8 -Append
							}
							else
							{
								[PSCustomObject]@{
									Time = $(Get-Date -f HH:mm:ss); Action = 'MailSent'; Description = "$true; $EmailAdressTo"
								} | Export-Csv -Path "$LogsBase\$((Get-Date).ToShortDateString())_log.csv" -NoTypeInformation -Encoding UTF8 -Append
							}
						}
						else
						{
							[PSCustomObject]@{
								Time = $(Get-Date -f HH:mm:ss); Action = 'MailSent'; Description = "$false; $EmailAdressTo is not valid email adress"
							} | Export-Csv -Path "$LogsBase\$((Get-Date).ToShortDateString())_log.csv" -NoTypeInformation -Encoding UTF8 -Append
						}
					}
					$progressbaroverlay.PerformStep()
				}
			}
			else
			{
				[void][System.Windows.Forms.MessageBox]::Show("In order to send email messages you need to:`n`nSpecify {EMAIL} tag for appropriate element", "Warning")
			}
			$TimerNotifySuccess.Start()
		}
		else
		{
			[void][System.Windows.Forms.MessageBox]::Show($ErrorText,"Warning")
		}
		$ButtonLoadCsvInput.Enabled = $true
		$ButtonLoadTextInput.Enabled = $true
		$buttonDistribute.Enabled = $true
	}
	$buttonEdit_Click={
		if ($richtextboxTextPattern.ReadOnly)
		{
			$richtextboxTextPattern.ReadOnly = $false
			$buttonEdit.Text = 'Save'
			$richtextboxTextPattern.BackColor = 'Window'
			$richtextboxTextPattern.Focus()
		}
		else
		{
			$richtextboxTextPattern.ReadOnly = $true
			$buttonEdit.Text = 'Edit'
			$richtextboxTextPattern.BackColor = 'Control'
			$script:TextPattern = $richtextboxTextPattern.Text.Trim()
		}
	}	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$MainForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_textboxTo = $textboxTo.Text
		$script:MainForm_textboxFileTextInput = $textboxFileTextInput.Text
		$script:MainForm_richtextboxTextPattern = $richtextboxTextPattern.Text
		$script:MainForm_comboboxPriority_SelectedItem = $comboboxPriority.SelectedItems
		$script:MainForm_textboxSubject = $textboxSubject.Text
		$script:MainForm_textboxDisplayName = $textboxDisplayName.Text
		$script:MainForm_textboxFrom = $textboxFrom.Text
		$script:MainForm_textboxSmtpServerAdress = $textboxSmtpServerAdress.Text
		$script:MainForm_textboxFileCsvInput = $textboxFileCsvInput.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonEdit.remove_Click($buttonEdit_Click)
			$buttonPreviewBack.remove_Click($buttonPreviewBack_Click)
			$buttonPreviewForward.remove_Click($buttonPreviewForward_Click)
			$ButtonLoadTextInput.remove_Click($ButtonLoadTextInput_Click)
			$buttonBrowseTextInput.remove_Click($buttonBrowseTextInput_Click)
			$buttonDistribute.remove_Click($buttonDistribute_Click)
			$ButtonLoadCsvInput.remove_Click($ButtonLoadCsvInput_Click)
			$buttonPreviewLoadedCsvFile.remove_Click($buttonPreviewLoadedCsvFile_Click)
			$buttonBrowseCsvInput.remove_Click($buttonBrowseCsvInput_Click)
			$buttonStartJobADSearch.remove_Click($buttonStartJobADSearch_Click)
			$DataGridViewADSearch.remove_DataError($DataGridViewADSearch_DataError)
			$buttonPreviewADUsersSearch.remove_Click($buttonPreviewADUsersSearch_Click)
			$DataGridViewTextLegend.remove_CellValueChanged($DataGridViewTextLegend_CellValueChanged)
			$DataGridViewTextLegend.remove_CurrentCellDirtyStateChanged($DataGridViewTextLegend_CurrentCellDirtyStateChanged)
			$DataGridViewTextLegend.remove_DataError($DataGridViewTextLegend_DataError)
			$MainForm.remove_FormClosed($formMain_FormClosed)
			$MainForm.remove_Load($OnLoadFormEvent)
			$TimerNotifyWarning.remove_Tick($TimerNotifyWarning_Tick)
			$timerJobTracker.remove_Tick($timerJobTracker_Tick)
			$TimerNotifySuccess.remove_Tick($TimerNotifySuccess_Tick)
			$showLogsToolStripMenuItem.remove_Click($showLogsToolStripMenuItem_Click)
			$MainForm.remove_Load($Form_StateCorrection_Load)
			$MainForm.remove_Closing($Form_StoreValues_Closing)
			$MainForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$MainForm.SuspendLayout()
	$GroupboxTextInput.SuspendLayout()
	$GroupboxPreviewTextLegend.SuspendLayout()
	$groupboxEmailSettings.SuspendLayout()
	$GroupboxInputCsv.SuspendLayout()
	$GroupboxADSearch.SuspendLayout()
	$GroupboxTextLegend.SuspendLayout()
	#
	# MainForm
	#
	$MainForm.Controls.Add($GroupboxTextInput)
	$MainForm.Controls.Add($GroupboxInputCsv)
	$MainForm.Controls.Add($GroupboxADSearch)
	$MainForm.Controls.Add($GroupboxTextLegend)
	$MainForm.ClientSize = '563, 566'
	$MainForm.ContextMenuStrip = $contextmenustrip
	$MainForm.FormBorderStyle = 'FixedDialog'
	$MainForm.MaximizeBox = $False
	$MainForm.MinimizeBox = $False
	$MainForm.Name = "MainForm"
	$MainForm.StartPosition = 'CenterScreen'
	$MainForm.Text = "Email Distribution"
	$MainForm.add_FormClosed($formMain_FormClosed)
	$MainForm.add_Load($OnLoadFormEvent)
	#
	# GroupboxTextInput
	#
	$GroupboxTextInput.Controls.Add($buttonEdit)
	$GroupboxTextInput.Controls.Add($GroupboxPreviewTextLegend)
	$GroupboxTextInput.Controls.Add($ButtonLoadTextInput)
	$GroupboxTextInput.Controls.Add($buttonBrowseTextInput)
	$GroupboxTextInput.Controls.Add($textboxFileTextInput)
	$GroupboxTextInput.Controls.Add($richtextboxTextPattern)
	$GroupboxTextInput.Controls.Add($groupboxEmailSettings)
	$GroupboxTextInput.Dock = 'Bottom'
	$GroupboxTextInput.Location = '0, 195'
	$GroupboxTextInput.Name = "GroupboxTextInput"
	$GroupboxTextInput.Size = '563, 371'
	$GroupboxTextInput.TabIndex = 7
	$GroupboxTextInput.TabStop = $False
	$GroupboxTextInput.Text = "Text Input"
	$GroupboxTextInput.Visible = $False
	#
	# buttonEdit
	#
	$buttonEdit.FlatStyle = 'Popup'
	$buttonEdit.Location = '512, 51'
	$buttonEdit.Name = "buttonEdit"
	$buttonEdit.Size = '42, 20'
	$buttonEdit.TabIndex = 9
	$buttonEdit.Text = "Edit"
	$buttonEdit.UseVisualStyleBackColor = $True
	$buttonEdit.Visible = $False
	$buttonEdit.add_Click($buttonEdit_Click)
	#
	# GroupboxPreviewTextLegend
	#
	$GroupboxPreviewTextLegend.Controls.Add($buttonPreviewBack)
	$GroupboxPreviewTextLegend.Controls.Add($buttonPreviewForward)
	$GroupboxPreviewTextLegend.Controls.Add($labelTo)
	$GroupboxPreviewTextLegend.Controls.Add($textboxTo)
	$GroupboxPreviewTextLegend.Location = '284, 8'
	$GroupboxPreviewTextLegend.Name = "GroupboxPreviewTextLegend"
	$GroupboxPreviewTextLegend.Size = '278, 37'
	$GroupboxPreviewTextLegend.TabIndex = 7
	$GroupboxPreviewTextLegend.TabStop = $False
	$GroupboxPreviewTextLegend.Visible = $False
	#
	# buttonPreviewBack
	#
	$buttonPreviewBack.FlatStyle = 'Popup'
	$buttonPreviewBack.Location = '228, 12'
	$buttonPreviewBack.Name = "buttonPreviewBack"
	$buttonPreviewBack.Size = '20, 20'
	$buttonPreviewBack.TabIndex = 1
	$buttonPreviewBack.Text = "<"
	$buttonPreviewBack.UseVisualStyleBackColor = $True
	$buttonPreviewBack.add_Click($buttonPreviewBack_Click)
	#
	# buttonPreviewForward
	#
	$buttonPreviewForward.FlatStyle = 'Popup'
	$buttonPreviewForward.Location = '250, 12'
	$buttonPreviewForward.Name = "buttonPreviewForward"
	$buttonPreviewForward.Size = '20, 20'
	$buttonPreviewForward.TabIndex = 0
	$buttonPreviewForward.Text = ">"
	$buttonPreviewForward.UseVisualStyleBackColor = $True
	$buttonPreviewForward.add_Click($buttonPreviewForward_Click)
	#
	# labelTo
	#
	$labelTo.Location = '3, 14'
	$labelTo.Name = "labelTo"
	$labelTo.Size = '25, 15'
	$labelTo.TabIndex = 9
	$labelTo.Text = "To"
	#
	# textboxTo
	#
	$textboxTo.Location = '35, 12'
	$textboxTo.Name = "textboxTo"
	$textboxTo.ReadOnly = $True
	$textboxTo.Size = '190, 20'
	$textboxTo.TabIndex = 10
	$textboxTo.Text = "{EMAIL}"
	#
	# ButtonLoadTextInput
	#
	$ButtonLoadTextInput.FlatStyle = 'Popup'
	$ButtonLoadTextInput.Location = '227, 19'
	$ButtonLoadTextInput.Name = "ButtonLoadTextInput"
	$ButtonLoadTextInput.Size = '50, 20'
	$ButtonLoadTextInput.TabIndex = 3
	$ButtonLoadTextInput.Text = "Load"
	$ButtonLoadTextInput.UseVisualStyleBackColor = $True
	$ButtonLoadTextInput.add_Click($ButtonLoadTextInput_Click)
	#
	# buttonBrowseTextInput
	#
	$buttonBrowseTextInput.FlatStyle = 'Popup'
	$buttonBrowseTextInput.Location = '196, 19'
	$buttonBrowseTextInput.Name = "buttonBrowseTextInput"
	$buttonBrowseTextInput.Size = '30, 20'
	$buttonBrowseTextInput.TabIndex = 1
	$buttonBrowseTextInput.Text = "..."
	$buttonBrowseTextInput.add_Click($buttonBrowseTextInput_Click)
	#
	# textboxFileTextInput
	#
	$textboxFileTextInput.AutoCompleteMode = 'SuggestAppend'
	$textboxFileTextInput.AutoCompleteSource = 'FileSystem'
	$textboxFileTextInput.Location = '10, 19'
	$textboxFileTextInput.Name = "textboxFileTextInput"
	$textboxFileTextInput.Size = '180, 20'
	$textboxFileTextInput.TabIndex = 0
	#
	# richtextboxTextPattern
	#
	$richtextboxTextPattern.Dock = 'Bottom'
	$richtextboxTextPattern.Location = '3, 48'
	$richtextboxTextPattern.Name = "richtextboxTextPattern"
	$richtextboxTextPattern.ReadOnly = $True
	$richtextboxTextPattern.Size = '557, 218'
	$richtextboxTextPattern.TabIndex = 2
	$richtextboxTextPattern.Text = ""
	$richtextboxTextPattern.Visible = $False
	#
	# groupboxEmailSettings
	#
	$groupboxEmailSettings.Controls.Add($progressbaroverlay)
	$groupboxEmailSettings.Controls.Add($comboboxPriority)
	$groupboxEmailSettings.Controls.Add($Priority)
	$groupboxEmailSettings.Controls.Add($labelSubject)
	$groupboxEmailSettings.Controls.Add($textboxSubject)
	$groupboxEmailSettings.Controls.Add($textboxDisplayName)
	$groupboxEmailSettings.Controls.Add($labelDisplayName)
	$groupboxEmailSettings.Controls.Add($textboxFrom)
	$groupboxEmailSettings.Controls.Add($labelFrom)
	$groupboxEmailSettings.Controls.Add($labelSmtpServerAdress)
	$groupboxEmailSettings.Controls.Add($textboxSmtpServerAdress)
	$groupboxEmailSettings.Controls.Add($buttonDistribute)
	$groupboxEmailSettings.Dock = 'Bottom'
	$groupboxEmailSettings.Location = '3, 266'
	$groupboxEmailSettings.Name = "groupboxEmailSettings"
	$groupboxEmailSettings.Size = '557, 102'
	$groupboxEmailSettings.TabIndex = 8
	$groupboxEmailSettings.TabStop = $False
	$groupboxEmailSettings.Text = "Email message settings"
	$groupboxEmailSettings.Visible = $False
	#
	# progressbaroverlay
	#
	$progressbaroverlay.Location = '375, 74'
	$progressbaroverlay.Name = "progressbaroverlay"
	$progressbaroverlay.Size = '85, 20'
	$progressbaroverlay.Step = 1
	$progressbaroverlay.TabIndex = 13
	$progressbaroverlay.Visible = $False
	#
	# comboboxPriority
	#
	$comboboxPriority.DropDownStyle = 'DropDownList'
	$comboboxPriority.FlatStyle = 'Popup'
	$comboboxPriority.FormattingEnabled = $True
	$comboboxPriority.Location = '5, 74'
	$comboboxPriority.Name = "comboboxPriority"
	$comboboxPriority.Size = '180, 21'
	$comboboxPriority.TabIndex = 12
	#
	# Priority
	#
	$Priority.Location = '5, 57'
	$Priority.Name = "Priority"
	$Priority.Size = '180, 15'
	$Priority.TabIndex = 11
	$Priority.Text = "Priority"
	#
	# labelSubject
	#
	$labelSubject.Location = '188, 57'
	$labelSubject.Name = "labelSubject"
	$labelSubject.Size = '180, 15'
	$labelSubject.TabIndex = 8
	$labelSubject.Text = "Subject"
	#
	# textboxSubject
	#
	$textboxSubject.Location = '188, 75'
	$textboxSubject.Name = "textboxSubject"
	$textboxSubject.Size = '180, 20'
	$textboxSubject.TabIndex = 7
	#
	# textboxDisplayName
	#
	$textboxDisplayName.Location = '371, 34'
	$textboxDisplayName.Name = "textboxDisplayName"
	$textboxDisplayName.Size = '180, 20'
	$textboxDisplayName.TabIndex = 6
	#
	# labelDisplayName
	#
	$labelDisplayName.Location = '371, 16'
	$labelDisplayName.Name = "labelDisplayName"
	$labelDisplayName.Size = '180, 15'
	$labelDisplayName.TabIndex = 5
	$labelDisplayName.Text = "Display Name"
	#
	# textboxFrom
	#
	$textboxFrom.Location = '188, 34'
	$textboxFrom.Name = "textboxFrom"
	$textboxFrom.Size = '180, 20'
	$textboxFrom.TabIndex = 4
	#
	# labelFrom
	#
	$labelFrom.Location = '188, 16'
	$labelFrom.Name = "labelFrom"
	$labelFrom.Size = '180, 15'
	$labelFrom.TabIndex = 3
	$labelFrom.Text = "From"
	#
	# labelSmtpServerAdress
	#
	$labelSmtpServerAdress.Location = '5, 16'
	$labelSmtpServerAdress.Name = "labelSmtpServerAdress"
	$labelSmtpServerAdress.Size = '180, 15'
	$labelSmtpServerAdress.TabIndex = 2
	$labelSmtpServerAdress.Text = "Smtp server adress"
	#
	# textboxSmtpServerAdress
	#
	$textboxSmtpServerAdress.Location = '5, 34'
	$textboxSmtpServerAdress.Name = "textboxSmtpServerAdress"
	$textboxSmtpServerAdress.Size = '180, 20'
	$textboxSmtpServerAdress.TabIndex = 1
	#
	# buttonDistribute
	#
	$buttonDistribute.FlatStyle = 'Popup'
	$buttonDistribute.Location = '466, 74'
	$buttonDistribute.Name = "buttonDistribute"
	$buttonDistribute.Size = '85, 20'
	$buttonDistribute.TabIndex = 0
	$buttonDistribute.Text = "Distribute"
	$buttonDistribute.UseVisualStyleBackColor = $True
	$buttonDistribute.add_Click($buttonDistribute_Click)
	#
	# GroupboxInputCsv
	#
	$GroupboxInputCsv.Controls.Add($textboxFileCsvInput)
	$GroupboxInputCsv.Controls.Add($ButtonLoadCsvInput)
	$GroupboxInputCsv.Controls.Add($buttonPreviewLoadedCsvFile)
	$GroupboxInputCsv.Controls.Add($buttonBrowseCsvInput)
	$GroupboxInputCsv.Location = '3, 12'
	$GroupboxInputCsv.Name = "GroupboxInputCsv"
	$GroupboxInputCsv.Size = '278, 70'
	$GroupboxInputCsv.TabIndex = 6
	$GroupboxInputCsv.TabStop = $False
	$GroupboxInputCsv.Text = "Input Csv"
	#
	# textboxFileCsvInput
	#
	$textboxFileCsvInput.AutoCompleteMode = 'SuggestAppend'
	$textboxFileCsvInput.AutoCompleteSource = 'FileSystem'
	$textboxFileCsvInput.Location = '7, 21'
	$textboxFileCsvInput.Name = "textboxFileCsvInput"
	$textboxFileCsvInput.Size = '180, 20'
	$textboxFileCsvInput.TabIndex = 0
	#
	# ButtonLoadCsvInput
	#
	$ButtonLoadCsvInput.FlatStyle = 'Popup'
	$ButtonLoadCsvInput.Location = '224, 21'
	$ButtonLoadCsvInput.Name = "ButtonLoadCsvInput"
	$ButtonLoadCsvInput.Size = '51, 20'
	$ButtonLoadCsvInput.TabIndex = 2
	$ButtonLoadCsvInput.Text = "Load"
	$ButtonLoadCsvInput.UseVisualStyleBackColor = $True
	$ButtonLoadCsvInput.add_Click($ButtonLoadCsvInput_Click)
	#
	# buttonPreviewLoadedCsvFile
	#
	$buttonPreviewLoadedCsvFile.Enabled = $False
	$buttonPreviewLoadedCsvFile.FlatStyle = 'Popup'
	$buttonPreviewLoadedCsvFile.Location = '7, 47'
	$buttonPreviewLoadedCsvFile.Name = "buttonPreviewLoadedCsvFile"
	$buttonPreviewLoadedCsvFile.Size = '268, 20'
	$buttonPreviewLoadedCsvFile.TabIndex = 4
	$buttonPreviewLoadedCsvFile.Text = "Preview loaded csv file data"
	$buttonPreviewLoadedCsvFile.UseVisualStyleBackColor = $True
	$buttonPreviewLoadedCsvFile.add_Click($buttonPreviewLoadedCsvFile_Click)
	#
	# buttonBrowseCsvInput
	#
	$buttonBrowseCsvInput.FlatStyle = 'Popup'
	$buttonBrowseCsvInput.Location = '193, 21'
	$buttonBrowseCsvInput.Name = "buttonBrowseCsvInput"
	$buttonBrowseCsvInput.Size = '30, 20'
	$buttonBrowseCsvInput.TabIndex = 1
	$buttonBrowseCsvInput.Text = "..."
	$buttonBrowseCsvInput.add_Click($buttonBrowseCsvInput_Click)
	#
	# GroupboxADSearch
	#
	$GroupboxADSearch.Controls.Add($buttonStartJobADSearch)
	$GroupboxADSearch.Controls.Add($DataGridViewADSearch)
	$GroupboxADSearch.Controls.Add($buttonPreviewADUsersSearch)
	$GroupboxADSearch.Location = '3, 88'
	$GroupboxADSearch.Name = "GroupboxADSearch"
	$GroupboxADSearch.Size = '278, 104'
	$GroupboxADSearch.TabIndex = 3
	$GroupboxADSearch.TabStop = $False
	$GroupboxADSearch.Text = "Active Directory User Search"
	$GroupboxADSearch.Visible = $False
	#
	# buttonStartJobADSearch
	#
	$buttonStartJobADSearch.Dock = 'Bottom'
	$buttonStartJobADSearch.FlatStyle = 'Popup'
	$buttonStartJobADSearch.ImageList = $imagelistButtonBusyAnimation
	$buttonStartJobADSearch.Location = '3, 61'
	$buttonStartJobADSearch.Name = "buttonStartJobADSearch"
	$buttonStartJobADSearch.Size = '272, 20'
	$buttonStartJobADSearch.TabIndex = 0
	$buttonStartJobADSearch.Text = "AD User Search"
	$buttonStartJobADSearch.TextImageRelation = 'ImageBeforeText'
	$buttonStartJobADSearch.UseVisualStyleBackColor = $True
	$buttonStartJobADSearch.add_Click($buttonStartJobADSearch_Click)
	#
	# DataGridViewADSearch
	#
	$DataGridViewADSearch.AllowUserToAddRows = $False
	$DataGridViewADSearch.AllowUserToDeleteRows = $False
	$DataGridViewADSearch.AllowUserToResizeColumns = $False
	$DataGridViewADSearch.AllowUserToResizeRows = $False
	$DataGridViewADSearch.AutoSizeColumnsMode = 'Fill'
	$DataGridViewADSearch.AutoSizeRowsMode = 'AllCells'
	$DataGridViewADSearch.BorderStyle = 'Fixed3D'
	$DataGridViewADSearch.ColumnHeadersHeightSizeMode = 'AutoSize'
	$DataGridViewADSearch.Dock = 'Top'
	$DataGridViewADSearch.Location = '3, 16'
	$DataGridViewADSearch.MultiSelect = $False
	$DataGridViewADSearch.Name = "DataGridViewADSearch"
	$DataGridViewADSearch.RowHeadersWidth = 16
	$DataGridViewADSearch.RowHeadersWidthSizeMode = 'DisableResizing'
	$DataGridViewADSearch.SelectionMode = 'CellSelect'
	$DataGridViewADSearch.Size = '272, 44'
	$DataGridViewADSearch.TabIndex = 1
	$DataGridViewADSearch.add_DataError($DataGridViewADSearch_DataError)
	#
	# buttonPreviewADUsersSearch
	#
	$buttonPreviewADUsersSearch.Dock = 'Bottom'
	$buttonPreviewADUsersSearch.Enabled = $False
	$buttonPreviewADUsersSearch.FlatStyle = 'Popup'
	$buttonPreviewADUsersSearch.Location = '3, 81'
	$buttonPreviewADUsersSearch.Name = "buttonPreviewADUsersSearch"
	$buttonPreviewADUsersSearch.Size = '272, 20'
	$buttonPreviewADUsersSearch.TabIndex = 5
	$buttonPreviewADUsersSearch.Text = "Preview AD users search results"
	$buttonPreviewADUsersSearch.UseVisualStyleBackColor = $True
	$buttonPreviewADUsersSearch.add_Click($buttonPreviewADUsersSearch_Click)
	#
	# GroupboxTextLegend
	#
	$GroupboxTextLegend.Controls.Add($DataGridViewTextLegend)
	$GroupboxTextLegend.Location = '284, 12'
	$GroupboxTextLegend.Name = "GroupboxTextLegend"
	$GroupboxTextLegend.Size = '278, 180'
	$GroupboxTextLegend.TabIndex = 1
	$GroupboxTextLegend.TabStop = $False
	$GroupboxTextLegend.Text = "Legend"
	$GroupboxTextLegend.Visible = $False
	#
	# DataGridViewTextLegend
	#
	$DataGridViewTextLegend.AllowUserToAddRows = $False
	$DataGridViewTextLegend.AllowUserToDeleteRows = $False
	$DataGridViewTextLegend.AllowUserToResizeColumns = $False
	$DataGridViewTextLegend.AllowUserToResizeRows = $False
	$DataGridViewTextLegend.AutoSizeColumnsMode = 'Fill'
	$DataGridViewTextLegend.AutoSizeRowsMode = 'AllCells'
	$DataGridViewTextLegend.BorderStyle = 'Fixed3D'
	$DataGridViewTextLegend.ColumnHeadersHeightSizeMode = 'AutoSize'
	$DataGridViewTextLegend.Dock = 'Fill'
	$DataGridViewTextLegend.Location = '3, 16'
	$DataGridViewTextLegend.MultiSelect = $False
	$DataGridViewTextLegend.Name = "DataGridViewTextLegend"
	$DataGridViewTextLegend.RowHeadersWidth = 16
	$DataGridViewTextLegend.RowHeadersWidthSizeMode = 'DisableResizing'
	$DataGridViewTextLegend.SelectionMode = 'CellSelect'
	$DataGridViewTextLegend.Size = '272, 161'
	$DataGridViewTextLegend.TabIndex = 0
	$DataGridViewTextLegend.add_CellValueChanged($DataGridViewTextLegend_CellValueChanged)
	$DataGridViewTextLegend.add_CurrentCellDirtyStateChanged($DataGridViewTextLegend_CurrentCellDirtyStateChanged)
	$DataGridViewTextLegend.add_DataError($DataGridViewTextLegend_DataError)
	#
	# OpenfiledialogCsvInput
	#
	$OpenfiledialogCsvInput.DefaultExt = "csv"
	$OpenfiledialogCsvInput.Filter = "CSV File (.csv)|*.csv|All Files|*.*"
	$OpenfiledialogCsvInput.ShowHelp = $True
	$OpenfiledialogCsvInput.Title = "Specify comma separeted file"
	#
	# TimerNotifyWarning
	#
	$TimerNotifyWarning.Enabled = $True
	$TimerNotifyWarning.Interval = 300
	$TimerNotifyWarning.add_Tick($TimerNotifyWarning_Tick)
	#
	# imagelistButtonBusyAnimation
	#
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	#region Binary Data
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAu
MC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAA
ACZTeXN0ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkD
AAAADwMAAAB2CgAAAk1TRnQBSQFMAgEBCAEAAagBAAGoAQABEAEAARABAAT/ASEBAAj/AUIBTQE2
BwABNgMAASgDAAFAAwABMAMAAQEBAAEgBgABMP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/
AP8AugADwgH/Ay0B/wMtAf8DwgH/MAADwgH/A00B/wOCAf8DwgH/sAADLQH/AwAB/wMAAf8DLQH/
MAADggH/Ay0B/wMtAf8DTQH/gAADwgH/Ay0B/wMtAf8DwgH/IAADLQH/AwAB/wMAAf8DLQH/A8IB
/wNNAf8DggH/A8IB/xAAA8IB/wMtAf8DLQH/A8IB/wNNAf8DLQH/Ay0B/wNNAf8EAAOSAf8DkgH/
A8IB/3AAAy0B/wMAAf8DAAH/Ay0B/yAAA8IB/wMtAf8DLQH/A8IB/wOCAf8DLQH/Ay0B/wOCAf8Q
AAMtAf8DAAH/AwAB/wMtAf8DwgH/A00B/wOCAf8DwgH/A5IB/wOCAf8DggH/A5IB/3AAAy0B/wMA
Af8DAAH/Ay0B/zAAA00B/wMtAf8DLQH/A00B/xAAAy0B/wMAAf8DAAH/Ay0B/xAAA5IB/wOSAf8D
kgH/A8IB/3AAA8IB/wMtAf8DLQH/A8IB/zAAA8IB/wNNAf8DggH/A8IB/xAAA8IB/wMtAf8DLQH/
A8IB/xAAA8IB/wOSAf8DkgH/A8IB/zgAA8IB/wMtAf8DLQH/A8IB/zAAA8IB/wOCAf8DTQH/A8IB
/zAAA8IB/wPCAf8DkgH/A8IB/zQAA8IB/wPCAf80AAMtAf8DAAH/AwAB/wMtAf8wAANNAf8DLQH/
Ay0B/wNNAf8wAAOSAf8DggH/A4IB/wOSAf8wAAPCAf8DwgH/A8IB/wPCAf8wAAMtAf8DAAH/AwAB
/wMtAf8wAAOCAf8DLQH/Ay0B/wOCAf8wAAPCAf8DggH/A5IB/wOSAf8wAAPCAf8DwgH/A8IB/wPC
Af8wAAPCAf8DLQH/Ay0B/wPCAf8wAAPCAf8DggH/A00B/wPCAf8wAAPCAf8DkgH/A5IB/wPCAf80
AAPCAf8DwgH/EAADwgH/A8IB/xQAA8IB/wOCAf8DTQH/A8IB/zAAA8IB/wOSAf8DkgH/A8IB/zQA
A8IB/wPCAf9UAAPCAf8DwgH/A8IB/wPCAf8QAANNAf8DLQH/Ay0B/wNNAf8wAAOSAf8DggH/A5IB
/wOSAf8wAAPCAf8DwgH/A8IB/wPCAf9QAAPCAf8DwgH/A8IB/wPCAf8DwgH/A8IB/wOSAf8DwgH/
A4IB/wMtAf8DLQH/A4IB/yQAA8IB/wPCAf8EAAPCAf8DggH/A5IB/wOSAf8wAAPCAf8DwgH/A8IB
/wPCAf9UAAPCAf8DwgH/BAADkgH/A4IB/wOCAf8DkgH/A8IB/wOCAf8DTQH/A8IB/yAAA8IB/wPC
Af8DwgH/A8IB/wPCAf8DkgH/A5IB/wPCAf80AAPCAf8DwgH/ZAADkgH/A5IB/wOSAf8DkgH/MAAD
wgH/A8IB/wPCAf8DwgH/sAADwgH/A5IB/wOSAf8DwgH/NAADwgH/A8IB/7QAA8IB/wPCAf8DkgH/
A8IB/zQAA8IB/wPCAf+0AAOSAf8DggH/A4IB/wOSAf8wAAPCAf8DwgH/A8IB/wPCAf+gAAPCAf8D
TQH/A4IB/wPCAf8DkgH/A5IB/wOSAf8DwgH/BAADwgH/A8IB/xQAA8IB/wPCAf8DkgH/A8IB/wPC
Af8DwgH/A8IB/wPCAf8kAAPCAf8DwgH/dAADggH/Ay0B/wMtAf8DggH/A8IB/wOSAf8DkgH/A8IB
/wPCAf8DwgH/A8IB/wPCAf8QAAOSAf8DggH/A4IB/wOSAf8EAAPCAf8DwgH/JAADwgH/A8IB/wPC
Af8DwgH/cAADTQH/Ay0B/wMtAf8DggH/EAADwgH/A8IB/wPCAf8DwgH/EAADkgH/A5IB/wOSAf8D
kgH/MAADwgH/A8IB/wPCAf8DwgH/cAADwgH/A00B/wNNAf8DwgH/FAADwgH/A8IB/xQAA8IB/wOS
Af8DkgH/A8IB/zQAA8IB/wPCAf9sAAPCAf8DLQH/Ay0B/wPCAf8wAAPCAf8DTQH/A4IB/wPCAf8w
AAPCAf8DwgH/A5IB/wPCAf80AAPCAf8DwgH/NAADLQH/AwAB/wMAAf8DLQH/MAADggH/Ay0B/wMt
Af8DTQH/MAADkgH/A4IB/wOCAf8DkgH/MAADwgH/A8IB/wPCAf8DwgH/MAADLQH/AwAB/wMAAf8D
LQH/MAADTQH/Ay0B/wMtAf8DggH/MAADkgH/A5IB/wOSAf8DkgH/MAADwgH/A8IB/wPCAf8DwgH/
MAADwgH/Ay0B/wMtAf8DwgH/MAADwgH/A00B/wNNAf8DwgH/MAADwgH/A5IB/wOSAf8DwgH/NAAD
wgH/A8IB/3wAA8IB/wMtAf8DLQH/A8IB/zAAA8IB/wNNAf8DggH/A8IB/zAAA8IB/wPCAf8DkgH/
A8IB/xAAA8IB/wMtAf8DLQH/A8IB/1AAAy0B/wMAAf8DAAH/Ay0B/zAAA4IB/wMtAf8DLQH/A00B
/zAAA5IB/wOCAf8DggH/A5IB/xAAAy0B/wMAAf8DAAH/Ay0B/1AAAy0B/wMAAf8DAAH/Ay0B/zAA
A00B/wMtAf8DLQH/A4IB/wOSAf8DLQH/Ay0B/wPCAf8gAAOSAf8DkgH/A5IB/wOSAf8DwgH/A00B
/wOCAf8DwgH/Ay0B/wMAAf8DAAH/Ay0B/1AAA8IB/wMtAf8DLQH/A8IB/zAAA8IB/wOCAf8DTQH/
A8IB/wMtAf8DAAH/AwAB/wMtAf8gAAPCAf8DkgH/A5IB/wPCAf8DggH/Ay0B/wMtAf8DTQH/A8IB
/wMtAf8DLQH/A8IB/6AAAy0B/wMAAf8DAAH/Ay0B/zAAA00B/wMtAf8DLQH/A4IB/7AAA8IB/wMt
Af8DLQH/A8IB/zAAA8IB/wOCAf8DTQH/A8IB/xgAAUIBTQE+BwABPgMAASgDAAFAAwABMAMAAQEB
AAEBBQABgAEBFgAD/4EABP8B/AE/AfwBPwT/AfwBPwH8AT8D/wHDAfwBAwHAASMD/wHDAfwBAwHA
AQMD/wHDAf8DwwP/AcMB/wPDAf8B8AH/AfAB/wHwAf8B+QH/AfAB/wHwAf8B8AH/AfAB/wHwAf8B
8AH/AfAB/wHwAf8B8AH/AfAB/wHwAf8B+QHnAcMB/wHDAf8B5wL/AsMB/wHDAf8BwwL/AcABAwH+
AUMB/wHDAv8B5AEDAfwBAwH/AecC/wH8AT8B/AE/BP8B/AE/Af4BfwT/AfwBPwH+AX8E/wH8AT8B
/AE/BP8BwAEnAcABPwHnA/8BwAEDAcIBfwHDA/8DwwH/AcMD/wHDAecBwwH/AecD/wEPAf8BDwH/
AQ8B/wGfAf8BDwH/AQ8B/wEPAf8BDwH/AQ8B/wEPAf8BDwH/AQ8B/wEPAf8BDwH/AQ8B/wGfA/8B
wwH/AcMB/wLDAv8BwwH/AcMB/wLDAv8BwwH/AcABPwHAAQMC/wHDAf8BwAE/AcABAwT/AfwBPwH8
AT8E/wH8AT8B/AE/Cw=='))
	#endregion
	$imagelistButtonBusyAnimation.ImageStream = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$imagelistButtonBusyAnimation.TransparentColor = 'Transparent'
	#
	# timerJobTracker
	#
	$timerJobTracker.add_Tick($timerJobTracker_Tick)
	#
	# OpenfiledialogTextInput
	#
	$OpenfiledialogTextInput.DefaultExt = "txt"
	$OpenfiledialogTextInput.Filter = "Text File (.txt)|*.txt|All Files|*.*"
	$OpenfiledialogTextInput.ShowHelp = $True
	$OpenfiledialogTextInput.Title = "Specify text pattern file"
	#
	# TimerNotifySuccess
	#
	$TimerNotifySuccess.Interval = 300
	$TimerNotifySuccess.add_Tick($TimerNotifySuccess_Tick)
	#
	# contextmenustrip
	#
	[void]$contextmenustrip.Items.Add($showLogsToolStripMenuItem)
	$contextmenustrip.Name = "contextmenustrip1"
	$contextmenustrip.Size = '61, 4'
	#
	# showLogsToolStripMenuItem
	#
	$showLogsToolStripMenuItem.Name = "showLogsToolStripMenuItem"
	$showLogsToolStripMenuItem.Size = '128, 22'
	$showLogsToolStripMenuItem.Text = "Show logs"
	$showLogsToolStripMenuItem.add_Click($showLogsToolStripMenuItem_Click)
	$GroupboxTextLegend.ResumeLayout($false)
	$GroupboxADSearch.ResumeLayout($false)
	$GroupboxInputCsv.ResumeLayout($false)
	$groupboxEmailSettings.ResumeLayout($false)
	$GroupboxPreviewTextLegend.ResumeLayout($false)
	$GroupboxTextInput.ResumeLayout($false)
	$MainForm.ResumeLayout($false)
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $MainForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$MainForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$MainForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$MainForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $MainForm.ShowDialog()
}
#endregion Source: MainForm.psf

#region Source: Globals.ps1
	$global:ProgressPreference = 'SilentlyContinue'
	$ErrorActionPreference = 'SilentlyContinue'
	$ApplicationVersion = '1.0.0.3'
	
	function Invoke-TextInputStep
	{
		param([switch]$Skip)
		if ($ADLookupSkip -eq $true)
		{ $script:ADSearchResult = $RawCsv }
		$ADSearchResult | Get-Member -MemberType 'NoteProperty' |
		Select-Object -ExpandProperty Name | Set-DataGridViewTextLegend
		$GroupboxTextLegend.Visible = $true
		if (-not ($Skip))
		{
			[PSCustomObject]@{
				Time = $(Get-Date -f HH:mm:ss); Action = 'TextInput'; Description = "Loaded text file ""$($textboxFileTextInput.Text.Trim())"""
			} | Export-Csv -Path "$LogsBase\$((Get-Date).ToShortDateString())_log.csv" -NoTypeInformation -Encoding UTF8 -Append
			$ButtonLoadTextInput.BackColor = 'GreenYellow'
			$TimerNotifySuccess.Start()
		}
		$richtextboxTextPattern.Clear()
		$script:TextPattern = (gc $($textboxFileTextInput.Text.Trim()) -Raw)
		$richtextboxTextPattern.AppendText($TextPattern)
		$richtextboxTextPattern.ReadOnly = $true
		$buttonEdit.Text = 'Edit'
		$buttonEdit.Visible = $true
		$richtextboxTextPattern.BackColor = 'Control'
		$GroupboxPreviewTextLegend.Visible = $true
		$groupboxEmailSettings.Visible = $true
		$richtextboxTextPattern.Visible = $true
		$script:PreviewItem = 0
		$GroupboxPreviewTextLegend.Text = "Preview $($PreviewItem + 1)/$($ADSearchResult.Count)"
	}
	
	function Invoke-DistributeStep
	{
		$buttonPreviewADUsersSearch.Text = "Preview AD users search results ($($ADSearchResult.Count))"
		$buttonPreviewADUsersSearch.Enabled = $true
		$buttonStartJobADSearch.BackColor = 'GreenYellow'
		$TimerNotifySuccess.Start()
		$GroupboxADSearch.Enabled = $true
		$GroupboxTextInput.Visible = $true
	}
	
	function New-RegistryKeys
	{
		param ([switch]$New)
		if ($New)
		{
			[void](New-Item -Path 'HKCU:\Software\PK-Tools\Email Distribution')
			[void](New-Item -Path 'HKCU:\Software\PK-Tools\Email Distribution\General')
			[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Email Distribution\General' -Name Version -Value $ApplicationVersion -PropertyType String -Force)
			[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Email Distribution\General' -Name Update -Value 0 -PropertyType String -Force)
			[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Email Distribution\General' -Name UpdateServer -Value 'wgo-it000000601' -PropertyType String -Force)
			[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Email Distribution\General' -Name UpdateDescription -Value '' -PropertyType String -Force)
		}
		[void](New-Item -Path 'HKCU:\Software\PK-Tools\Email Distribution\Configuration' -Force)
		[void](New-Item -Path 'HKCU:\Software\PK-Tools\Email Distribution\Configuration\Common' -Force)
		[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Email Distribution\Configuration\Common' -Name KeepConfiguration -Value False -PropertyType String -Force)
		[void](New-Item -Path 'HKCU:\Software\PK-Tools\Email Distribution\Configuration\Settings' -Force)
		[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Email Distribution\Configuration\Settings' -Name TopMost -Value False -PropertyType String -Force)
	}
	
	function Check-Updates
	{
		Add-JobTracker -Name "Update" `
					   -JobScript {
			param ($ApplicationVersion)
			$UpdateNeeded = (Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Email Distribution\General' -Name Update | Select -ExpandProperty Update)
			if ($UpdateNeeded -eq 1)
			{ [void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Email Distribution\General' -Name Version -Value $ApplicationVersion -PropertyType String -Force) }
			try
			{
				$nc = New-Object -TypeName System.Net.WebClient
				[version]$check = $nc.DownloadString("http://$(Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Email Distribution\General' -Name UpdateServer | Select -ExpandProperty UpdateServer)/software/email_distribution/version.txt")
				[version]$current = Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Email Distribution\General' -Name Version | Select -ExpandProperty Version
				if ($check -gt $current)
				{
					$UpdateDescription = $nc.DownloadString("http://$(Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\General' -Name UpdateServer | Select -ExpandProperty UpdateServer)/software/email_distribution/description.txt")
					[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Email Distribution\General' -Name Update -Value 1 -PropertyType String -Force)
					[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Email Distribution\General' -Name UpdateDescription -Value $UpdateDescription -PropertyType String -Force)
					$ResultOutput = [PSCustomObject]@{ UpdateDescription= $UpdateDescription; Check=$check; Current=$current}
					Write-Output $ResultOutput
				}
				else
				{
					[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Email Distribution\General' -Name Update -Value 0 -PropertyType String -Force)
					[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Email Distribution\General' -Name UpdateDescription -Value '' -PropertyType String -Force)
				}
			}
			catch
			{ }
		}`
					   -CompletedScript {
			Param ($Job)
			$result = Receive-Job -Job $Job
			if ($result) { Call-update_notification_psf -Title "Update available. Current version is $($result.current)" -DescriptionLabel 'Description' -DescriptionText $($result.UpdateDescription) -UpdateLabel "New version $($result.check) available!" }
		} -ArgumentList $ApplicationVersion, $check, $current
		
	}
	
	function Invoke-CheckForConfig
	{
		$script:Tags = '{FALSE}', '{PERSON}', '{ADRESS}', '{EMAIL}', '{ID}', '{SUBJECT}'
		$script:Filters = 'DisplayName', 'DistinguishedName', 'SamAccountName', 'SID', 'mail'
		$script:LogsBase = "$env:TEMP\Email Distribution"
		
		$file = gci -Path $PWD.Path -File -Filter 'configuration.xml' | select -ExpandProperty FullName
		if ($file)
		{		
			[xml]$XML = gc $file
			if ($XML.EmailDistribution.Description -eq 'Email Distribution Utility')
			{
				[PSCustomObject]@{ Time = $(Get-Date -f HH:mm:ss); Action = 'XML'; Description = "Loaded XML configuration file ""$file""" } | Export-Csv -Path "$LogsBase\$((Get-Date).ToShortDateString())_log.csv" -NoTypeInformation -Encoding UTF8 -Append
				if ($xml.EmailDistribution.Configuration.Log.Path)
				{ $script:LogsBase = $xml.EmailDistribution.Configuration.Log.Path}
				if ($xml.EmailDistribution.Configuration.PatternTag.Tag)
				{ $script:Tags = $xml.EmailDistribution.Configuration.PatternTag.Tag }
				if ($xml.EmailDistribution.Configuration.ADFilter.Filter)
				{ $script:Filters = $xml.EmailDistribution.Configuration.ADFilter.Filter }
				if ($xml.EmailDistribution.Configuration)
				{ $PreLoadedConfig = $xml.EmailDistribution.Configuration }
				if ($PreLoadedConfig.Email.SmtpServer)
				{ $textboxSmtpServerAdress.Text = $PreLoadedConfig.Email.SmtpServer }
				if ($PreLoadedConfig.Email.FromAdress -match "^([a-z0-9]+[.+-])*([a-z0-9]+)+@(([a-z0-9]+[.-])+([a-z]{2,})$|(([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5])(\.|$)){4})")
				{ $textboxFrom.Text = $PreLoadedConfig.Email.FromAdress }
				if ($PreLoadedConfig.Email.DisplayName)
				{ $textboxDisplayName.Text = $PreLoadedConfig.Email.DisplayName }
				if ($PreLoadedConfig.Email.Subject)
				{ $textboxSubject.Text = $PreLoadedConfig.Email.Subject }
				if ($PreLoadedConfig.Email.Priority)
				{ $textboxPriority.SelectedItem = $PreLoadedConfig.Email.Priority }
				if ($xml.EmailDistribution.Configuration.UpdateServer.Adress)
				{
					[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Email Distribution\General' -Name UpdateServer -Value $xml.EmailDistribution.Configuration.UpdateServer.Adress -PropertyType String -Force)
				}
				if ($xml.EmailDistribution.Configuration.ADLookupSkip.Enable)
				{
					$script:ADLookupSkip = $xml.EmailDistribution.Configuration.ADLookupSkip.Enable
					[PSCustomObject]@{ Time = $(Get-Date -f HH:mm:ss); Action = 'XML'; Description = "ADLookupSkip is set to ""$ADLookupSkip""" } | Export-Csv -Path "$LogsBase\$((Get-Date).ToShortDateString())_log.csv" -NoTypeInformation -Encoding UTF8 -Append
				}
				if ($xml.EmailDistribution.Configuration.TextPatternSkip.Enable)
				{
					$script:TextPatternSkip = $xml.EmailDistribution.Configuration.TextPatternSkip.Enable
					[PSCustomObject]@{ Time = $(Get-Date -f HH:mm:ss); Action = 'XML'; Description = "TextPatternSkip is set to ""$($xml.EmailDistribution.Configuration.TextPatternSkip.Enable)""" } | Export-Csv -Path "$LogsBase\$((Get-Date).ToShortDateString())_log.csv" -NoTypeInformation -Encoding UTF8 -Append
				}
				if ($PreLoadedConfig.Email.Cc)
				{
					$script:Cc = @()
					$CcArray = @($PreLoadedConfig.Email.Cc -split ',')
					$CcArray | % {
						if ($_ -match "^([a-z0-9]+[.+-])*([a-z0-9]+)+@(([a-z0-9]+[.-])+([a-z]{2,})$|(([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5])(\.|$)){4})")
						{ $script:Cc += $_ }
					}
					[PSCustomObject]@{ Time = $(Get-Date -f HH:mm:ss); Action = 'XML'; Description = "Cc; Copy is set to ""$Cc""" } | Export-Csv -Path "$LogsBase\$((Get-Date).ToShortDateString())_log.csv" -NoTypeInformation -Encoding UTF8 -Append
				}
			}
			if ($PreLoadedConfig.Email.Bcc)
			{
				$script:Bcc = @()
				$BccArray = @($PreLoadedConfig.Email.Bcc -split ',')
				$BccArray | % {
					if ($_ -match "^([a-z0-9]+[.+-])*([a-z0-9]+)+@(([a-z0-9]+[.-])+([a-z]{2,})$|(([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5])(\.|$)){4})")
					{ $script:Bcc += $_ }
				}
				[PSCustomObject]@{ Time = $(Get-Date -f HH:mm:ss); Action = 'XML'; Description = "Bcc; Copy is set to ""$Bcc""" } | Export-Csv -Path "$LogsBase\$((Get-Date).ToShortDateString())_log.csv" -NoTypeInformation -Encoding UTF8 -Append
			}
		}
	}
	
	function Invoke-Requirements
	{
		if ($PSVersionTable.PSVersion.Major -lt 3)
		{
			[void][System.Windows.Forms.MessageBox]::Show("Powershell version 3 required", "Warning")
			$MainForm.Close()
		}
		else
		{
			if (-not(gci ($env:PSModulePath -split ';')).Name.Contains('ActiveDirectory'))
			{
				[void][System.Windows.Forms.MessageBox]::Show("ActiveDirectory module required", "Warning")
				$MainForm.Close()
			}
		}
		
	}
	
	function Invoke-DataGridViewActiveDirectoryUserSearch
	{
		$ColumnElement = New-Object System.Windows.Forms.DataGridViewComboBoxColumn
		$ColumnElement.Name = 'Csv Element'
		$ColumnFilter = New-Object System.Windows.Forms.DataGridViewComboBoxColumn
		$ColumnFilter.Name = 'AD Filter'
		$Filters | % { $ColumnFilter.Items.Add($_) }
		$DataGridViewADSearch.Columns.Add($ColumnElement)
		$DataGridViewADSearch.Columns.Add($ColumnFilter)
	}
	
	function Invoke-DataGridViewTextLegend
	{
		$ColumnElement = New-Object System.Windows.Forms.DataGridViewTextBoxColumn
		$ColumnElement.ReadOnly = $true
		$ColumnElement.Name = 'Csv Element'
		$ColumnTag = New-Object System.Windows.Forms.DataGridViewComboBoxColumn
		$ColumnTag.Name = 'Text Tag'
		$Tags | % { $ColumnTag.Items.Add($_) }
		$DataGridViewTextLegend.Columns.Add($ColumnElement)
		$DataGridViewTextLegend.Columns.Add($ColumnTag)
	}
	
	function Get-CsvInput
	{
		[CmdletBinding()]
		param (
			[Parameter(Mandatory = $true)]
			[ValidateScript({ [System.IO.Path]::GetExtension($_) -eq '.csv' })][string]$CsvPath,
			[ValidateSet('UTF8', 'Default')]$Encoding
		)
		[array]$script:RawCsv = Import-Csv -Path $CsvPath -Encoding $Encoding
		$RawCsv | Get-Member -MemberType NoteProperty | Select -ExpandProperty Name
	}
	
	function Set-DataGridViewTextLegend
	{
		$i = 0
		do { $DataGridViewTextLegend.Rows.Clear() }
		while ($DataGridViewTextLegend.Rows.Count -gt 0)
		$Input | % {
			$DataGridViewTextLegend.Rows.Add()
			$DataGridViewTextLegend.Rows[$i].Cells[0].Value = $_
			$DataGridViewTextLegend.Rows[$i].Cells[1].Value = $DataGridViewTextLegend.Rows[$i].Cells[1].Items[0]
			$i++
		}
	}
	
	function Set-DataGridViewActiveDirectoryUserSearch
	{
		do { $DataGridViewADSearch.Rows.Clear() }
		while ($DataGridViewADSearch.Rows.Count -gt 0)
		$DataGridViewADSearch.Rows.Add()
		$Input | % {
			$DataGridViewADSearch.Rows[0].Cells[0].Items.Add($_)
		}
		$DataGridViewADSearch.Rows[0].Cells[0].Value = $DataGridViewADSearch.Rows[0].Cells[0].Items[0]
		$DataGridViewADSearch.Rows[0].Cells[1].Value = $DataGridViewADSearch.Rows[0].Cells[1].Items[0]
	}
	
	function Update-JobTracker
	{
		$timerJobTracker.Stop() #Freeze the Timer
		
		for ($index = 0; $index -lt $JobTrackerList.Count; $index++)
		{
			$psObject = $JobTrackerList[$index]
			
			if ($psObject -ne $null)
			{
				if ($psObject.Job -ne $null)
				{
					if ($psObject.Job.State -ne "Running")
					{
						#Call the Complete Script Block
						if ($psObject.CompleteScript -ne $null)
						{
							#$results = Receive-Job -Job $psObject.Job
							Invoke-Command -ScriptBlock $psObject.CompleteScript -ArgumentList $psObject.Job
						}
						
						$JobTrackerList.RemoveAt($index)
						Remove-Job -Job $psObject.Job
						$index-- #Step back so we don't skip a job
					}
					elseif ($psObject.UpdateScript -ne $null)
					{
						#Call the Update Script Block
						Invoke-Command -ScriptBlock $psObject.UpdateScript -ArgumentList $psObject.Job
					}
				}
			}
			else
			{
				$JobTrackerList.RemoveAt($index)
				$index-- #Step back so we don't skip a job
			}
		}
		
		if ($JobTrackerList.Count -gt 0)
		{
			$timerJobTracker.Start()#Resume the timer
		}
	}
	
	function Stop-JobTracker
	{
		$timerJobTracker.Stop()
		while ($JobTrackerList.Count -gt 0)
		{
			$job = $JobTrackerList[0].Job
			$JobTrackerList.RemoveAt(0)
			Stop-Job $job
			Remove-Job $job
		}
	}
	
	function Add-JobTracker
	{
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[string]$Name,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[ScriptBlock]$JobScript,
			$ArgumentList = $null,
			[ScriptBlock]$CompletedScript,
			[ScriptBlock]$UpdateScript)
		
		$job = Start-Job -Name $Name -ScriptBlock $JobScript -ArgumentList $ArgumentList
		
		if ($job -ne $null)
		{
			$members = @{
				"Job" = $Job;
				"CompleteScript" = $CompletedScript;
				"UpdateScript" = $UpdateScript
			}
			
			$psObject = New-Object System.Management.Automation.PSObject -Property $members
			
			[void]$JobTrackerList.Add($psObject)
			
			if (-not $timerJobTracker.Enabled)
			{
				$timerJobTracker.Start()
			}
		}
		elseif ($CompletedScript -ne $null)
		{
			Invoke-Command -ScriptBlock $CompletedScript -ArgumentList $null
		}
	}
	
	function Get-TextLegendSetup
	{
		$TextLegendItemsSetup = @()
		for ($i = 0; $i -lt $DataGridViewTextLegend.Rows.Count; $i++)
		{ $TextLegendItemsSetup += [PSCustomObject]@{ 'Element' = $($DataGridViewTextLegend.Rows[$i].Cells[0].Value); 'Tag' = $($DataGridViewTextLegend.Rows[$i].Cells[1].Value) } }
		Write-Output $TextLegendItemsSetup
	}
	
	function Set-PreviewTextByTextLeged
	{
		param([int]$Item)
		$String = $TextPattern
		$Input | % {
			$TextLegendItem = $_
			$String = [regex]::Replace($String, $TextLegendItem.Tag, $ADSearchResult[$Item]."$($TextLegendItem.Element)")
		}
		$richtextboxTextPattern.Clear()
		$richtextboxTextPattern.AppendText($String)
	}
	
	function Set-MessageText
	{
		param ([int]$Item)
		$String = $TextPattern
		$Input | % {
			$TextLegendItem = $_
			$String = [regex]::Replace($String, $TextLegendItem.Tag, $ADSearchResult[$Item]."$($TextLegendItem.Element)")
		}
		Write-Output ($String -split "`n" | % { "$_<br>" })
	}
	
	function Get-EmailElement
	{
		Get-TextLegendSetup | ? { $_.Tag -eq '{EMAIL}' } | Select -ExpandProperty Element
	}
	
	function Set-EmailPreview
	{
		param ([int]$Item)
		$textboxTo.Text = '{EMAIL}'
		$EmailAdress = $ADSearchResult[$Item]."$(Get-EmailElement)"
		if ($EmailAdress)
		{ $textboxTo.Text = [regex]::Replace($($textboxTo.Text.Trim()), '{EMAIL}', $EmailAdress) }
	}#endregion Source: Globals.ps1

#region Source: Preview.psf
function Call-Preview_psf
{
param($Title,$Data)

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formPreview = New-Object 'System.Windows.Forms.Form'
	$DataGridViewPreview = New-Object 'System.Windows.Forms.DataGridView'
	$contextmenustripRemoveItem = New-Object 'System.Windows.Forms.ContextMenuStrip'
	$removeSelectedItemFromListToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formPreview_Load = {
		$formPreview.Text = $Title
		$ProcessArray = New-Object System.Collections.ArrayList
		$ProcessArray.AddRange($Data)
		$DataGridViewPreview.DataSource = $ProcessArray
	}
	$DataGridViewPreview_DataError=[System.Windows.Forms.DataGridViewDataErrorEventHandler]{
		{ }
	}
	
	$DataGridViewPreview_ColumnHeaderMouseClick=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{
		$ProcessArray = New-Object System.Collections.ArrayList
		$ProcessArray.AddRange(($Data | Sort-Object -Property $DataGridViewPreview.Columns[$_.ColumnIndex].Name))
		$DataGridViewPreview.DataSource = $ProcessArray
	}
	
	$DataGridViewPreview_ColumnHeaderMouseDoubleClick=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{
		$ProcessArray = New-Object System.Collections.ArrayList
		$ProcessArray.AddRange(($Data | Sort-Object -Descending -Property $DataGridViewPreview.Columns[$_.ColumnIndex].Name))
		$DataGridViewPreview.DataSource = $ProcessArray
	}
	
	$removeSelectedItemFromListToolStripMenuItem_Click={
		$ItemsToRemove = @()
		($DataGridViewPreview.SelectedRows | Select-Object -ExpandProperty Index) | % {
			$ItemsToRemove += $_
		}
		if ($Title -eq 'Preview Csv')
		{
			$NewSet = @()
			$TotalIndex = 0..($RawCsv.Count - 1)
			$KeepIndex = $TotalIndex | ? { $_ -notin $ItemsToRemove }
			$KeepItems = $KeepIndex | % { $NewSet += $RawCsv[$_] }
			$script:RawCsv = $NewSet
		}
		if ($Title -eq 'Preview AD Users Search')
		{
			$NewSet = @()
			$TotalIndex = 0..($ADSearchResult.Count - 1)
			$KeepIndex = $TotalIndex | ? { $_ -notin $ItemsToRemove }
			$KeepItems = $KeepIndex | % { $NewSet += $ADSearchResult[$_] }
			$script:ADSearchResult = $NewSet
		}
		$ProcessArray = New-Object System.Collections.ArrayList
		$ProcessArray.AddRange($NewSet)
		$DataGridViewPreview.DataSource = $ProcessArray
	}
	
	$formPreview_FormClosed=[System.Windows.Forms.FormClosedEventHandler]{
		if ($Title -eq 'Preview Csv')
		{
			if ($RawCsv.Count -gt 0)
			{ $buttonPreviewLoadedCsvFile.Text = "Preview loaded csv file data ($($RawCsv.Count))" }
			else
			{
				$buttonPreviewLoadedCsvFile.Text = 'Preview loaded csv file data'
				$buttonPreviewADUsersSearch.Text = 'Preview AD users search results'
				$buttonPreviewLoadedCsvFile.Enabled = $false
				$GroupboxADSearch.Visible = $false
			}
		}
		if ($Title -eq 'Preview AD Users Search')
		{
			if ($ADSearchResult.Count -gt 0)
			{
				$buttonPreviewADUsersSearch.Text = "Preview AD users search results ($($ADSearchResult.Count))"
				$script:PreviewItem = 0
				& $buttonPreviewBack_Click
			}
			else
			{
				$GroupboxTextInput.Visible = $false
				$GroupboxTextLegend.Visible = $false
				$buttonPreviewADUsersSearch.Text = 'Preview AD users search results'
				$buttonPreviewADUsersSearch.Enabled = $false
			}
		}
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formPreview.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$DataGridViewPreview.remove_ColumnHeaderMouseClick($DataGridViewPreview_ColumnHeaderMouseClick)
			$DataGridViewPreview.remove_ColumnHeaderMouseDoubleClick($DataGridViewPreview_ColumnHeaderMouseDoubleClick)
			$DataGridViewPreview.remove_DataError($DataGridViewPreview_DataError)
			$formPreview.remove_FormClosed($formPreview_FormClosed)
			$formPreview.remove_Load($formPreview_Load)
			$removeSelectedItemFromListToolStripMenuItem.remove_Click($removeSelectedItemFromListToolStripMenuItem_Click)
			$formPreview.remove_Load($Form_StateCorrection_Load)
			$formPreview.remove_Closing($Form_StoreValues_Closing)
			$formPreview.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formPreview.SuspendLayout()
	#
	# formPreview
	#
	$formPreview.Controls.Add($DataGridViewPreview)
	$formPreview.ClientSize = '284, 262'
	$formPreview.Name = "formPreview"
	$formPreview.ShowIcon = $False
	$formPreview.StartPosition = 'CenterScreen'
	$formPreview.Text = "Preview"
	$formPreview.WindowState = 'Maximized'
	$formPreview.add_FormClosed($formPreview_FormClosed)
	$formPreview.add_Load($formPreview_Load)
	#
	# DataGridViewPreview
	#
	$DataGridViewPreview.AllowUserToAddRows = $False
	$DataGridViewPreview.AllowUserToDeleteRows = $False
	$DataGridViewPreview.AllowUserToResizeColumns = $False
	$DataGridViewPreview.AllowUserToResizeRows = $False
	$System_Windows_Forms_DataGridViewCellStyle_1 = New-Object 'System.Windows.Forms.DataGridViewCellStyle'
	$System_Windows_Forms_DataGridViewCellStyle_1.BackColor = '224, 224, 224'
	$DataGridViewPreview.AlternatingRowsDefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_1
	$DataGridViewPreview.AutoSizeColumnsMode = 'Fill'
	$DataGridViewPreview.AutoSizeRowsMode = 'AllCells'
	$DataGridViewPreview.BorderStyle = 'Fixed3D'
	$DataGridViewPreview.ColumnHeadersHeightSizeMode = 'AutoSize'
	$DataGridViewPreview.ContextMenuStrip = $contextmenustripRemoveItem
	$DataGridViewPreview.Dock = 'Fill'
	$DataGridViewPreview.Location = '0, 0'
	$DataGridViewPreview.Name = "DataGridViewPreview"
	$DataGridViewPreview.ReadOnly = $True
	$DataGridViewPreview.RowHeadersWidth = 16
	$DataGridViewPreview.RowHeadersWidthSizeMode = 'DisableResizing'
	$DataGridViewPreview.SelectionMode = 'FullRowSelect'
	$DataGridViewPreview.Size = '284, 262'
	$DataGridViewPreview.TabIndex = 1
	$DataGridViewPreview.add_ColumnHeaderMouseClick($DataGridViewPreview_ColumnHeaderMouseClick)
	$DataGridViewPreview.add_ColumnHeaderMouseDoubleClick($DataGridViewPreview_ColumnHeaderMouseDoubleClick)
	$DataGridViewPreview.add_DataError($DataGridViewPreview_DataError)
	#
	# contextmenustripRemoveItem
	#
	[void]$contextmenustripRemoveItem.Items.Add($removeSelectedItemFromListToolStripMenuItem)
	$contextmenustripRemoveItem.Name = "contextmenustripRemoveItem"
	$contextmenustripRemoveItem.Size = '61, 4'
	#
	# removeSelectedItemFromListToolStripMenuItem
	#
	$removeSelectedItemFromListToolStripMenuItem.Name = "removeSelectedItemFromListToolStripMenuItem"
	$removeSelectedItemFromListToolStripMenuItem.Size = '190, 22'
	$removeSelectedItemFromListToolStripMenuItem.Text = "Remove selected item"
	$removeSelectedItemFromListToolStripMenuItem.add_Click($removeSelectedItemFromListToolStripMenuItem_Click)
	$formPreview.ResumeLayout($false)
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formPreview.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formPreview.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formPreview.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formPreview.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formPreview.ShowDialog()
}
#endregion Source: Preview.psf

#region Source: Logs.psf
function Call-Logs_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formLogs = New-Object 'System.Windows.Forms.Form'
	$groupboxAvailableLogs = New-Object 'System.Windows.Forms.GroupBox'
	$DataGridViewSelectedLog = New-Object 'System.Windows.Forms.DataGridView'
	$listboxAvailableLogs = New-Object 'System.Windows.Forms.ListBox'
	$groupboxCheckBoxes = New-Object 'System.Windows.Forms.GroupBox'
	$buttonOpenLogsBase = New-Object 'System.Windows.Forms.Button'
	$CheckboxAutoUpdate = New-Object 'System.Windows.Forms.CheckBox'
	$TimerAutoUpdate = New-Object 'System.Windows.Forms.Timer'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	$formLogs_Load = {
		$script:SortingProperties = @{ Descending = $true; Property = Time }
		$logsavailable = gci -Path $logsbase -Filter '*.csv' | Sort-Object -Property CreationTime -Descending | Select-Object -ExpandProperty Name
		$logsavailable | % { $listboxAvailableLogs.Items.Add($_) }
		$listboxAvailableLogs.SelectedIndex = 0
		& $listboxAvailableLogs_Click
		$TimerAutoUpdate.Start()
	}
	
	$listboxAvailableLogs_Click = {
		$SelectedLog = Import-Csv "$logsbase\$($listboxAvailableLogs.SelectedItem)" -Encoding Default | Sort-Object -Property Time -Descending
		$ProcessArray = New-Object System.Collections.ArrayList
		$ProcessArray.AddRange($SelectedLog)
		$DataGridViewSelectedLog.DataSource = $ProcessArray
	}
	$DataGridViewSelectedLog_DataError=[System.Windows.Forms.DataGridViewDataErrorEventHandler]{
		{ }
	}
	
	$DataGridViewSelectedLog_ColumnHeaderMouseClick=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{
		$script:SortingProperties = @{ Descending = $false; Property = $DataGridViewSelectedLog.Columns[$_.ColumnIndex].Name }
		$ProcessArray = New-Object System.Collections.ArrayList
		$ProcessArray.AddRange(($DataGridViewSelectedLog.DataSource | Sort-Object @SortingProperties ))
		$DataGridViewSelectedLog.DataSource = $ProcessArray
	
	}
	
	$DataGridViewSelectedLog_ColumnHeaderMouseDoubleClick=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{
		$script:SortingProperties = @{ Descending = $true; Property = $DataGridViewSelectedLog.Columns[$_.ColumnIndex].Name}
		$ProcessArray = New-Object System.Collections.ArrayList
		$ProcessArray.AddRange(($DataGridViewSelectedLog.DataSource | Sort-Object @SortingProperties))
		$DataGridViewSelectedLog.DataSource = $ProcessArray
	}
	
	$TimerAutoUpdate_Tick = {
		if ($CheckboxAutoUpdate.Checked)
		{
			$SelectedLog = Import-Csv "$logsbase\$($listboxAvailableLogs.SelectedItem)" -Encoding Default
			$ProcessArray = New-Object System.Collections.ArrayList
			$ProcessArray.AddRange(($SelectedLog | Sort-Object @SortingProperties))
			$DataGridViewSelectedLog.DataSource = $ProcessArray
		}
	}
	
	$formLogs_FormClosed=[System.Windows.Forms.FormClosedEventHandler]{
		$TimerAutoUpdate.Stop()
	}
	
	$buttonOpenLogsBase_Click={
		[System.Diagnostics.Process]::Start("explorer.exe","$LogsBase")
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formLogs.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:Logs_listboxAvailableLogs = $listboxAvailableLogs.SelectedItems
		$script:Logs_CheckboxAutoUpdate = $CheckboxAutoUpdate.Checked
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$DataGridViewSelectedLog.remove_ColumnHeaderMouseClick($DataGridViewSelectedLog_ColumnHeaderMouseClick)
			$DataGridViewSelectedLog.remove_ColumnHeaderMouseDoubleClick($DataGridViewSelectedLog_ColumnHeaderMouseDoubleClick)
			$DataGridViewSelectedLog.remove_DataError($DataGridViewSelectedLog_DataError)
			$listboxAvailableLogs.remove_Click($listboxAvailableLogs_Click)
			$buttonOpenLogsBase.remove_Click($buttonOpenLogsBase_Click)
			$formLogs.remove_FormClosed($formLogs_FormClosed)
			$formLogs.remove_Load($formLogs_Load)
			$TimerAutoUpdate.remove_Tick($TimerAutoUpdate_Tick)
			$formLogs.remove_Load($Form_StateCorrection_Load)
			$formLogs.remove_Closing($Form_StoreValues_Closing)
			$formLogs.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formLogs.SuspendLayout()
	$groupboxAvailableLogs.SuspendLayout()
	$groupboxCheckBoxes.SuspendLayout()
	#
	# formLogs
	#
	$formLogs.Controls.Add($groupboxAvailableLogs)
	$formLogs.Controls.Add($groupboxCheckBoxes)
	$formLogs.ClientSize = '284, 262'
	$formLogs.Name = "formLogs"
	$formLogs.ShowIcon = $False
	$formLogs.StartPosition = 'CenterScreen'
	$formLogs.Text = "Logs"
	$formLogs.WindowState = 'Maximized'
	$formLogs.add_FormClosed($formLogs_FormClosed)
	$formLogs.add_Load($formLogs_Load)
	#
	# groupboxAvailableLogs
	#
	$groupboxAvailableLogs.Controls.Add($DataGridViewSelectedLog)
	$groupboxAvailableLogs.Controls.Add($listboxAvailableLogs)
	$groupboxAvailableLogs.Dock = 'Fill'
	$groupboxAvailableLogs.Location = '0, 44'
	$groupboxAvailableLogs.Name = "groupboxAvailableLogs"
	$groupboxAvailableLogs.Size = '284, 218'
	$groupboxAvailableLogs.TabIndex = 3
	$groupboxAvailableLogs.TabStop = $False
	#
	# DataGridViewSelectedLog
	#
	$DataGridViewSelectedLog.AllowUserToAddRows = $False
	$DataGridViewSelectedLog.AllowUserToDeleteRows = $False
	$DataGridViewSelectedLog.AllowUserToResizeColumns = $False
	$DataGridViewSelectedLog.AllowUserToResizeRows = $False
	$System_Windows_Forms_DataGridViewCellStyle_1 = New-Object 'System.Windows.Forms.DataGridViewCellStyle'
	$System_Windows_Forms_DataGridViewCellStyle_1.BackColor = '224, 224, 224'
	$DataGridViewSelectedLog.AlternatingRowsDefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_1
	$DataGridViewSelectedLog.AutoSizeColumnsMode = 'DisplayedCellsExceptHeader'
	$DataGridViewSelectedLog.AutoSizeRowsMode = 'AllCells'
	$DataGridViewSelectedLog.BorderStyle = 'Fixed3D'
	$DataGridViewSelectedLog.ColumnHeadersHeightSizeMode = 'AutoSize'
	$DataGridViewSelectedLog.Dock = 'Fill'
	$DataGridViewSelectedLog.Location = '110, 16'
	$DataGridViewSelectedLog.Name = "DataGridViewSelectedLog"
	$DataGridViewSelectedLog.ReadOnly = $True
	$DataGridViewSelectedLog.RowHeadersWidth = 16
	$DataGridViewSelectedLog.RowHeadersWidthSizeMode = 'DisableResizing'
	$DataGridViewSelectedLog.SelectionMode = 'CellSelect'
	$DataGridViewSelectedLog.Size = '171, 199'
	$DataGridViewSelectedLog.TabIndex = 2
	$DataGridViewSelectedLog.add_ColumnHeaderMouseClick($DataGridViewSelectedLog_ColumnHeaderMouseClick)
	$DataGridViewSelectedLog.add_ColumnHeaderMouseDoubleClick($DataGridViewSelectedLog_ColumnHeaderMouseDoubleClick)
	$DataGridViewSelectedLog.add_DataError($DataGridViewSelectedLog_DataError)
	#
	# listboxAvailableLogs
	#
	$listboxAvailableLogs.Dock = 'Left'
	$listboxAvailableLogs.FormattingEnabled = $True
	$listboxAvailableLogs.Location = '3, 16'
	$listboxAvailableLogs.Name = "listboxAvailableLogs"
	$listboxAvailableLogs.Size = '107, 199'
	$listboxAvailableLogs.TabIndex = 0
	$listboxAvailableLogs.add_Click($listboxAvailableLogs_Click)
	#
	# groupboxCheckBoxes
	#
	$groupboxCheckBoxes.Controls.Add($buttonOpenLogsBase)
	$groupboxCheckBoxes.Controls.Add($CheckboxAutoUpdate)
	$groupboxCheckBoxes.Dock = 'Top'
	$groupboxCheckBoxes.Location = '0, 0'
	$groupboxCheckBoxes.Name = "groupboxCheckBoxes"
	$groupboxCheckBoxes.Size = '284, 44'
	$groupboxCheckBoxes.TabIndex = 3
	$groupboxCheckBoxes.TabStop = $False
	#
	# buttonOpenLogsBase
	#
	$buttonOpenLogsBase.Anchor = 'Top, Bottom, Right'
	$buttonOpenLogsBase.FlatStyle = 'Popup'
	$buttonOpenLogsBase.Location = '171, 15'
	$buttonOpenLogsBase.Name = "buttonOpenLogsBase"
	$buttonOpenLogsBase.Size = '110, 20'
	$buttonOpenLogsBase.TabIndex = 4
	$buttonOpenLogsBase.Text = "Open logs folder"
	$buttonOpenLogsBase.UseVisualStyleBackColor = $True
	$buttonOpenLogsBase.add_Click($buttonOpenLogsBase_Click)
	#
	# CheckboxAutoUpdate
	#
	$CheckboxAutoUpdate.FlatStyle = 'Popup'
	$CheckboxAutoUpdate.Location = '10, 15'
	$CheckboxAutoUpdate.Name = "CheckboxAutoUpdate"
	$CheckboxAutoUpdate.Size = '100, 20'
	$CheckboxAutoUpdate.TabIndex = 3
	$CheckboxAutoUpdate.Text = "Auto update"
	$CheckboxAutoUpdate.UseVisualStyleBackColor = $True
	#
	# TimerAutoUpdate
	#
	$TimerAutoUpdate.Interval = 3000
	$TimerAutoUpdate.add_Tick($TimerAutoUpdate_Tick)
	$groupboxCheckBoxes.ResumeLayout($false)
	$groupboxAvailableLogs.ResumeLayout($false)
	$formLogs.ResumeLayout($false)
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formLogs.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formLogs.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formLogs.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formLogs.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formLogs.ShowDialog()
}
#endregion Source: Logs.psf

#region Source: update_notification.psf
function Call-update_notification_psf
{
Param($Title, $DescriptionLabel, $DescriptionText, $UpdateLabel)

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formUpdate = New-Object 'System.Windows.Forms.Form'
	$labelDescription = New-Object 'System.Windows.Forms.Label'
	$labelNewVersionAvailable = New-Object 'System.Windows.Forms.Label'
	$richtextboxDescription = New-Object 'System.Windows.Forms.RichTextBox'
	$linklabelUpdate = New-Object 'System.Windows.Forms.LinkLabel'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	$formUpdate_Load = {
		$formUpdate.Text = $Title
		$labelNewVersionAvailable.Text = $UpdateLabel
		$labelDescription.Text = $DescriptionLabel
		$richtextboxDescription.Text = $DescriptionText
	}
	
	$linklabelUpdate_LinkClicked=[System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
		[System.Diagnostics.Process]::Start($this.Text)
	}
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formUpdate.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:update_notification_richtextboxDescription = $richtextboxDescription.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$linklabelUpdate.remove_LinkClicked($linklabelUpdate_LinkClicked)
			$formUpdate.remove_Load($formUpdate_Load)
			$formUpdate.remove_Load($Form_StateCorrection_Load)
			$formUpdate.remove_Closing($Form_StoreValues_Closing)
			$formUpdate.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formUpdate.SuspendLayout()
	#
	# formUpdate
	#
	$formUpdate.Controls.Add($labelDescription)
	$formUpdate.Controls.Add($labelNewVersionAvailable)
	$formUpdate.Controls.Add($richtextboxDescription)
	$formUpdate.Controls.Add($linklabelUpdate)
	$formUpdate.ClientSize = '563, 258'
	$formUpdate.FormBorderStyle = 'FixedDialog'
	$formUpdate.MaximizeBox = $False
	$formUpdate.MinimizeBox = $False
	$formUpdate.Name = "formUpdate"
	$formUpdate.StartPosition = 'CenterScreen'
	$formUpdate.Text = "Update"
	$formUpdate.add_Load($formUpdate_Load)
	#
	# labelDescription
	#
	$labelDescription.Location = '88, 48'
	$labelDescription.Name = "labelDescription"
	$labelDescription.Size = '387, 23'
	$labelDescription.TabIndex = 3
	$labelDescription.Text = "Description"
	$labelDescription.TextAlign = 'MiddleCenter'
	#
	# labelNewVersionAvailable
	#
	$labelNewVersionAvailable.Location = '88, 2'
	$labelNewVersionAvailable.Name = "labelNewVersionAvailable"
	$labelNewVersionAvailable.Size = '387, 23'
	$labelNewVersionAvailable.TabIndex = 2
	$labelNewVersionAvailable.Text = "New version available!"
	$labelNewVersionAvailable.TextAlign = 'MiddleCenter'
	#
	# richtextboxDescription
	#
	$richtextboxDescription.Dock = 'Bottom'
	$richtextboxDescription.Location = '0, 74'
	$richtextboxDescription.Name = "richtextboxDescription"
	$richtextboxDescription.ReadOnly = $True
	$richtextboxDescription.Size = '563, 184'
	$richtextboxDescription.TabIndex = 1
	$richtextboxDescription.Text = ""
	#
	# linklabelUpdate
	#
	$linklabelUpdate.Location = '88, 25'
	$linklabelUpdate.Name = "linklabelUpdate"
	$linklabelUpdate.Size = '387, 23'
	$linklabelUpdate.TabIndex = 0
	$linklabelUpdate.TabStop = $True
	$linklabelUpdate.Text = "http://wgo-it000000601/software/email_distribution/EmailDistribution.exe"
	$linklabelUpdate.TextAlign = 'MiddleCenter'
	$linklabelUpdate.add_LinkClicked($linklabelUpdate_LinkClicked)
	$formUpdate.ResumeLayout($false)
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formUpdate.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formUpdate.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formUpdate.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formUpdate.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formUpdate.ShowDialog()
}
#endregion Source: update_notification.psf

#Start the application
Main ($CommandLine)
