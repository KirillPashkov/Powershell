<#
        Generated on:       15.01.2015 12:30
        Generated by:       Kirill Pashkov
#>


function Main 
{
    Param ([String]$Commandline)
    if((Call-regexer_psf) -eq 'OK')
    {

    }
	
    $global:ExitCode = 0 #Set the exit code for the Packager
}

function Call-regexer_psf
{
    [System.Windows.Forms.Application]::EnableVisualStyles()
    $MainForm = New-Object -TypeName 'System.Windows.Forms.Form'
    $matches = New-Object -TypeName 'System.Windows.Forms.GroupBox'
    $matchesbox = New-Object -TypeName 'System.Windows.Forms.RichTextBox'
    $text = New-Object -TypeName 'System.Windows.Forms.GroupBox'
    $inputtextbox = New-Object -TypeName 'System.Windows.Forms.RichTextBox'
    $regex = New-Object -TypeName 'System.Windows.Forms.GroupBox'
    $help = New-Object -TypeName 'System.Windows.Forms.Button'
    $examples = New-Object -TypeName 'System.Windows.Forms.Button'
    $clear = New-Object -TypeName 'System.Windows.Forms.Button'
    $regexbox = New-Object -TypeName 'System.Windows.Forms.TextBox'
    $tooltip = New-Object -TypeName 'System.Windows.Forms.ToolTip'
    $InitialFormWindowState = New-Object -TypeName 'System.Windows.Forms.FormWindowState'
	
    $script:ErrorActionPreference = 'SilentlyContinue'
    $OnLoadFormEvent = {

    }
	
    $regexbox_TextChanged = {
        $matchesbox.SelectAll()
        $matchesbox.SelectionColor = 'Black'
        [regex]$pattern = $regexbox.Text.Trim()
        $Found = $($pattern.Matches($inputtextbox.Text.Trim()) | ForEach-Object -Process {
                $_.Value 
        })
        if ($Found)
        {
            $matchesbox.SelectAll()
            $matchesbox.SelectionColor = 'Red'
            $nextmatchat = 0
            $Found | ForEach-Object -Process {
                $matchesbox.Select($matchesbox.Text.Remove(0, $nextmatchat).IndexOf($_) + $nextmatchat, $_.Length)
                $matchesbox.SelectionColor = 'Green'
                $nextmatchat += $matchesbox.Text.Remove(0, $nextmatchat).IndexOf($_) + $_.Length
            }
        }
    }
	
    $inputtextbox_TextChanged = {
        $matchesbox.Clear()
        $matchesbox.AppendText($inputtextbox.Text)
        & $regexbox_TextChanged
    }
    $help_Click = {
        Call-regexer_help_psf
    }
	
    $examples_Click = {
        Call-regexer_examples_psf
    }
    $clear_Click = {
        $regexbox.Clear()
        $inputtextbox.Clear()
    }
    $Form_StateCorrection_Load = 
    {
        $MainForm.WindowState = $InitialFormWindowState
    }
	
    $Form_StoreValues_Closing = 
    {
        $script:regexer_matchesbox = $matchesbox.Text
        $script:regexer_inputtextbox = $inputtextbox.Text
        $script:regexer_regexbox = $regexbox.Text
    }

	
    $Form_Cleanup_FormClosed = 
    {
        try
        {
            $inputtextbox.remove_TextChanged($inputtextbox_TextChanged)
            $help.remove_Click($help_Click)
            $examples.remove_Click($examples_Click)
            $clear.remove_Click($clear_Click)
            $regexbox.remove_TextChanged($regexbox_TextChanged)
            $MainForm.remove_Load($OnLoadFormEvent)
            $MainForm.remove_Load($Form_StateCorrection_Load)
            $MainForm.remove_Closing($Form_StoreValues_Closing)
            $MainForm.remove_FormClosed($Form_Cleanup_FormClosed)
        }
        catch [Exception]
        {
 
        }
    }

    $MainForm.SuspendLayout()
    $matches.SuspendLayout()
    $text.SuspendLayout()
    $regex.SuspendLayout()
    #
    # MainForm
    #
    $MainForm.Controls.Add($matches)
    $MainForm.Controls.Add($text)
    $MainForm.Controls.Add($regex)
    $MainForm.ClientSize = '750, 518'
    $MainForm.Font = 'Microsoft Sans Serif, 12.25pt'
    $MainForm.FormBorderStyle = 'Fixed3D'
    $MainForm.Name = 'MainForm'
    $MainForm.ShowIcon = $False
    $MainForm.StartPosition = 'CenterScreen'
    $MainForm.Text = 'Powershell Regexer'
    $MainForm.add_Load($OnLoadFormEvent)
    #
    # matches
    #
    $matches.Controls.Add($matchesbox)
    $matches.Dock = 'Bottom'
    $matches.Location = '0, 300'
    $matches.Name = 'matches'
    $matches.Size = '750, 218'
    $matches.TabIndex = 11
    $matches.TabStop = $False
    $matches.Text = 'Matches'
    #
    # matchesbox
    #
    $matchesbox.BorderStyle = 'None'
    $matchesbox.Dock = 'Fill'
    $matchesbox.Enabled = $False
    $matchesbox.Font = 'Arial, 12pt'
    $matchesbox.Location = '3, 22'
    $matchesbox.Name = 'matchesbox'
    $matchesbox.ReadOnly = $True
    $matchesbox.Size = '744, 193'
    $matchesbox.TabIndex = 0
    $matchesbox.Text = ''
    #
    # text
    #
    $text.Controls.Add($inputtextbox)
    $text.Dock = 'Fill'
    $text.Location = '0, 100'
    $text.Name = 'text'
    $text.Size = '750, 418'
    $text.TabIndex = 0
    $text.TabStop = $False
    $text.Text = 'Text'
    #
    # inputtextbox
    #
    $inputtextbox.BorderStyle = 'None'
    $inputtextbox.Dock = 'Fill'
    $inputtextbox.Font = 'Arial, 12pt'
    $inputtextbox.Location = '3, 22'
    $inputtextbox.Name = 'inputtextbox'
    $inputtextbox.Size = '744, 393'
    $inputtextbox.TabIndex = 0
    $inputtextbox.Text = ''
    $inputtextbox.add_TextChanged($inputtextbox_TextChanged)
    #
    # regex
    #
    $regex.Controls.Add($help)
    $regex.Controls.Add($examples)
    $regex.Controls.Add($clear)
    $regex.Controls.Add($regexbox)
    $regex.Dock = 'Top'
    $regex.Location = '0, 0'
    $regex.Name = 'regex'
    $regex.Size = '750, 100'
    $regex.TabIndex = 0
    $regex.TabStop = $False
    $regex.Text = 'Regex'
    #
    # help
    #
    $help.Anchor = 'Top, Right'
    $help.FlatStyle = 'Popup'
    $help.Font = 'Arial Black, 8.25pt, style=Bold'
    $help.Location = '722, 17'
    $help.Name = 'help'
    $help.Size = '22, 22'
    $help.TabIndex = 3
    $help.Text = '?'
    $help.TextImageRelation = 'ImageBeforeText'
    $tooltip.SetToolTip($help, 'Help')
    $help.UseVisualStyleBackColor = $True
    $help.add_Click($help_Click)
    #
    # examples
    #
    $examples.Anchor = 'Top, Right'
    $examples.FlatStyle = 'Popup'
    $examples.Font = 'Arial Black, 8.25pt, style=Bold'
    $examples.Location = '694, 17'
    $examples.Name = 'examples'
    $examples.Size = '22, 22'
    $examples.TabIndex = 2
    $examples.Text = 'E'
    $examples.TextImageRelation = 'ImageBeforeText'
    $tooltip.SetToolTip($examples, 'Examples')
    $examples.UseVisualStyleBackColor = $True
    $examples.add_Click($examples_Click)
    #
    # clear
    #
    $clear.Anchor = 'Top, Right'
    $clear.FlatStyle = 'Popup'
    $clear.Font = 'Arial Black, 8.25pt, style=Bold'
    $clear.Location = '666, 17'
    $clear.Name = 'clear'
    $clear.Size = '22, 22'
    $clear.TabIndex = 1
    $clear.Text = 'C'
    $clear.TextImageRelation = 'ImageBeforeText'
    $tooltip.SetToolTip($clear, 'Clear all fields')
    $clear.UseVisualStyleBackColor = $True
    $clear.add_Click($clear_Click)
    #
    # regexbox
    #
    $regexbox.BorderStyle = 'None'
    $regexbox.Dock = 'Bottom'
    $regexbox.Font = 'Microsoft Sans Serif, 12.25pt'
    $regexbox.Location = '3, 78'
    $regexbox.Name = 'regexbox'
    $regexbox.Size = '744, 19'
    $regexbox.TabIndex = 0
    $regexbox.add_TextChanged($regexbox_TextChanged)
    #
    # tooltip
    #
    $regex.ResumeLayout($False)
    $text.ResumeLayout($False)
    $matches.ResumeLayout($False)
    $MainForm.ResumeLayout($False)
	
    #Save the initial state of the form
    $InitialFormWindowState = $MainForm.WindowState
    #Init the OnLoad event to correct the initial state of the form
    $MainForm.add_Load($Form_StateCorrection_Load)
    #Clean up the control events
    $MainForm.add_FormClosed($Form_Cleanup_FormClosed)
    #Store the control values when form is closing
    $MainForm.add_Closing($Form_StoreValues_Closing)
    #Show the Form
    return $MainForm.ShowDialog()
}
function Set-Example
{
    Param ($Kind)
    switch ($Kind)
    {
        $ipv4
        {
            $regexbox.Text = '\b(([01]?\d?\d|2[0-4]\d|25[0-5])\.){3}([01]?\d?\d|2[0-4]\d|25[0-5])\b'
            $inputtextbox.Text = @"
192.168.1.1
321.22.11.24
8.8.8.8
"@
            & $regexbox_TextChanged
        }
        $emailaddress
        {
            $regexbox.Text = '[_a-zA-Z0-9-]+(\.[_a-zA-Z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,4})'
            $inputtextbox.Text = @"
KirillPashkov@yandex.ru
yourcompany.person@contoso.com
myemail.com
123sendmailhere.net
"@
            & $regexbox_TextChanged
        }
        $sometext
        {
            $regexbox.Text = 'date\s\d+-\d+-\d+\s\d+:\d+'
            $inputtextbox.Text = 'date 2015-01-01 15:14 some text date 2015-05-22 09:33'
            & $regexbox_TextChanged
        }
    }
}

function Call-regexer_help_psf
{
    [System.Windows.Forms.Application]::EnableVisualStyles()
    $formHelp = New-Object -TypeName 'System.Windows.Forms.Form'
    $helpbox = New-Object -TypeName 'System.Windows.Forms.RichTextBox'
    $InitialFormWindowState = New-Object -TypeName 'System.Windows.Forms.FormWindowState'
	
    $formHelp_Load = {
        $helpbox.Clear()
        $helpbox.AppendText(@"
    Windows PowerShell supports the following regular expression characters.


        Format   Logic                            Example
        -------- -------------------------------  -----------------------
        value    Matches exact characters         "book" -match "oo"
                 anywhere in the original value.

        .        Matches any single character.    "copy" -match "c..y"

        [value]  Matches at least one of the      "big" -match "b[iou]g"
                 characters in the brackets.

        [range]  Matches at least one of the      "and" -match "[a-e]nd"
                 characters within the range.
                 The use of a hyphen (-) allows 
                 you to specify an adjacent 
                 character.

        [^]      Matches any characters except    "and" -match "[^brt]nd"
                 those in brackets.

        ^        Matches the beginning            "book" -match "^bo"
                 characters.

        $        Matches the end characters.      "book" -match "ok$"

        *        Matches any instances            "baggy" -match "g*"
                 of the preceding character.

        ?        Matches zero or one instance     "baggy" -match "g?"
                 of the preceding character.

        \        Matches the character that       "Try$" -match "Try\$"
                 follows as an escaped character.


    Windows PowerShell supports the character classes available in 
    Microsoft .NET Framework regular expressions.


        Format   Logic                            Example
        -------- -------------------------------  -----------------------
        \p{name} Matches any character in the     "abcd defg" -match "\p{Ll}+"
                 named character class specified 
                 by {name}. Supported names are 
                 Unicode groups and block 
                 ranges such as Ll, Nd, 
                 Z, IsGreek, and IsBoxDrawing.
 
        \P{name} Matches text not included in     1234 -match "\P{Ll}+"
                 the groups and block ranges 
                 specified in {name}.
 
        \w       Matches any word character.      "abcd defg" -match "\w+"
                 Equivalent to the Unicode        (this matches abcd)
                 character categories [\p{Ll}
                 \p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}]. 
                 If ECMAScript-compliant behavior 
                 is specified with the ECMAScript 
                 option, \w is equivalent to 
                 [a-zA-Z_0-9].
 
        \W       Matches any nonword character.   "abcd defg" -match "\W+"
                 Equivalent to the Unicode        (This matches the space)
                 categories [^\p{Ll}\p{Lu}\p{Lt}
                 \p{Lo}\p{Nd}\p{Pc}].
 
        \s       Matches any white-space          "abcd defg" -match "\s+"
                 character.  Equivalent to the 
                 Unicode character categories 
                 [\f\n\r\t\v\x85\p{Z}].
 
        \S       Matches any non-white-space      "abcd defg" -match "\S+"
                 character. Equivalent to the 
                 Unicode character categories 
                 [^\f\n\r\t\v\x85\p{Z}].
 
        \d       Matches any decimal digit.       12345 -match "\d+"
                 Equivalent to \p{Nd} for 
                 Unicode and [0-9] for non-
                 Unicode behavior.
 
        \D       Matches any nondigit.            "abcd" -match "\D+"
                 Equivalent  to \P{Nd} for 
                 Unicode and [^0-9] for non-
                 Unicode behavior.
 

    Windows PowerShell supports the quantifiers available in .NET Framework
    regular expressions. The following are some examples of quantifiers.


        Format   Logic                            Example
        -------- -------------------------------  -----------------------
        *        Specifies zero or more matches;  "abc" -match "\w*"
                 for example, \w* or (abc)*. 
                 Equivalent to {0,}.
  
        +        Matches repeating instances of   "xyxyxy" -match "xy+"
                 the preceding characters.

        ?        Specifies zero or one matches;   "abc" -match "\w?"
                 for example, \w? or (abc)?. 
                 Equivalent to {0,1}.
 
        {n}      Specifies exactly n matches;     "abc" -match "\w{2}"
                 for example, (pizza){2}. 
        
        {n,}     Specifies at least n matches;    "abc" -match "\w{2,}"
                 for example, (abc){2,}. 
        
        {n,m}    Specifies at least n, but no     "abc" -match "\w{2,3}"
                 more than m, matches. 


    All the comparisons shown in the preceding table evaluate to true.


    Notice that the escape character for regular expressions, a backslash (\),
    is different from the escape character for Windows PowerShell. The
    escape character for Windows PowerShell is the backtick character (`) 
    (ASCII 96).


    For more information, see the "Regular Expression Language Elements" topic
    in the Microsoft Developer Network (MSDN) library 
    at http://go.microsoft.com/fwlink/?LinkId=133231. 
"@)
        $helpbox.SelectionStart = 0
        $helpbox.SelectionLength = 0
    }
	
    $Form_StateCorrection_Load = 
    {
        #Correct the initial state of the form to prevent the .Net maximized form issue
        $formHelp.WindowState = $InitialFormWindowState
    }
	
    $Form_StoreValues_Closing = 
    {
        #Store the control values
        $script:regexer_help_helpbox = $helpbox.Text
    }

	
    $Form_Cleanup_FormClosed = 
    {
        #Remove all event handlers from the controls
        try
        {
            $formHelp.remove_Load($formHelp_Load)
            $formHelp.remove_Load($Form_StateCorrection_Load)
            $formHelp.remove_Closing($Form_StoreValues_Closing)
            $formHelp.remove_FormClosed($Form_Cleanup_FormClosed)
        }
        catch [Exception]
        {
 
        }
    }

    $formHelp.SuspendLayout()
    #
    # formHelp
    #
    $formHelp.Controls.Add($helpbox)
    $formHelp.ClientSize = '734, 512'
    $formHelp.Font = 'Arial, 12pt'
    $formHelp.Name = 'formHelp'
    $formHelp.ShowIcon = $False
    $formHelp.StartPosition = 'CenterScreen'
    $formHelp.Text = 'Help'
    $formHelp.add_Load($formHelp_Load)
    #
    # helpbox
    #
    $helpbox.Dock = 'Fill'
    $helpbox.Font = 'Arial, 12pt'
    $helpbox.Location = '0, 0'
    $helpbox.Name = 'helpbox'
    $helpbox.ReadOnly = $True
    $helpbox.Size = '734, 512'
    $helpbox.TabIndex = 0
    $helpbox.Text = ''
    $formHelp.ResumeLayout($False)
	
    #Save the initial state of the form
    $InitialFormWindowState = $formHelp.WindowState
    #Init the OnLoad event to correct the initial state of the form
    $formHelp.add_Load($Form_StateCorrection_Load)
    #Clean up the control events
    $formHelp.add_FormClosed($Form_Cleanup_FormClosed)
    #Store the control values when form is closing
    $formHelp.add_Closing($Form_StoreValues_Closing)
    #Show the Form
    return $formHelp.ShowDialog()
}
function Call-regexer_examples_psf
{
    [System.Windows.Forms.Application]::EnableVisualStyles()
    $formExamples = New-Object -TypeName 'System.Windows.Forms.Form'
    $emailaddress = New-Object -TypeName 'System.Windows.Forms.RadioButton'
    $sometext = New-Object -TypeName 'System.Windows.Forms.RadioButton'
    $ipv4 = New-Object -TypeName 'System.Windows.Forms.RadioButton'
    $example = New-Object -TypeName 'System.Windows.Forms.Button'
    $InitialFormWindowState = New-Object -TypeName 'System.Windows.Forms.FormWindowState'
    #endregion Generated Form Objects

    #----------------------------------------------
    # User Generated Script
    #----------------------------------------------
	
    $formExamples_Load = {

    }
	
    $example_Click = {
        if ($ipv4.Checked) 
        {
            $Selected = $ipv4 
        }
        if ($sometext.Checked) 
        {
            $Selected = $sometext 
        }
        if ($emailaddress.Checked) 
        {
            $Selected = $emailaddress 
        }
        Set-Example -Kind $Selected
        $formExamples.Close()
    }
    $Form_StateCorrection_Load = 
    {
        #Correct the initial state of the form to prevent the .Net maximized form issue
        $formExamples.WindowState = $InitialFormWindowState
    }
	
    $Form_StoreValues_Closing = 
    {
        #Store the control values
        $script:regexer_examples_emailaddress = $emailaddress.Checked
        $script:regexer_examples_sometext = $sometext.Checked
        $script:regexer_examples_ipv4 = $ipv4.Checked
    }

	
    $Form_Cleanup_FormClosed = 
    {
        #Remove all event handlers from the controls
        try
        {
            $example.remove_Click($example_Click)
            $formExamples.remove_Load($formExamples_Load)
            $formExamples.remove_Load($Form_StateCorrection_Load)
            $formExamples.remove_Closing($Form_StoreValues_Closing)
            $formExamples.remove_FormClosed($Form_Cleanup_FormClosed)
        }
        catch [Exception]
        {
 
        }
    }
	
    $formExamples.SuspendLayout()
    #
    # formExamples
    #
    $formExamples.Controls.Add($emailaddress)
    $formExamples.Controls.Add($sometext)
    $formExamples.Controls.Add($ipv4)
    $formExamples.Controls.Add($example)
    $formExamples.ClientSize = '144, 117'
    $formExamples.Font = 'Arial Narrow, 8.25pt'
    $formExamples.FormBorderStyle = 'Fixed3D'
    $formExamples.MaximizeBox = $False
    $formExamples.MinimizeBox = $False
    $formExamples.Name = 'formExamples'
    $formExamples.ShowIcon = $False
    $formExamples.StartPosition = 'CenterScreen'
    $formExamples.Text = 'Examples'
    $formExamples.add_Load($formExamples_Load)
    #
    # emailaddress
    #
    $emailaddress.Font = 'Arial, 12pt'
    $emailaddress.Location = '7, 30'
    $emailaddress.Name = 'emailaddress'
    $emailaddress.Size = '130, 20'
    $emailaddress.TabIndex = 3
    $emailaddress.TabStop = $True
    $emailaddress.Text = 'Email address'
    $emailaddress.UseVisualStyleBackColor = $True
    #
    # sometext
    #
    $sometext.Font = 'Arial, 12pt'
    $sometext.Location = '7, 56'
    $sometext.Name = 'sometext'
    $sometext.Size = '130, 20'
    $sometext.TabIndex = 1
    $sometext.TabStop = $True
    $sometext.Text = 'Some text'
    $sometext.UseVisualStyleBackColor = $True
    #
    # ipv4
    #
    $ipv4.Font = 'Arial, 12pt'
    $ipv4.Location = '7, 4'
    $ipv4.Name = 'ipv4'
    $ipv4.Size = '130, 20'
    $ipv4.TabIndex = 0
    $ipv4.TabStop = $True
    $ipv4.Text = 'IPv4 address'
    $ipv4.UseVisualStyleBackColor = $True
    #
    # example
    #
    $example.FlatStyle = 'Popup'
    $example.Font = 'Arial, 12pt'
    $example.Location = '36, 83'
    $example.Name = 'example'
    $example.Size = '75, 30'
    $example.TabIndex = 2
    $example.Text = 'Try'
    $example.UseVisualStyleBackColor = $True
    $example.add_Click($example_Click)
    $formExamples.ResumeLayout($False)
	
    #Save the initial state of the form
    $InitialFormWindowState = $formExamples.WindowState
    #Init the OnLoad event to correct the initial state of the form
    $formExamples.add_Load($Form_StateCorrection_Load)
    #Clean up the control events
    $formExamples.add_FormClosed($Form_Cleanup_FormClosed)
    #Store the control values when form is closing
    $formExamples.add_Closing($Form_StoreValues_Closing)
    #Show the Form
    return $formExamples.ShowDialog()
}
Main -Commandline ($Commandline)
