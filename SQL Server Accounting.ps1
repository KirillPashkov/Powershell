<#
        --------------------------------------------------------------------------------
        Generated on:       22.01.2015 11:37
        Generated by:       Kirill Pashkov
        --------------------------------------------------------------------------------
#>


#region Source: Startup.pss
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main 
{
    Param ([String]$Commandline)
    #Note: This function starts the application
    #Note: $Commandline contains the complete argument string passed to the packager 
    #Note: To get the script directory in the Packager use: Split-Path $hostinvocation.MyCommand.path
    #Note: To get the console output in the Packager (Forms Mode) use: $ConsoleOutput (Type: System.Collections.ArrayList)
    #TODO: Initialize and add Function calls to forms
	
    if((Call-MainForm_psf) -eq 'OK')
    {

    }
	
    $global:ExitCode = 0 #Set the exit code for the Packager
}






#endregion Source: Startup.pss

#region Source: DataManagerForm.psf
function Call-DataManagerForm_psf
{
    #----------------------------------------------
    #region Import the Assemblies
    #----------------------------------------------
    [void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    [void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    [void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    #endregion Import Assemblies

    #----------------------------------------------
    #region Generated Form Objects
    #----------------------------------------------
    [System.Windows.Forms.Application]::EnableVisualStyles()
    $formDataManager = New-Object -TypeName 'System.Windows.Forms.Form'
    $groupboxStores = New-Object -TypeName 'System.Windows.Forms.GroupBox'
    $buttonStoresEdit = New-Object -TypeName 'System.Windows.Forms.Button'
    $buttonStoresDelete = New-Object -TypeName 'System.Windows.Forms.Button'
    $buttonStoresAdd = New-Object -TypeName 'System.Windows.Forms.Button'
    $groupboxStoresInput = New-Object -TypeName 'System.Windows.Forms.GroupBox'
    $labelStoreCityInput = New-Object -TypeName 'System.Windows.Forms.Label'
    $textboxStoresAddressCityInput = New-Object -TypeName 'System.Windows.Forms.TextBox'
    $labelStoreAddress = New-Object -TypeName 'System.Windows.Forms.Label'
    $labelStoreName = New-Object -TypeName 'System.Windows.Forms.Label'
    $textboxStoresAddressInput = New-Object -TypeName 'System.Windows.Forms.TextBox'
    $buttonStoresInputAdd = New-Object -TypeName 'System.Windows.Forms.Button'
    $textboxStoresInput = New-Object -TypeName 'System.Windows.Forms.TextBox'
    $comboboxStores = New-Object -TypeName 'System.Windows.Forms.ComboBox'
    $buttonDataManagerClose = New-Object -TypeName 'System.Windows.Forms.Button'
    $groupboxNames = New-Object -TypeName 'System.Windows.Forms.GroupBox'
    $buttonNamesEdit = New-Object -TypeName 'System.Windows.Forms.Button'
    $buttonNamesDelete = New-Object -TypeName 'System.Windows.Forms.Button'
    $buttonNamesAdd = New-Object -TypeName 'System.Windows.Forms.Button'
    $groupboxNamesInput = New-Object -TypeName 'System.Windows.Forms.GroupBox'
    $buttonNamesInputAdd = New-Object -TypeName 'System.Windows.Forms.Button'
    $textboxNamesInput = New-Object -TypeName 'System.Windows.Forms.TextBox'
    $comboboxNames = New-Object -TypeName 'System.Windows.Forms.ComboBox'
    $groupboxTypes = New-Object -TypeName 'System.Windows.Forms.GroupBox'
    $buttonTypesEdit = New-Object -TypeName 'System.Windows.Forms.Button'
    $buttonTypesDelete = New-Object -TypeName 'System.Windows.Forms.Button'
    $buttonTypesAdd = New-Object -TypeName 'System.Windows.Forms.Button'
    $groupboxTypesInput = New-Object -TypeName 'System.Windows.Forms.GroupBox'
    $buttonTypesInputAdd = New-Object -TypeName 'System.Windows.Forms.Button'
    $textboxTypesInput = New-Object -TypeName 'System.Windows.Forms.TextBox'
    $comboboxTypes = New-Object -TypeName 'System.Windows.Forms.ComboBox'
    $groupboxKinds = New-Object -TypeName 'System.Windows.Forms.GroupBox'
    $buttonKindsEdit = New-Object -TypeName 'System.Windows.Forms.Button'
    $buttonKindsDelete = New-Object -TypeName 'System.Windows.Forms.Button'
    $buttonKindsAdd = New-Object -TypeName 'System.Windows.Forms.Button'
    $groupboxKindsInput = New-Object -TypeName 'System.Windows.Forms.GroupBox'
    $buttonKindsInputAdd = New-Object -TypeName 'System.Windows.Forms.Button'
    $textboxKindsInput = New-Object -TypeName 'System.Windows.Forms.TextBox'
    $comboboxKinds = New-Object -TypeName 'System.Windows.Forms.ComboBox'
    $groupboxCategories = New-Object -TypeName 'System.Windows.Forms.GroupBox'
    $buttonCategoriesEdit = New-Object -TypeName 'System.Windows.Forms.Button'
    $buttonCategoriesDelete = New-Object -TypeName 'System.Windows.Forms.Button'
    $buttonCategoriesAdd = New-Object -TypeName 'System.Windows.Forms.Button'
    $groupboxCategoriesInput = New-Object -TypeName 'System.Windows.Forms.GroupBox'
    $buttonCategoriesInputAdd = New-Object -TypeName 'System.Windows.Forms.Button'
    $textboxCategoriesInput = New-Object -TypeName 'System.Windows.Forms.TextBox'
    $comboboxCategories = New-Object -TypeName 'System.Windows.Forms.ComboBox'
    $TimerInput = New-Object -TypeName 'System.Windows.Forms.Timer'
    $timeDataManagerConnectionState = New-Object -TypeName 'System.Windows.Forms.Timer'
    $InitialFormWindowState = New-Object -TypeName 'System.Windows.Forms.FormWindowState'
    #endregion Generated Form Objects

    #----------------------------------------------
    # User Generated Script
    #----------------------------------------------
    $OnLoadFormEvent = {
        $script:EditIsEnabled = 0
        $timeDataManagerConnectionState.Start()
        Set-Comboboxes -Item $comboboxCategories -Table Categories -Property CategoryName
        Set-Comboboxes -Item $comboboxStores -Table Stores -Property Stores -Query "select Name + ' (' + Address + ') ' + City AS Stores from Stores"
        Set-DataManagerEdit
        Set-Language
        Set-DisplayColor
    }
    function Load-ComboBox
    {
        Param (
            [ValidateNotNull()]
            [Parameter(Mandatory = $true)]
            [System.Windows.Forms.ComboBox]$ComboBox,
            [ValidateNotNull()]
            [Parameter(Mandatory = $true)]
            $Items,
            [Parameter(Mandatory = $false)]
            [string]$DisplayMember,
            [switch]$Append
        )
		
        if (-not $Append)
        {
            $ComboBox.Items.Clear()
        }
		
        if ($Items -is [Object[]])
        {
            $ComboBox.Items.AddRange($Items)
        }
        elseif ($Items -is [Array])
        {
            $ComboBox.BeginUpdate()
            foreach ($obj in $Items)
            {
                $ComboBox.Items.Add($obj)
            }
            $ComboBox.EndUpdate()
        }
        else
        {
            $ComboBox.Items.Add($Items)
        }
		
        $ComboBox.DisplayMember = $DisplayMember
    }
    $comboboxCategories_SelectedIndexChanged = {
        $comboboxKinds.Items.Clear()
        $comboboxTypes.Items.Clear()
        $comboboxNames.Items.Clear()
        Set-Comboboxes -Item $comboboxKinds -Table Kinds -Property KindName -Query "select * from Kinds where Category_Id = (select Category_Id from Categories where CategoryName = N'$($comboboxCategories.SelectedItem)')"
        Set-Groupboxes
        if ($script:EditIsEnabled -eq 1)
        {
            Set-EditDataCheck -Groupbox $groupboxCategories
        }
        #Set-DataManagerEdit
    }
    $comboboxKinds_SelectedIndexChanged = {
        $comboboxTypes.Items.Clear()
        $comboboxNames.Items.Clear()
        Set-Comboboxes -Item $comboboxTypes -Table Types -Property TypeName -Query "select * from Types where Kind_Id = (select Kind_Id from Kinds where KindName = N'$($comboboxKinds.SelectedItem)' and Category_Id = (select Category_Id from Categories where CategoryName = N'$($comboboxCategories.SelectedItem)'))"
        Set-Groupboxes
        if ($script:EditIsEnabled -eq 1)
        {
            Set-EditDataCheck -Groupbox $groupboxKinds
        }
        #Set-DataManagerEdit
    }
    $comboboxTypes_SelectedIndexChanged = {
        $comboboxNames.Items.Clear()
        Set-Comboboxes -Item $comboboxNames -Table Names -Property Name -Query "select * from Names where Type_Id = (select Type_Id from Types where TypeName = N'$($comboboxTypes.SelectedItem)' and Kind_Id = (select Kind_Id from Kinds where KindName = N'$($comboboxKinds.SelectedItem)' and Category_Id = (select Category_Id from Categories where CategoryName = N'$($comboboxCategories.SelectedItem)')))"
        Set-Groupboxes
        if ($script:EditIsEnabled -eq 1)
        {
            Set-EditDataCheck -Groupbox $groupboxTypes
        }
        #Set-DataManagerEdit
    }
    $buttonCategoriesAdd_Click = {
        Set-AddEditGroupbox -Groupbox $groupboxCategoriesInput -Add $buttonCategoriesAdd -Delete $buttonCategoriesDelete -Edit $buttonCategoriesEdit -Textbox $textboxCategoriesInput -ActionButton $buttonCategoriesInputAdd -Mode 'Add' -Combobox $comboboxCategories
    }
	
    $buttonKindsAdd_Click = {
        Set-AddEditGroupbox -Groupbox $groupboxKindsInput -Add $buttonKindsAdd -Delete $buttonKindsDelete -Edit $buttonKindsEdit -Textbox $textboxKindsInput -ActionButton $buttonKindsInputAdd -Mode 'Add' -Combobox $comboboxKinds
    }
	
    $buttonTypesAdd_Click = {
        Set-AddEditGroupbox -Groupbox $groupboxTypesInput -Add $buttonTypesAdd -Delete $buttonTypesDelete -Edit $buttonTypesEdit -Textbox $textboxTypesInput -ActionButton $buttonTypesInputAdd -Mode 'Add' -Combobox $comboboxTypes
    }
	
    $buttonNamesAdd_Click = {
        Set-AddEditGroupbox -Groupbox $groupboxNamesInput -Add $buttonNamesAdd -Delete $buttonNamesDelete -Edit $buttonNamesEdit -Textbox $textboxNamesInput -ActionButton $buttonNamesInputAdd -Mode 'Add' -Combobox $comboboxNames
    }
	
    $buttonCategoriesInputAdd_Click = {
        $textboxCategoriesInput.Enabled = $false
        if ($buttonCategoriesInputAdd.Text -eq $script:ModeAddButton)
        {
            if ($comboboxCategories.Items -contains $textboxCategoriesInput.Text.Trim()) 
            {
                $comboboxCategories.SelectedItem = $textboxCategoriesInput.Text.Trim() 
            }
            if ($textboxCategoriesInput.Text.Trim() -ne $comboboxCategories.SelectedItem -and $textboxCategoriesInput.Text.Trim() -ne '')
            {
                Invoke-DatabaseTable @GetDatabaseTableParams -Query "insert into Categories(CategoryName)values(N'$($textboxCategoriesInput.Text.Trim())')"
				
                $comboboxCategories.Items.Clear()
                Invoke-DatabaseTable @GetDatabaseTableParams -Query 'select * from Categories' |
                Select-Object -ExpandProperty CategoryName |
                ForEach-Object	 -Process {
                    Load-ComboBox -ComboBox $comboboxCategories -Items $_ -Append
                }
                $comboboxCategories.SelectedItem = $($textboxCategoriesInput.Text.Trim())
                & $buttonCategoriesAdd_Click
                Set-DataManagerEdit
                $TimerInput.Start()
            }
            else
            {
                $TimerInput.Start()
                $textboxCategoriesInput.BackColor = 'LightCoral'
            }
            $textboxCategoriesInput.Enabled = $true
            $textboxCategoriesInput.Focus()
        }
        if ($buttonCategoriesInputAdd.Text -eq $script:ModeEditButton)
        {
            if ($comboboxCategories.Items -contains $textboxCategoriesInput.Text.Trim()) 
            {
                $comboboxCategories.SelectedItem = $textboxCategoriesInput.Text.Trim() 
            }
            if ($textboxCategoriesInput.Text.Trim() -ne $comboboxCategories.SelectedItem -and $textboxCategoriesInput.Text.Trim() -ne '')
            {
                Invoke-DatabaseTable @GetDatabaseTableParams -Query "update Categories set CategoryName = N'$($textboxCategoriesInput.Text.Trim())' where CategoryName = N'$($comboboxCategories.SelectedItem)'"
                $comboboxCategories.Items.Clear()
                Invoke-DatabaseTable @GetDatabaseTableParams -Query 'select * from Categories' |
                Select-Object -ExpandProperty CategoryName |
                ForEach-Object	 -Process {
                    Load-ComboBox -ComboBox $comboboxCategories -Items $_ -Append
                }
                $comboboxCategories.SelectedItem = $($textboxCategoriesInput.Text.Trim())
                $textboxCategoriesInput.Clear()
                & $buttonCategoriesEdit_Click
                Set-EditDataCheck -Groupbox $groupboxCategories
                $TimerInput.Start()
            }
            else
            {
                $TimerInput.Start()
                $textboxCategoriesInput.BackColor = 'LightCoral'
            }
            $textboxCategoriesInput.Enabled = $true
            $textboxCategoriesInput.Focus()
        }
    }
	
    $timerInput_Tick = {
        $TimerInput.Stop()
        $textboxCategoriesInput.BackColor = 'Window'
        $textboxCategoriesInput.Clear()
        $textboxKindsInput.BackColor = 'Window'
        $textboxKindsInput.Clear()
        $textboxTypesInput.BackColor = 'Window'
        $textboxTypesInput.Clear()
        $textboxNamesInput.BackColor = 'Window'
        $textboxNamesInput.Clear()
        $textboxStoresInput.BackColor = 'Window'
        $textboxStoresInput.Clear()
        $textboxStoresAddressInput.BackColor = 'Window'
        $textboxStoresAddressInput.Clear()
        $textboxStoresInput.BackColor = 'Window'
        $textboxStoresInput.Clear()
        $textboxStoresAddressCityInput.BackColor = 'Window'
        $textboxStoresAddressCityInput.Clear()
    }
	
    $buttonCategoriesDelete_Click = {
        if ($comboboxCategories.SelectedItem -ne $null)
        {
            if ($comboboxKinds.SelectedItem -eq $null)
            {
                Invoke-DatabaseTable @GetDatabaseTableParams -Query "delete from Categories where CategoryName = N'$($comboboxCategories.SelectedItem)'"
                Set-Comboboxes -Item $comboboxCategories -Table Categories -Property CategoryName
            }
            else
            {
                $ExistingKinds = "$script:DeleteCategoryPart1 $($comboboxKinds.Items.Count) $script:DeleteCategoryPart2"
                foreach ($ExistingKind in $comboboxKinds.Items) 
                {
                    $ExistingKinds += "$ExistingKind`n" 
                }
                $ExistingKinds += $script:DeleteCategoryPart3
                [void][System.Windows.Forms.MessageBox]::Show($ExistingKinds, $script:CaptionError)
            }
            Set-Groupboxes
            Set-DataManagerEdit
        }
    }
	
    $buttonDataManagerClose_Click = {
        $script:DataManagerOpen = 0
        $script:EditIsEnabled = 0
        $TimerInput.Stop()
        $timeDataManagerConnectionState.Stop()
        $formDataManager.Close()
    }
	
    $buttonKindsInputAdd_Click = {
        $textboxKindsInput.Enabled = $false
        if ($buttonKindsInputAdd.Text -eq $script:ModeAddButton)
        {
            if ($comboboxKinds.Items -contains $textboxKindsInput.Text.Trim()) 
            {
                $comboboxKinds.SelectedItem = $textboxKindsInput.Text.Trim() 
            }
            if ($textboxKindsInput.Text.Trim() -ne $comboboxKinds.SelectedItem -and $textboxKindsInput.Text.Trim() -ne '' -and $comboboxCategories.SelectedItem -ne $null)
            {
                Invoke-DatabaseTable @GetDatabaseTableParams -Query "insert into Kinds(KindName,Category_Id)values(N'$($textboxKindsInput.Text.Trim())',(select Category_Id from Categories where CategoryName = N'$($comboboxCategories.SelectedItem)'))"
				
                $comboboxKinds.Items.Clear()
                Invoke-DatabaseTable @GetDatabaseTableParams -Query "select * from Kinds where Category_Id = (select Category_Id from Categories where CategoryName = N'$($comboboxCategories.SelectedItem)')" |
                Select-Object -ExpandProperty KindName |
                ForEach-Object	 -Process {
                    Load-ComboBox -ComboBox $comboboxKinds -Items $_ -Append
                }
                $comboboxKinds.SelectedItem = $($textboxKindsInput.Text.Trim())
                & $buttonKindsAdd_Click
                Set-DataManagerEdit
                $TimerInput.Start()
            }
            else
            {
                $TimerInput.Start()
                $textboxKindsInput.BackColor = 'LightCoral'
            }
            $textboxKindsInput.Enabled = $true
            $textboxKindsInput.Focus()
        }
        if ($buttonKindsInputAdd.Text -eq $script:ModeEditButton)
        {
            if ($comboboxKinds.Items -contains $textboxKindsInput.Text.Trim()) 
            {
                $comboboxKinds.SelectedItem = $textboxKindsInput.Text.Trim() 
            }
            if ($textboxKindsInput.Text.Trim() -ne $comboboxKinds.SelectedItem -and $textboxKindsInput.Text.Trim() -ne '')
            {
                Invoke-DatabaseTable @GetDatabaseTableParams -Query "update Kinds set KindName = N'$($textboxKindsInput.Text.Trim())' where KindName = N'$($comboboxKinds.SelectedItem)' and Category_Id = (select Category_Id from Categories where CategoryName = N'$($comboboxCategories.SelectedItem)')"
                $comboboxKinds.Items.Clear()
                Invoke-DatabaseTable @GetDatabaseTableParams -Query "select * from Kinds where Category_Id = (select Category_Id from Categories where CategoryName = N'$($comboboxCategories.SelectedItem)')" |
                Select-Object -ExpandProperty KindName |
                ForEach-Object	 -Process {
                    Load-ComboBox -ComboBox $comboboxKinds -Items $_ -Append
                }
                $comboboxKinds.SelectedItem = $($textboxKindsInput.Text.Trim())
                $textboxKindsInput.Clear()
                & $buttonKindsEdit_Click
                Set-EditDataCheck -Groupbox $groupboxKinds
                $TimerInput.Start()
            }
            else
            {
                $TimerInput.Start()
                $textboxKindsInput.BackColor = 'LightCoral'
            }
            $textboxKindsInput.Enabled = $true
            $textboxKindsInput.Focus()
        }
    }
	
    $textboxCategoriesInput_PreviewKeyDown = [System.Windows.Forms.PreviewKeyDownEventHandler]{
        if ($_.KeyCode -eq [System.Windows.Forms.Keys]::Enter)
        {
            &$buttonCategoriesInputAdd_Click
        }
    }
	
    $textboxKindsInput_PreviewKeyDown = [System.Windows.Forms.PreviewKeyDownEventHandler]{
        if ($_.KeyCode -eq [System.Windows.Forms.Keys]::Enter)
        {
            &$buttonKindsInputAdd_Click
        }
    }
	
    $buttonKindsDelete_Click = {
        if ($comboboxKinds.SelectedItem -ne $null)
        {
            if ($comboboxTypes.SelectedItem -eq $null)
            {
                Invoke-DatabaseTable @GetDatabaseTableParams -Query "delete from Kinds where KindName = N'$($comboboxKinds.SelectedItem)' and Category_Id = (select Category_Id from Categories where CategoryName = N'$($comboboxCategories.SelectedItem)')"
                Set-Comboboxes -Item $comboboxKinds -Table Kinds -Property KindName -Query "select * from Kinds where Category_Id = (select Category_Id from Categories where CategoryName = N'$($comboboxCategories.SelectedItem)')"
            }
            else
            {
                $ExistingTypes = "$script:DeleteKindPart1 $($comboboxTypes.Items.Count) $script:DeleteKindPart2"
                foreach ($ExistingType in $comboboxTypes.Items) 
                {
                    $ExistingTypes += "$ExistingType`n" 
                }
                $ExistingTypes += $script:DeleteKindPart3
                [void][System.Windows.Forms.MessageBox]::Show($ExistingTypes, $script:CaptionError)
            }
            Set-Groupboxes
            Set-DataManagerEdit
        }
    }
	
    $buttonTypesInputAdd_Click = {
        $textboxTypesInput.Enabled = $false
        if ($buttonTypesInputAdd.Text -eq $script:ModeAddButton)
        {
            if ($comboboxTypes.Items -contains $textboxTypesInput.Text.Trim()) 
            {
                $comboboxTypes.SelectedItem = $textboxTypesInput.Text.Trim() 
            }
            if ($textboxTypesInput.Text.Trim() -ne $comboboxTypes.SelectedItem -and $textboxTypesInput.Text.Trim() -ne '' -and $comboboxKinds.SelectedItem -ne $null)
            {
                Invoke-DatabaseTable @GetDatabaseTableParams -Query "insert into Types(TypeName,Kind_Id)values(N'$($textboxTypesInput.Text.Trim())',(select Kind_Id from Kinds where KindName = N'$($comboboxKinds.SelectedItem)' and Category_Id = (select Category_Id from Categories where CategoryName = N'$($comboboxCategories.SelectedItem)' )))"
				
                $comboboxTypes.Items.Clear()
                Invoke-DatabaseTable @GetDatabaseTableParams -Query "select * from Types where Kind_Id = (select Kind_Id from Kinds where KindName = N'$($comboboxKinds.SelectedItem)' and Category_Id = (select Category_Id from Categories where CategoryName = N'$($comboboxCategories.SelectedItem)'))" |
                Select-Object -ExpandProperty TypeName |
                ForEach-Object	 -Process {
                    Load-ComboBox -ComboBox $comboboxTypes -Items $_ -Append
                }
                $comboboxTypes.SelectedItem = $($textboxTypesInput.Text.Trim())
                & $buttonTypesAdd_Click
                Set-DataManagerEdit
                $TimerInput.Start()
            }
            else
            {
                $TimerInput.Start()
                $textboxTypesInput.BackColor = 'LightCoral'
            }
            $textboxTypesInput.Enabled = $true
            $textboxTypesInput.Focus()
        }
        if ($buttonTypesInputAdd.Text -eq $script:ModeEditButton)
        {
            if ($comboboxTypes.Items -contains $textboxTypesInput.Text.Trim()) 
            {
                $comboboxTypes.SelectedItem = $textboxTypesInput.Text.Trim() 
            }
            if ($textboxTypesInput.Text.Trim() -ne $comboboxTypes.SelectedItem -and $textboxTypesInput.Text.Trim() -ne '')
            {
                Invoke-DatabaseTable @GetDatabaseTableParams -Query "update Types set TypeName = N'$($textboxTypesInput.Text.Trim())' where TypeName = N'$($comboboxTypes.SelectedItem)' and Kind_Id = (select Kind_Id from Kinds where KindName = N'$($comboboxKinds.SelectedItem)' and Category_Id = (select Category_Id from Categories where CategoryName = N'$($comboboxCategories.SelectedItem)'))"
                $comboboxTypes.Items.Clear()
                Invoke-DatabaseTable @GetDatabaseTableParams -Query "select * from Types where Kind_Id = (select Kind_Id from Kinds where KindName = N'$($comboboxKinds.SelectedItem)' and Category_Id = (select Category_Id from Categories where CategoryName = N'$($comboboxCategories.SelectedItem)'))" |
                Select-Object -ExpandProperty TypeName |
                ForEach-Object	 -Process {
                    Load-ComboBox -ComboBox $comboboxTypes -Items $_ -Append
                }
                $comboboxTypes.SelectedItem = $($textboxTypesInput.Text.Trim())
                $textboxTypesInput.Clear()
                & $buttonTypesEdit_Click
                Set-EditDataCheck -Groupbox $groupboxTypes
                $TimerInput.Start()
            }
            else
            {
                $TimerInput.Start()
                $textboxTypesInput.BackColor = 'LightCoral'
            }
            $textboxTypesInput.Enabled = $true
            $textboxTypesInput.Focus()
        }
    }
	
    $textboxTypesInput_PreviewKeyDown = [System.Windows.Forms.PreviewKeyDownEventHandler]{
        if ($_.KeyCode -eq [System.Windows.Forms.Keys]::Enter)
        {
            &$buttonTypesInputAdd_Click
        }
    }
	
    $buttonTypesDelete_Click = {
        if ($comboboxTypes.SelectedItem -ne $null)
        {
            if ($comboboxNames.SelectedItem -eq $null)
            {
                Invoke-DatabaseTable @GetDatabaseTableParams -Query "delete from Types where TypeName = N'$($comboboxTypes.SelectedItem)' and Kind_Id = (select Kind_Id from Kinds where KindName = N'$($comboboxKinds.SelectedItem)' and Category_Id = (select Category_Id from Categories where CategoryName = N'$($comboboxCategories.SelectedItem)'))"
                Set-Comboboxes -Item $comboboxTypes -Table Types -Property TypeName -Query "select * from Types where Kind_Id = (select Kind_Id from Kinds where KindName = N'$($comboboxKinds.SelectedItem)' and Category_Id = (select Category_Id from Categories where CategoryName = N'$($comboboxCategories.SelectedItem)'))"
            }
            else
            {
                $ExistingNames = "$script:DeleteTypePart1 $($comboboxNames.Items.Count) $script:DeleteTypePart2"
                foreach ($ExistingName in $comboboxNames.Items) 
                {
                    $ExistingNames += "$ExistingName`n" 
                }
                $ExistingNames += $script:DeleteTypePart3
                [void][System.Windows.Forms.MessageBox]::Show($ExistingNames, $script:CaptionError)
            }
            Set-Groupboxes
            Set-DataManagerEdit
        }
    }
	
    $buttonNamesDelete_Click = {
        if ($comboboxNames.SelectedItem -ne $null)
        {
            $Purchases = Invoke-DatabaseTable @GetDatabaseTableParams -Query "select Purchase_Id from Purchases where Name_Id = (select Name_Id from Names where Name = N'$($comboboxNames.SelectedItem)' and Type_Id = (select Type_Id from Types where TypeName = N'$($comboboxTypes.SelectedItem)' and Kind_Id = (select Kind_Id from Kinds where KindName = N'$($comboboxKinds.SelectedItem)' and Category_Id = (select Category_Id from Categories where CategoryName = N'$($comboboxCategories.SelectedItem)'))))" |
            Select-Object -ExpandProperty Purchase_Id
            if ($Purchases.Count -eq 0)
            {
                Invoke-DatabaseTable @GetDatabaseTableParams -Query "delete from Names where Name = N'$($comboboxNames.SelectedItem)' and Type_Id = (select Type_Id from Types where TypeName = N'$($comboboxTypes.SelectedItem)' and Kind_Id = (select Kind_Id from Kinds where KindName = N'$($comboboxKinds.SelectedItem)' and Category_Id = (select Category_Id from Categories where CategoryName = N'$($comboboxCategories.SelectedItem)')))"
                Set-Comboboxes -Item $comboboxNames -Table Names -Property Name -Query "select * from Names where Type_Id = (select Type_Id from Types where TypeName = N'$($comboboxTypes.SelectedItem)' and Kind_Id = (select Kind_Id from Kinds where KindName = N'$($comboboxKinds.SelectedItem)' and Category_Id = (select Category_Id from Categories where CategoryName = N'$($comboboxCategories.SelectedItem)')))"
            }
            else
            {
                $ExistingPurchases = "$script:DeleteNamePart1 $($Purchases.Count) $script:DeleteNamePart2 $($Purchases -join ', ') $script:DeleteNamePart3"
                [void][System.Windows.Forms.MessageBox]::Show($ExistingPurchases, $script:CaptionError)
            }
            Set-Groupboxes
            Set-DataManagerEdit
        }
    }
	
	
    $textboxNamesInput_PreviewKeyDown = [System.Windows.Forms.PreviewKeyDownEventHandler]{
        if ($_.KeyCode -eq [System.Windows.Forms.Keys]::Enter)
        {
            &$buttonNamesInputAdd_Click
        }
    }
	
    $buttonNamesInputAdd_Click = {
        $textboxNamesInput.Enabled = $false
        if ($buttonNamesInputAdd.Text -eq $script:ModeAddButton)
        {
            if ($comboboxNames.Items -contains $textboxNamesInput.Text.Trim()) 
            {
                $comboboxNames.SelectedItem = $textboxNamesInput.Text.Trim() 
            }
            if ($textboxNamesInput.Text.Trim() -ne $comboboxNames.SelectedItem -and $textboxNamesInput.Text.Trim() -ne '' -and $comboboxTypes.SelectedItem -ne $null)
            {
                Invoke-DatabaseTable @GetDatabaseTableParams -Query "insert into Names(Name,Type_Id)values(N'$($textboxNamesInput.Text.Trim())',(select Type_Id from Types where TypeName = N'$($comboboxTypes.SelectedItem)' and Kind_Id = (select Kind_Id from Kinds where KindName = N'$($comboboxKinds.SelectedItem)' and Category_Id = (select Category_Id from Categories where CategoryName = N'$($comboboxCategories.SelectedItem)'))))"
                $comboboxNames.Items.Clear()
                Invoke-DatabaseTable @GetDatabaseTableParams -Query "select * from Names where Type_Id = (select Type_Id from Types where TypeName = N'$($comboboxTypes.SelectedItem)' and Kind_Id = (select Kind_Id from Kinds where KindName = N'$($comboboxKinds.SelectedItem)' and Category_Id = (select Category_Id from Categories where CategoryName = N'$($comboboxCategories.SelectedItem)')))" |
                Select-Object -ExpandProperty Name |
                ForEach-Object	 -Process {
                    Load-ComboBox -ComboBox $comboboxNames -Items $_ -Append
                }
                $comboboxNames.SelectedItem = $($textboxNamesInput.Text.Trim())
                & $buttonNamesAdd_Click
                Set-DataManagerEdit
                $TimerInput.Start()
            }
            else
            {
                $TimerInput.Start()
                $textboxNamesInput.BackColor = 'LightCoral'
            }
            $textboxNamesInput.Enabled = $true
            $textboxNamesInput.Focus()
        }
        if ($buttonNamesInputAdd.Text -eq $script:ModeEditButton)
        {
            if ($comboboxNames.Items -contains $textboxNamesInput.Text.Trim()) 
            {
                $comboboxNames.SelectedItem = $textboxNamesInput.Text.Trim() 
            }
            if ($textboxNamesInput.Text.Trim() -ne $comboboxNames.SelectedItem -and $textboxNamesInput.Text.Trim() -ne '')
            {
                Invoke-DatabaseTable @GetDatabaseTableParams -Query "update Names set Name = N'$($textboxNamesInput.Text.Trim())' where Name = N'$($comboboxNames.SelectedItem)' and Type_Id = (select Type_Id from Types where TypeName = N'$($comboboxTypes.SelectedItem)' and Kind_Id = (select Kind_Id from Kinds where KindName = N'$($comboboxKinds.SelectedItem)' and Category_Id = (select Category_Id from Categories where CategoryName = N'$($comboboxCategories.SelectedItem)')))"
                $comboboxNames.Items.Clear()
                Invoke-DatabaseTable @GetDatabaseTableParams -Query "select * from Names where Type_Id = (select Type_Id from Types where TypeName = N'$($comboboxTypes.SelectedItem)' and Kind_Id = (select Kind_Id from Kinds where KindName = N'$($comboboxKinds.SelectedItem)' and Category_Id = (select Category_Id from Categories where CategoryName = N'$($comboboxCategories.SelectedItem)')))" |
                Select-Object -ExpandProperty Name |
                ForEach-Object	 -Process {
                    Load-ComboBox -ComboBox $comboboxNames -Items $_ -Append
                }
                $comboboxNames.SelectedItem = $($textboxNamesInput.Text.Trim())
                $textboxNamesInput.Clear()
                & $buttonNamesEdit_Click
                Set-EditDataCheck -Groupbox $groupboxNames
                $TimerInput.Start()
            }
            else
            {
                $TimerInput.Start()
                $textboxNamesInput.BackColor = 'LightCoral'
            }
            $textboxNamesInput.Enabled = $true
            $textboxNamesInput.Focus()
        }
    }
    $buttonStoresDelete_Click = {
        if ($comboboxStores.SelectedItem -ne $null)
        {
            $Purchases = Invoke-DatabaseTable @GetDatabaseTableParams -Query "select Purchase_Id from Purchases where Store_Id = (select Store_Id from Stores where Name = N'$((($comboboxStores.SelectedItem) -replace '[(].*').Trim())')' and Address = N'$(((($comboboxStores.SelectedItem) -replace '.*[(]') -replace '[)].*').Trim())' and City = N'$(($comboboxStores.SelectedItem)-replace '.*\w+[()]+\s')')" |
            Select-Object -ExpandProperty Purchase_Id
            if ($Purchases.Count -eq 0)
            {
                Invoke-DatabaseTable @GetDatabaseTableParams -Query "delete from Stores where Name = N'$((($comboboxStores.SelectedItem) -replace '[(].*').Trim())')' and Address = N'$(((($comboboxStores.SelectedItem) -replace '.*[(]') -replace '[)].*').Trim())' and City = N'$(($comboboxStores.SelectedItem)-replace '.*\w+[()]+\s')'"
                Set-Comboboxes -Item $comboboxStores -Table Stores -Property Stores -Query "select Name + ' (' + Address + ') ' + City AS Stores from Stores"
                Set-DataManagerEdit
            }
            else
            {
                $ExistingPurchases = "$script:DeleteStorePart1 $($Purchases.Count) $script:DeleteStorePart2 $($Purchases -join ', ') $script:DeleteStorePart3"
                [void][System.Windows.Forms.MessageBox]::Show($ExistingPurchases, $script:CaptionError)
            }
        }
    }
	
    $buttonStoresInputAdd_Click = {
        $textboxStoresAddressCityInput.Enabled = $false
        $textboxStoresAddressInput.Enabled = $false
        $textboxStoresInput.Enabled = $false
        if ($buttonStoresInputAdd.Text -eq $script:ModeAddButton)
        {
            if ($textboxStoresInput.Text.Trim() -ne '' -and $textboxStoresAddressInput.Text.Trim() -ne '' -and $textboxStoresAddressCityInput.Text.Trim() -ne '' -and $comboboxStores.SelectedItem -ne "$($textboxStoresInput.Text.Trim()) ($($textboxStoresAddressInput.Text.Trim())) $($textboxStoresAddressCityInput.Text.Trim())")
            {
                Invoke-DatabaseTable @GetDatabaseTableParams -Query "insert into Stores(Name,Address,City)values(N'$($textboxStoresInput.Text.Trim())',N'$($textboxStoresAddressInput.Text.Trim())',N'$($textboxStoresAddressCityInput.Text.Trim())')"
                Set-Comboboxes -Item $comboboxStores -Table Stores -Property Stores -Query "select Name + ' (' + Address + ') ' + City AS Stores from Stores"
                $comboboxStores.SelectedItem = $comboboxStores.Items |
                Where-Object -FilterScript {
                    $_ -match $textboxStoresInput.Text.Trim() -and $_ -match $textboxStoresAddressInput.Text.Trim() -and $_ -match $textboxStoresAddressCityInput.Text.Trim() 
                } |
                Select-Object -First 1
                & $buttonStoresAdd_Click
                Set-DataManagerEdit
                $TimerInput.Start()
            }
            else
            {
                if ($textboxStoresInput.Text.Trim() -eq '' -or $comboboxStores.SelectedItem -eq "$($textboxStoresInput.Text.Trim()) ($($textboxStoresAddressInput.Text.Trim())) $($textboxStoresAddressCityInput.Text.Trim())")
                {
                    $TimerInput.Start()
                    $textboxStoresInput.BackColor = 'LightCoral'
                }
                if ($textboxStoresAddressInput.Text.Trim() -eq '' -or $comboboxStores.SelectedItem -eq "$($textboxStoresInput.Text.Trim()) ($($textboxStoresAddressInput.Text.Trim())) $($textboxStoresAddressCityInput.Text.Trim())")
                {
                    $TimerInput.Start()
                    $textboxStoresAddressInput.BackColor = 'LightCoral'
                }
                if ($textboxStoresAddressCityInput.Text.Trim() -eq '' -or $comboboxStores.SelectedItem -eq "$($textboxStoresInput.Text.Trim()) ($($textboxStoresAddressInput.Text.Trim())) $($textboxStoresAddressCityInput.Text.Trim())")
                {
                    $TimerInput.Start()
                    $textboxStoresAddressCityInput.BackColor = 'LightCoral'
                }
            }
            $textboxStoresAddressCityInput.Enabled = $true
            $textboxStoresAddressInput.Enabled = $true
            $textboxStoresInput.Enabled = $true
            $textboxStoresInput.Focus()
        }
        if ($buttonStoresInputAdd.Text -eq $script:ModeEditButton)
        {
            if ($comboboxStores.Items -contains $textboxStoresInput.Text.Trim()) 
            {
                $comboboxStores.SelectedItem = $textboxStoresInput.Text.Trim() 
            }
            if ($textboxStoresInput.Text.Trim() -ne $comboboxStores.SelectedItem -and $textboxStoresInput.Text.Trim() -ne '')
            {
                $StorePreChangedName = ($($comboboxStores.SelectedItem) -replace ' [(].*')
                $StorePreChangedAddress = (($($comboboxStores.SelectedItem) -replace '.*[(]') -replace '[)].*')
                $StorePreChangedCity = ($($comboboxStores.SelectedItem) -replace '.*[)] ')
                $StorePostChangedFQDN = "$($textboxStoresInput.Text.Trim()) ($($textboxStoresAddressInput.Text.Trim())) $($textboxStoresAddressCityInput.Text.Trim())"
                Invoke-DatabaseTable @GetDatabaseTableParams -Query "update Stores set Name = N'$($textboxStoresInput.Text.Trim())', Address = N'$($textboxStoresAddressInput.Text.Trim())', City = N'$($textboxStoresAddressCityInput.Text.Trim())' where Name = N'$StorePreChangedName' and Address = N'$StorePreChangedAddress' and City = N'$StorePreChangedCity'"
                $comboboxStores.Items.Clear()
                Invoke-DatabaseTable @GetDatabaseTableParams -Query "select Name + ' (' + Address + ') ' + City AS Stores from Stores" |
                Select-Object -ExpandProperty Stores |
                ForEach-Object	 -Process {
                    Load-ComboBox -ComboBox $comboboxStores -Items $_ -Append
                }
                $comboboxStores.SelectedItem = $StorePostChangedFQDN
                $textboxStoresInput.Clear()
                & $buttonStoresEdit_Click
                Set-DataManagerEdit
                $TimerInput.Start()
            }
            else
            {
                $TimerInput.Start()
                $textboxStoresInput.BackColor = 'LightCoral'
            }
            $textboxStoresAddressCityInput.Enabled = $true
            $textboxStoresAddressInput.Enabled = $true
            $textboxStoresInput.Enabled = $true
            $textboxStoresInput.Focus()
        }
    }
	
    $buttonStoresAdd_Click = {
        Set-AddEditGroupbox -Groupbox $groupboxStoresInput -Add $buttonStoresAdd -Delete $buttonStoresDelete -Edit $buttonStoresEdit -ActionButton $buttonStoresInputAdd -Mode 'Add' -Textbox $textboxStoresInput -Textbox1 $textboxStoresAddressInput -Textbox2 $textboxStoresAddressCityInput -Combobox $comboboxStores
    }
	
    $textboxStoresInput_TextChanged = {
        if ($script:EditIsEnabled -eq 0)
        {
            if ($textboxStoresInput.Text.Trim() -ne '')
            {
                $comboboxStores.SelectedItem = $comboboxStores.Items |
                Where-Object -FilterScript {
                    $_ -match $textboxStoresInput.Text.Trim() 
                } |
                Select-Object -First 1
            }
        }
    }
	
    $textboxCategoriesInput_TextChanged = {
        if ($script:EditIsEnabled -eq 0)
        {
            if ($textboxCategoriesInput.Text.Trim() -ne '')
            {
                $comboboxCategories.SelectedItem = $comboboxCategories.Items |
                Where-Object -FilterScript {
                    $_ -match $textboxCategoriesInput.Text.Trim() 
                } |
                Select-Object -First 1
            }
        }
    }
	
    $textboxKindsInput_TextChanged = {
        if ($script:EditIsEnabled -eq 0)
        {
            if ($textboxKindsInput.Text.Trim() -ne '')
            {
                $comboboxKinds.SelectedItem = $comboboxKinds.Items |
                Where-Object -FilterScript {
                    $_ -match $textboxKindsInput.Text.Trim() 
                } |
                Select-Object -First 1
            }
        }
    }
	
    $textboxTypesInput_TextChanged = {
        if ($script:EditIsEnabled -eq 0)
        {
            if ($textboxTypesInput.Text.Trim() -ne '')
            {
                $comboboxTypes.SelectedItem = $comboboxTypes.Items |
                Where-Object -FilterScript {
                    $_ -match $textboxTypesInput.Text.Trim() 
                } |
                Select-Object -First 1
            }
        }
    }
	
    $textboxNamesInput_TextChanged = {
        if ($script:EditIsEnabled -eq 0)
        {
            if ($textboxNamesInput.Text.Trim() -ne '')
            {
                $comboboxNames.SelectedItem = $comboboxNames.Items |
                Where-Object -FilterScript {
                    $_ -match $textboxNamesInput.Text.Trim() 
                } |
                Select-Object -First 1
            }
        }
    }
	
    $textboxStoresAddressInput_TextChanged = {
        if ($script:EditIsEnabled -eq 0)
        {
            if ($textboxStoresInput.Text.Trim() -ne '')
            {
                $comboboxStores.SelectedItem = $comboboxStores.Items |
                Where-Object -FilterScript {
                    $_ -match $textboxStoresInput.Text.Trim() -and $_ -match $textboxStoresAddressInput.Text.Trim() 
                } |
                Select-Object -First 1
            }
        }
    }
	
    $textboxStoresAddressCityInput_TextChanged = {
        if ($script:EditIsEnabled -eq 0)
        {
            if ($textboxStoresInput.Text.Trim() -ne '')
            {
                $comboboxStores.SelectedItem = $comboboxStores.Items |
                Where-Object -FilterScript {
                    $_ -match $textboxStoresInput.Text.Trim() -and $_ -match $textboxStoresAddressInput.Text.Trim() -and $_ -match $textboxStoresAddressCityInput.Text.Trim() 
                } |
                Select-Object -First 1
            }
        }
    }
	
    $timeDataManagerConnectionState_Tick = {
        if ($script:ConnectionState -eq 0)
        {
            $timeDataManagerConnectionState.Stop()
            $formDataManager.Close()
        }
    }
	
    $textboxStoresInputPreviewKeyDown = [System.Windows.Forms.PreviewKeyDownEventHandler]{
        if ($_.KeyCode -eq [System.Windows.Forms.Keys]::Enter)
        {
            &$buttonStoresInputAdd_Click
        }
    }
	
    $buttonCategoriesEdit_Click = {
        Set-AddEditGroupbox -Groupbox $groupboxCategoriesInput -Add $buttonCategoriesAdd -Delete $buttonCategoriesDelete -Edit $buttonCategoriesEdit -Textbox $textboxCategoriesInput -ActionButton $buttonCategoriesInputAdd -Mode 'Edit' -Combobox $comboboxCategories
        Set-EditDataCheck -Groupbox $groupboxCategories
    }
	
    $buttonStoresEdit_Click = {
        Set-AddEditGroupbox -Groupbox $groupboxStoresInput -Add $buttonStoresAdd -Delete $buttonStoresDelete -Edit $buttonStoresEdit -ActionButton $buttonStoresInputAdd -Mode 'Edit' -Textbox $textboxStoresInput -Textbox1 $textboxStoresAddressInput -Textbox2 $textboxStoresAddressCityInput -Combobox $comboboxStores
        Set-EditDataCheck -Groupbox $groupboxStores
    }
	
    $buttonKindsEdit_Click = {
        Set-AddEditGroupbox -Groupbox $groupboxKindsInput -Add $buttonKindsAdd -Delete $buttonKindsDelete -Edit $buttonKindsEdit -Textbox $textboxKindsInput -ActionButton $buttonKindsInputAdd -Mode 'Edit' -Combobox $comboboxKinds
        Set-EditDataCheck -Groupbox $groupboxKinds
    }
	
    $buttonTypesEdit_Click = {
        Set-AddEditGroupbox -Groupbox $groupboxTypesInput -Add $buttonTypesAdd -Delete $buttonTypesDelete -Edit $buttonTypesEdit -Textbox $textboxTypesInput -ActionButton $buttonTypesInputAdd -Mode 'Edit' -Combobox $comboboxTypes
        Set-EditDataCheck -Groupbox $groupboxTypes
    }
	
    $buttonNamesEdit_Click = {
        Set-AddEditGroupbox -Groupbox $groupboxNamesInput -Add $buttonNamesAdd -Delete $buttonNamesDelete -Edit $buttonNamesEdit -Textbox $textboxNamesInput -ActionButton $buttonNamesInputAdd -Mode 'Edit' -Combobox $comboboxNames
        Set-EditDataCheck -Groupbox $groupboxNames
    }
	
    $comboboxNames_SelectedIndexChanged = {
        if ($script:EditIsEnabled -eq 1)
        {
            Set-EditDataCheck -Groupbox $groupboxNames
        }
        #Set-DataManagerEdit
    }
    # --End User Generated Script--
    #----------------------------------------------
    #region Generated Events
    #----------------------------------------------
	
    $Form_StateCorrection_Load = 
    {
        #Correct the initial state of the form to prevent the .Net maximized form issue
        $formDataManager.WindowState = $InitialFormWindowState
    }
	
    $Form_StoreValues_Closing = 
    {
        #Store the control values
        $script:DataManagerForm_textboxStoresAddressCityInput = $textboxStoresAddressCityInput.Text
        $script:DataManagerForm_textboxStoresAddressInput = $textboxStoresAddressInput.Text
        $script:DataManagerForm_textboxStoresInput = $textboxStoresInput.Text
        $script:DataManagerForm_comboboxStores_SelectedItem = $comboboxStores.SelectedItems
        $script:DataManagerForm_textboxNamesInput = $textboxNamesInput.Text
        $script:DataManagerForm_comboboxNames_SelectedItem = $comboboxNames.SelectedItems
        $script:DataManagerForm_textboxTypesInput = $textboxTypesInput.Text
        $script:DataManagerForm_comboboxTypes_SelectedItem = $comboboxTypes.SelectedItems
        $script:DataManagerForm_textboxKindsInput = $textboxKindsInput.Text
        $script:DataManagerForm_comboboxKinds_SelectedItem = $comboboxKinds.SelectedItems
        $script:DataManagerForm_textboxCategoriesInput = $textboxCategoriesInput.Text
        $script:DataManagerForm_comboboxCategories_SelectedItem = $comboboxCategories.SelectedItems
    }

	
    $Form_Cleanup_FormClosed = 
    {
        #Remove all event handlers from the controls
        try
        {
            $buttonStoresEdit.remove_Click($buttonStoresEdit_Click)
            $buttonStoresDelete.remove_Click($buttonStoresDelete_Click)
            $buttonStoresAdd.remove_Click($buttonStoresAdd_Click)
            $textboxStoresAddressCityInput.remove_TextChanged($textboxStoresAddressCityInput_TextChanged)
            $textboxStoresAddressCityInput.remove_PreviewKeyDown($textboxStoresInputPreviewKeyDown)
            $textboxStoresAddressInput.remove_TextChanged($textboxStoresAddressInput_TextChanged)
            $textboxStoresAddressInput.remove_PreviewKeyDown($textboxStoresInputPreviewKeyDown)
            $buttonStoresInputAdd.remove_Click($buttonStoresInputAdd_Click)
            $textboxStoresInput.remove_TextChanged($textboxStoresInput_TextChanged)
            $textboxStoresInput.remove_PreviewKeyDown($textboxStoresInputPreviewKeyDown)
            $buttonDataManagerClose.remove_Click($buttonDataManagerClose_Click)
            $buttonNamesEdit.remove_Click($buttonNamesEdit_Click)
            $buttonNamesDelete.remove_Click($buttonNamesDelete_Click)
            $buttonNamesAdd.remove_Click($buttonNamesAdd_Click)
            $buttonNamesInputAdd.remove_Click($buttonNamesInputAdd_Click)
            $textboxNamesInput.remove_TextChanged($textboxNamesInput_TextChanged)
            $textboxNamesInput.remove_PreviewKeyDown($textboxNamesInput_PreviewKeyDown)
            $comboboxNames.remove_SelectedIndexChanged($comboboxNames_SelectedIndexChanged)
            $buttonTypesEdit.remove_Click($buttonTypesEdit_Click)
            $buttonTypesDelete.remove_Click($buttonTypesDelete_Click)
            $buttonTypesAdd.remove_Click($buttonTypesAdd_Click)
            $buttonTypesInputAdd.remove_Click($buttonTypesInputAdd_Click)
            $textboxTypesInput.remove_TextChanged($textboxTypesInput_TextChanged)
            $textboxTypesInput.remove_PreviewKeyDown($textboxTypesInput_PreviewKeyDown)
            $comboboxTypes.remove_SelectedIndexChanged($comboboxTypes_SelectedIndexChanged)
            $buttonKindsEdit.remove_Click($buttonKindsEdit_Click)
            $buttonKindsDelete.remove_Click($buttonKindsDelete_Click)
            $buttonKindsAdd.remove_Click($buttonKindsAdd_Click)
            $buttonKindsInputAdd.remove_Click($buttonKindsInputAdd_Click)
            $textboxKindsInput.remove_TextChanged($textboxKindsInput_TextChanged)
            $textboxKindsInput.remove_PreviewKeyDown($textboxKindsInput_PreviewKeyDown)
            $comboboxKinds.remove_SelectedIndexChanged($comboboxKinds_SelectedIndexChanged)
            $buttonCategoriesEdit.remove_Click($buttonCategoriesEdit_Click)
            $buttonCategoriesDelete.remove_Click($buttonCategoriesDelete_Click)
            $buttonCategoriesAdd.remove_Click($buttonCategoriesAdd_Click)
            $buttonCategoriesInputAdd.remove_Click($buttonCategoriesInputAdd_Click)
            $textboxCategoriesInput.remove_TextChanged($textboxCategoriesInput_TextChanged)
            $textboxCategoriesInput.remove_PreviewKeyDown($textboxCategoriesInput_PreviewKeyDown)
            $comboboxCategories.remove_SelectedIndexChanged($comboboxCategories_SelectedIndexChanged)
            $formDataManager.remove_Load($OnLoadFormEvent)
            $TimerInput.remove_Tick($timerInput_Tick)
            $timeDataManagerConnectionState.remove_Tick($timeDataManagerConnectionState_Tick)
            $formDataManager.remove_Load($Form_StateCorrection_Load)
            $formDataManager.remove_Closing($Form_StoreValues_Closing)
            $formDataManager.remove_FormClosed($Form_Cleanup_FormClosed)
        }
        catch [Exception]
        {
 
        }
    }
    #endregion Generated Events

    #----------------------------------------------
    #region Generated Form Code
    #----------------------------------------------
    $formDataManager.SuspendLayout()
    $groupboxStores.SuspendLayout()
    $groupboxStoresInput.SuspendLayout()
    $groupboxNames.SuspendLayout()
    $groupboxNamesInput.SuspendLayout()
    $groupboxTypes.SuspendLayout()
    $groupboxTypesInput.SuspendLayout()
    $groupboxKinds.SuspendLayout()
    $groupboxKindsInput.SuspendLayout()
    $groupboxCategories.SuspendLayout()
    $groupboxCategoriesInput.SuspendLayout()
    #
    # formDataManager
    #
    $formDataManager.Controls.Add($groupboxStores)
    $formDataManager.Controls.Add($buttonDataManagerClose)
    $formDataManager.Controls.Add($groupboxNames)
    $formDataManager.Controls.Add($groupboxTypes)
    $formDataManager.Controls.Add($groupboxKinds)
    $formDataManager.Controls.Add($groupboxCategories)
    $formDataManager.CancelButton = $buttonDataManagerClose
    $formDataManager.ClientSize = '504, 422'
    $formDataManager.ControlBox = $false
    $formDataManager.FormBorderStyle = 'FixedDialog'
    $formDataManager.MaximizeBox = $false
    $formDataManager.MinimizeBox = $false
    $formDataManager.Name = 'formDataManager'
    $formDataManager.StartPosition = 'CenterScreen'
    $formDataManager.Text = 'Data Manager'
    $formDataManager.add_Load($OnLoadFormEvent)
    #
    # groupboxStores
    #
    $groupboxStores.Controls.Add($buttonStoresEdit)
    $groupboxStores.Controls.Add($buttonStoresDelete)
    $groupboxStores.Controls.Add($buttonStoresAdd)
    $groupboxStores.Controls.Add($groupboxStoresInput)
    $groupboxStores.Controls.Add($comboboxStores)
    $groupboxStores.Location = '12, 12'
    $groupboxStores.Name = 'groupboxStores'
    $groupboxStores.Size = '480, 146'
    $groupboxStores.TabIndex = 5
    $groupboxStores.TabStop = $false
    $groupboxStores.Text = 'Stores'
    #
    # buttonStoresEdit
    #
    $buttonStoresEdit.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
    $buttonStoresEdit.Location = '448, 17'
    $buttonStoresEdit.Name = 'buttonStoresEdit'
    $buttonStoresEdit.Size = '21, 21'
    $buttonStoresEdit.TabIndex = 3
    $buttonStoresEdit.Text = 'E'
    $buttonStoresEdit.UseVisualStyleBackColor = $false
    $buttonStoresEdit.add_Click($buttonStoresEdit_Click)
    #
    # buttonStoresDelete
    #
    $buttonStoresDelete.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
    $buttonStoresDelete.Location = '427, 17'
    $buttonStoresDelete.Name = 'buttonStoresDelete'
    $buttonStoresDelete.Size = '21, 21'
    $buttonStoresDelete.TabIndex = 2
    $buttonStoresDelete.Text = '-'
    $buttonStoresDelete.UseVisualStyleBackColor = $false
    $buttonStoresDelete.add_Click($buttonStoresDelete_Click)
    #
    # buttonStoresAdd
    #
    $buttonStoresAdd.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
    $buttonStoresAdd.Location = '406, 17'
    $buttonStoresAdd.Name = 'buttonStoresAdd'
    $buttonStoresAdd.Size = '21, 21'
    $buttonStoresAdd.TabIndex = 1
    $buttonStoresAdd.Text = '+'
    $buttonStoresAdd.UseVisualStyleBackColor = $false
    $buttonStoresAdd.add_Click($buttonStoresAdd_Click)
    #
    # groupboxStoresInput
    #
    $groupboxStoresInput.Controls.Add($labelStoreCityInput)
    $groupboxStoresInput.Controls.Add($textboxStoresAddressCityInput)
    $groupboxStoresInput.Controls.Add($labelStoreAddress)
    $groupboxStoresInput.Controls.Add($labelStoreName)
    $groupboxStoresInput.Controls.Add($textboxStoresAddressInput)
    $groupboxStoresInput.Controls.Add($buttonStoresInputAdd)
    $groupboxStoresInput.Controls.Add($textboxStoresInput)
    $groupboxStoresInput.Font = 'Microsoft Sans Serif, 0.25pt'
    $groupboxStoresInput.Location = '6, 44'
    $groupboxStoresInput.Name = 'groupboxStoresInput'
    $groupboxStoresInput.Size = '469, 98'
    $groupboxStoresInput.TabIndex = 3
    $groupboxStoresInput.TabStop = $false
    $groupboxStoresInput.Visible = $false
    #
    # labelStoreCityInput
    #
    $labelStoreCityInput.Font = 'Microsoft Sans Serif, 8.25pt'
    $labelStoreCityInput.Location = '6, 50'
    $labelStoreCityInput.Name = 'labelStoreCityInput'
    $labelStoreCityInput.Size = '160, 20'
    $labelStoreCityInput.TabIndex = 6
    $labelStoreCityInput.Text = 'Store Address City'
    $labelStoreCityInput.TextAlign = 'MiddleCenter'
    #
    # textboxStoresAddressCityInput
    #
    $textboxStoresAddressCityInput.Font = 'Microsoft Sans Serif, 8.25pt'
    $textboxStoresAddressCityInput.Location = '6, 73'
    $textboxStoresAddressCityInput.MaxLength = 25
    $textboxStoresAddressCityInput.Name = 'textboxStoresAddressCityInput'
    $textboxStoresAddressCityInput.Size = '160, 20'
    $textboxStoresAddressCityInput.TabIndex = 2
    $textboxStoresAddressCityInput.TextAlign = 'Center'
    $textboxStoresAddressCityInput.add_TextChanged($textboxStoresAddressCityInput_TextChanged)
    $textboxStoresAddressCityInput.add_PreviewKeyDown($textboxStoresInputPreviewKeyDown)
    #
    # labelStoreAddress
    #
    $labelStoreAddress.Font = 'Microsoft Sans Serif, 8.25pt'
    $labelStoreAddress.Location = '172, 4'
    $labelStoreAddress.Name = 'labelStoreAddress'
    $labelStoreAddress.Size = '291, 20'
    $labelStoreAddress.TabIndex = 4
    $labelStoreAddress.Text = 'Store Address'
    $labelStoreAddress.TextAlign = 'MiddleCenter'
    #
    # labelStoreName
    #
    $labelStoreName.Font = 'Microsoft Sans Serif, 8.25pt'
    $labelStoreName.Location = '6, 4'
    $labelStoreName.Name = 'labelStoreName'
    $labelStoreName.Size = '160, 20'
    $labelStoreName.TabIndex = 3
    $labelStoreName.Text = 'Store Name'
    $labelStoreName.TextAlign = 'MiddleCenter'
    #
    # textboxStoresAddressInput
    #
    $textboxStoresAddressInput.Font = 'Microsoft Sans Serif, 8.25pt'
    $textboxStoresAddressInput.Location = '172, 27'
    $textboxStoresAddressInput.MaxLength = 100
    $textboxStoresAddressInput.Name = 'textboxStoresAddressInput'
    $textboxStoresAddressInput.Size = '291, 20'
    $textboxStoresAddressInput.TabIndex = 1
    $textboxStoresAddressInput.TextAlign = 'Center'
    $textboxStoresAddressInput.add_TextChanged($textboxStoresAddressInput_TextChanged)
    $textboxStoresAddressInput.add_PreviewKeyDown($textboxStoresInputPreviewKeyDown)
    #
    # buttonStoresInputAdd
    #
    $buttonStoresInputAdd.Font = 'Microsoft Sans Serif, 8.25pt'
    $buttonStoresInputAdd.Location = '355, 72'
    $buttonStoresInputAdd.Name = 'buttonStoresInputAdd'
    $buttonStoresInputAdd.Size = '108, 20'
    $buttonStoresInputAdd.TabIndex = 3
    $buttonStoresInputAdd.Text = 'Add'
    $buttonStoresInputAdd.UseVisualStyleBackColor = $true
    $buttonStoresInputAdd.add_Click($buttonStoresInputAdd_Click)
    #
    # textboxStoresInput
    #
    $textboxStoresInput.Font = 'Microsoft Sans Serif, 8.25pt'
    $textboxStoresInput.Location = '6, 27'
    $textboxStoresInput.MaxLength = 25
    $textboxStoresInput.Name = 'textboxStoresInput'
    $textboxStoresInput.Size = '160, 20'
    $textboxStoresInput.TabIndex = 0
    $textboxStoresInput.TextAlign = 'Center'
    $textboxStoresInput.add_TextChanged($textboxStoresInput_TextChanged)
    $textboxStoresInput.add_PreviewKeyDown($textboxStoresInputPreviewKeyDown)
    #
    # comboboxStores
    #
    $comboboxStores.DropDownStyle = 'DropDownList'
    $comboboxStores.FormattingEnabled = $true
    $comboboxStores.Location = '6, 17'
    $comboboxStores.Name = 'comboboxStores'
    $comboboxStores.Size = '394, 21'
    $comboboxStores.TabIndex = 0
    #
    # buttonDataManagerClose
    #
    $buttonDataManagerClose.DialogResult = 'Cancel'
    $buttonDataManagerClose.Location = '12, 388'
    $buttonDataManagerClose.Name = 'buttonDataManagerClose'
    $buttonDataManagerClose.Size = '480, 23'
    $buttonDataManagerClose.TabIndex = 0
    $buttonDataManagerClose.Text = 'Close Data Manager'
    $buttonDataManagerClose.UseVisualStyleBackColor = $true
    $buttonDataManagerClose.add_Click($buttonDataManagerClose_Click)
    #
    # groupboxNames
    #
    $groupboxNames.Controls.Add($buttonNamesEdit)
    $groupboxNames.Controls.Add($buttonNamesDelete)
    $groupboxNames.Controls.Add($buttonNamesAdd)
    $groupboxNames.Controls.Add($groupboxNamesInput)
    $groupboxNames.Controls.Add($comboboxNames)
    $groupboxNames.Enabled = $false
    $groupboxNames.Location = '12, 332'
    $groupboxNames.Name = 'groupboxNames'
    $groupboxNames.Size = '480, 50'
    $groupboxNames.TabIndex = 3
    $groupboxNames.TabStop = $false
    $groupboxNames.Text = 'Names'
    #
    # buttonNamesEdit
    #
    $buttonNamesEdit.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
    $buttonNamesEdit.Location = '194, 17'
    $buttonNamesEdit.Name = 'buttonNamesEdit'
    $buttonNamesEdit.Size = '21, 21'
    $buttonNamesEdit.TabIndex = 3
    $buttonNamesEdit.Text = 'E'
    $buttonNamesEdit.UseVisualStyleBackColor = $false
    $buttonNamesEdit.add_Click($buttonNamesEdit_Click)
    #
    # buttonNamesDelete
    #
    $buttonNamesDelete.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
    $buttonNamesDelete.Location = '173, 17'
    $buttonNamesDelete.Name = 'buttonNamesDelete'
    $buttonNamesDelete.Size = '21, 21'
    $buttonNamesDelete.TabIndex = 2
    $buttonNamesDelete.Text = '-'
    $buttonNamesDelete.UseVisualStyleBackColor = $false
    $buttonNamesDelete.add_Click($buttonNamesDelete_Click)
    #
    # buttonNamesAdd
    #
    $buttonNamesAdd.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
    $buttonNamesAdd.Location = '152, 17'
    $buttonNamesAdd.Name = 'buttonNamesAdd'
    $buttonNamesAdd.Size = '21, 21'
    $buttonNamesAdd.TabIndex = 1
    $buttonNamesAdd.Text = '+'
    $buttonNamesAdd.UseVisualStyleBackColor = $false
    $buttonNamesAdd.add_Click($buttonNamesAdd_Click)
    #
    # groupboxNamesInput
    #
    $groupboxNamesInput.Controls.Add($buttonNamesInputAdd)
    $groupboxNamesInput.Controls.Add($textboxNamesInput)
    $groupboxNamesInput.Font = 'Microsoft Sans Serif, 0.25pt'
    $groupboxNamesInput.Location = '221, 10'
    $groupboxNamesInput.Name = 'groupboxNamesInput'
    $groupboxNamesInput.Size = '254, 36'
    $groupboxNamesInput.TabIndex = 3
    $groupboxNamesInput.TabStop = $false
    $groupboxNamesInput.Visible = $false
    #
    # buttonNamesInputAdd
    #
    $buttonNamesInputAdd.Font = 'Microsoft Sans Serif, 8.25pt'
    $buttonNamesInputAdd.Location = '140, 8'
    $buttonNamesInputAdd.Name = 'buttonNamesInputAdd'
    $buttonNamesInputAdd.Size = '108, 20'
    $buttonNamesInputAdd.TabIndex = 1
    $buttonNamesInputAdd.Text = 'Add'
    $buttonNamesInputAdd.UseVisualStyleBackColor = $true
    $buttonNamesInputAdd.add_Click($buttonNamesInputAdd_Click)
    #
    # textboxNamesInput
    #
    $textboxNamesInput.Font = 'Microsoft Sans Serif, 8.25pt'
    $textboxNamesInput.Location = '6, 8'
    $textboxNamesInput.MaxLength = 25
    $textboxNamesInput.Name = 'textboxNamesInput'
    $textboxNamesInput.Size = '130, 20'
    $textboxNamesInput.TabIndex = 0
    $textboxNamesInput.TextAlign = 'Center'
    $textboxNamesInput.add_TextChanged($textboxNamesInput_TextChanged)
    $textboxNamesInput.add_PreviewKeyDown($textboxNamesInput_PreviewKeyDown)
    #
    # comboboxNames
    #
    $comboboxNames.DropDownStyle = 'DropDownList'
    $comboboxNames.FormattingEnabled = $true
    $comboboxNames.Location = '6, 17'
    $comboboxNames.Name = 'comboboxNames'
    $comboboxNames.Size = '140, 21'
    $comboboxNames.TabIndex = 0
    $comboboxNames.add_SelectedIndexChanged($comboboxNames_SelectedIndexChanged)
    #
    # groupboxTypes
    #
    $groupboxTypes.Controls.Add($buttonTypesEdit)
    $groupboxTypes.Controls.Add($buttonTypesDelete)
    $groupboxTypes.Controls.Add($buttonTypesAdd)
    $groupboxTypes.Controls.Add($groupboxTypesInput)
    $groupboxTypes.Controls.Add($comboboxTypes)
    $groupboxTypes.Enabled = $false
    $groupboxTypes.Location = '12, 276'
    $groupboxTypes.Name = 'groupboxTypes'
    $groupboxTypes.Size = '480, 50'
    $groupboxTypes.TabIndex = 2
    $groupboxTypes.TabStop = $false
    $groupboxTypes.Text = 'Types'
    #
    # buttonTypesEdit
    #
    $buttonTypesEdit.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
    $buttonTypesEdit.Location = '194, 17'
    $buttonTypesEdit.Name = 'buttonTypesEdit'
    $buttonTypesEdit.Size = '21, 21'
    $buttonTypesEdit.TabIndex = 3
    $buttonTypesEdit.Text = 'E'
    $buttonTypesEdit.UseVisualStyleBackColor = $false
    $buttonTypesEdit.add_Click($buttonTypesEdit_Click)
    #
    # buttonTypesDelete
    #
    $buttonTypesDelete.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
    $buttonTypesDelete.Location = '173, 17'
    $buttonTypesDelete.Name = 'buttonTypesDelete'
    $buttonTypesDelete.Size = '21, 21'
    $buttonTypesDelete.TabIndex = 2
    $buttonTypesDelete.Text = '-'
    $buttonTypesDelete.UseVisualStyleBackColor = $false
    $buttonTypesDelete.add_Click($buttonTypesDelete_Click)
    #
    # buttonTypesAdd
    #
    $buttonTypesAdd.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
    $buttonTypesAdd.Location = '152, 17'
    $buttonTypesAdd.Name = 'buttonTypesAdd'
    $buttonTypesAdd.Size = '21, 21'
    $buttonTypesAdd.TabIndex = 1
    $buttonTypesAdd.Text = '+'
    $buttonTypesAdd.UseVisualStyleBackColor = $false
    $buttonTypesAdd.add_Click($buttonTypesAdd_Click)
    #
    # groupboxTypesInput
    #
    $groupboxTypesInput.Controls.Add($buttonTypesInputAdd)
    $groupboxTypesInput.Controls.Add($textboxTypesInput)
    $groupboxTypesInput.Font = 'Microsoft Sans Serif, 0.25pt'
    $groupboxTypesInput.Location = '221, 10'
    $groupboxTypesInput.Name = 'groupboxTypesInput'
    $groupboxTypesInput.Size = '254, 36'
    $groupboxTypesInput.TabIndex = 3
    $groupboxTypesInput.TabStop = $false
    $groupboxTypesInput.Visible = $false
    #
    # buttonTypesInputAdd
    #
    $buttonTypesInputAdd.Font = 'Microsoft Sans Serif, 8.25pt'
    $buttonTypesInputAdd.Location = '140, 8'
    $buttonTypesInputAdd.Name = 'buttonTypesInputAdd'
    $buttonTypesInputAdd.Size = '108, 20'
    $buttonTypesInputAdd.TabIndex = 1
    $buttonTypesInputAdd.Text = 'Add'
    $buttonTypesInputAdd.UseVisualStyleBackColor = $true
    $buttonTypesInputAdd.add_Click($buttonTypesInputAdd_Click)
    #
    # textboxTypesInput
    #
    $textboxTypesInput.Font = 'Microsoft Sans Serif, 8.25pt'
    $textboxTypesInput.Location = '6, 8'
    $textboxTypesInput.MaxLength = 25
    $textboxTypesInput.Name = 'textboxTypesInput'
    $textboxTypesInput.Size = '130, 20'
    $textboxTypesInput.TabIndex = 0
    $textboxTypesInput.TextAlign = 'Center'
    $textboxTypesInput.add_TextChanged($textboxTypesInput_TextChanged)
    $textboxTypesInput.add_PreviewKeyDown($textboxTypesInput_PreviewKeyDown)
    #
    # comboboxTypes
    #
    $comboboxTypes.DropDownStyle = 'DropDownList'
    $comboboxTypes.FormattingEnabled = $true
    $comboboxTypes.Location = '6, 17'
    $comboboxTypes.Name = 'comboboxTypes'
    $comboboxTypes.Size = '140, 21'
    $comboboxTypes.TabIndex = 0
    $comboboxTypes.add_SelectedIndexChanged($comboboxTypes_SelectedIndexChanged)
    #
    # groupboxKinds
    #
    $groupboxKinds.Controls.Add($buttonKindsEdit)
    $groupboxKinds.Controls.Add($buttonKindsDelete)
    $groupboxKinds.Controls.Add($buttonKindsAdd)
    $groupboxKinds.Controls.Add($groupboxKindsInput)
    $groupboxKinds.Controls.Add($comboboxKinds)
    $groupboxKinds.Enabled = $false
    $groupboxKinds.Location = '12, 220'
    $groupboxKinds.Name = 'groupboxKinds'
    $groupboxKinds.Size = '480, 50'
    $groupboxKinds.TabIndex = 1
    $groupboxKinds.TabStop = $false
    $groupboxKinds.Text = 'Kinds'
    #
    # buttonKindsEdit
    #
    $buttonKindsEdit.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
    $buttonKindsEdit.Location = '194, 17'
    $buttonKindsEdit.Name = 'buttonKindsEdit'
    $buttonKindsEdit.Size = '21, 21'
    $buttonKindsEdit.TabIndex = 3
    $buttonKindsEdit.Text = 'E'
    $buttonKindsEdit.UseVisualStyleBackColor = $false
    $buttonKindsEdit.add_Click($buttonKindsEdit_Click)
    #
    # buttonKindsDelete
    #
    $buttonKindsDelete.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
    $buttonKindsDelete.Location = '173, 17'
    $buttonKindsDelete.Name = 'buttonKindsDelete'
    $buttonKindsDelete.Size = '21, 21'
    $buttonKindsDelete.TabIndex = 2
    $buttonKindsDelete.Text = '-'
    $buttonKindsDelete.UseVisualStyleBackColor = $false
    $buttonKindsDelete.add_Click($buttonKindsDelete_Click)
    #
    # buttonKindsAdd
    #
    $buttonKindsAdd.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
    $buttonKindsAdd.Location = '152, 17'
    $buttonKindsAdd.Name = 'buttonKindsAdd'
    $buttonKindsAdd.Size = '21, 21'
    $buttonKindsAdd.TabIndex = 1
    $buttonKindsAdd.Text = '+'
    $buttonKindsAdd.UseVisualStyleBackColor = $false
    $buttonKindsAdd.add_Click($buttonKindsAdd_Click)
    #
    # groupboxKindsInput
    #
    $groupboxKindsInput.Controls.Add($buttonKindsInputAdd)
    $groupboxKindsInput.Controls.Add($textboxKindsInput)
    $groupboxKindsInput.Font = 'Microsoft Sans Serif, 0.25pt'
    $groupboxKindsInput.Location = '221, 10'
    $groupboxKindsInput.Name = 'groupboxKindsInput'
    $groupboxKindsInput.Size = '254, 36'
    $groupboxKindsInput.TabIndex = 3
    $groupboxKindsInput.TabStop = $false
    $groupboxKindsInput.Visible = $false
    #
    # buttonKindsInputAdd
    #
    $buttonKindsInputAdd.Font = 'Microsoft Sans Serif, 8.25pt'
    $buttonKindsInputAdd.Location = '140, 8'
    $buttonKindsInputAdd.Name = 'buttonKindsInputAdd'
    $buttonKindsInputAdd.Size = '108, 20'
    $buttonKindsInputAdd.TabIndex = 1
    $buttonKindsInputAdd.Text = 'Add'
    $buttonKindsInputAdd.UseVisualStyleBackColor = $true
    $buttonKindsInputAdd.add_Click($buttonKindsInputAdd_Click)
    #
    # textboxKindsInput
    #
    $textboxKindsInput.Font = 'Microsoft Sans Serif, 8.25pt'
    $textboxKindsInput.Location = '6, 8'
    $textboxKindsInput.MaxLength = 25
    $textboxKindsInput.Name = 'textboxKindsInput'
    $textboxKindsInput.Size = '130, 20'
    $textboxKindsInput.TabIndex = 0
    $textboxKindsInput.TextAlign = 'Center'
    $textboxKindsInput.add_TextChanged($textboxKindsInput_TextChanged)
    $textboxKindsInput.add_PreviewKeyDown($textboxKindsInput_PreviewKeyDown)
    #
    # comboboxKinds
    #
    $comboboxKinds.DropDownStyle = 'DropDownList'
    $comboboxKinds.FormattingEnabled = $true
    $comboboxKinds.Location = '6, 17'
    $comboboxKinds.Name = 'comboboxKinds'
    $comboboxKinds.Size = '140, 21'
    $comboboxKinds.TabIndex = 0
    $comboboxKinds.add_SelectedIndexChanged($comboboxKinds_SelectedIndexChanged)
    #
    # groupboxCategories
    #
    $groupboxCategories.Controls.Add($buttonCategoriesEdit)
    $groupboxCategories.Controls.Add($buttonCategoriesDelete)
    $groupboxCategories.Controls.Add($buttonCategoriesAdd)
    $groupboxCategories.Controls.Add($groupboxCategoriesInput)
    $groupboxCategories.Controls.Add($comboboxCategories)
    $groupboxCategories.Location = '12, 164'
    $groupboxCategories.Name = 'groupboxCategories'
    $groupboxCategories.Size = '480, 50'
    $groupboxCategories.TabIndex = 0
    $groupboxCategories.TabStop = $false
    $groupboxCategories.Text = 'Categories'
    #
    # buttonCategoriesEdit
    #
    $buttonCategoriesEdit.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
    $buttonCategoriesEdit.Location = '194, 17'
    $buttonCategoriesEdit.Name = 'buttonCategoriesEdit'
    $buttonCategoriesEdit.Size = '21, 21'
    $buttonCategoriesEdit.TabIndex = 3
    $buttonCategoriesEdit.Text = 'E'
    $buttonCategoriesEdit.UseVisualStyleBackColor = $false
    $buttonCategoriesEdit.add_Click($buttonCategoriesEdit_Click)
    #
    # buttonCategoriesDelete
    #
    $buttonCategoriesDelete.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
    $buttonCategoriesDelete.Location = '173, 17'
    $buttonCategoriesDelete.Name = 'buttonCategoriesDelete'
    $buttonCategoriesDelete.Size = '21, 21'
    $buttonCategoriesDelete.TabIndex = 2
    $buttonCategoriesDelete.Text = '-'
    $buttonCategoriesDelete.UseVisualStyleBackColor = $false
    $buttonCategoriesDelete.add_Click($buttonCategoriesDelete_Click)
    #
    # buttonCategoriesAdd
    #
    $buttonCategoriesAdd.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
    $buttonCategoriesAdd.Location = '152, 17'
    $buttonCategoriesAdd.Name = 'buttonCategoriesAdd'
    $buttonCategoriesAdd.Size = '21, 21'
    $buttonCategoriesAdd.TabIndex = 1
    $buttonCategoriesAdd.Text = '+'
    $buttonCategoriesAdd.UseVisualStyleBackColor = $false
    $buttonCategoriesAdd.add_Click($buttonCategoriesAdd_Click)
    #
    # groupboxCategoriesInput
    #
    $groupboxCategoriesInput.Controls.Add($buttonCategoriesInputAdd)
    $groupboxCategoriesInput.Controls.Add($textboxCategoriesInput)
    $groupboxCategoriesInput.Font = 'Microsoft Sans Serif, 0.25pt'
    $groupboxCategoriesInput.Location = '221, 10'
    $groupboxCategoriesInput.Name = 'groupboxCategoriesInput'
    $groupboxCategoriesInput.Size = '254, 36'
    $groupboxCategoriesInput.TabIndex = 3
    $groupboxCategoriesInput.TabStop = $false
    $groupboxCategoriesInput.Visible = $false
    #
    # buttonCategoriesInputAdd
    #
    $buttonCategoriesInputAdd.Font = 'Microsoft Sans Serif, 8.25pt'
    $buttonCategoriesInputAdd.Location = '140, 8'
    $buttonCategoriesInputAdd.Name = 'buttonCategoriesInputAdd'
    $buttonCategoriesInputAdd.Size = '108, 20'
    $buttonCategoriesInputAdd.TabIndex = 1
    $buttonCategoriesInputAdd.Text = 'Add'
    $buttonCategoriesInputAdd.UseVisualStyleBackColor = $true
    $buttonCategoriesInputAdd.add_Click($buttonCategoriesInputAdd_Click)
    #
    # textboxCategoriesInput
    #
    $textboxCategoriesInput.Font = 'Microsoft Sans Serif, 8.25pt'
    $textboxCategoriesInput.Location = '6, 8'
    $textboxCategoriesInput.MaxLength = 25
    $textboxCategoriesInput.Name = 'textboxCategoriesInput'
    $textboxCategoriesInput.Size = '130, 20'
    $textboxCategoriesInput.TabIndex = 0
    $textboxCategoriesInput.TextAlign = 'Center'
    $textboxCategoriesInput.add_TextChanged($textboxCategoriesInput_TextChanged)
    $textboxCategoriesInput.add_PreviewKeyDown($textboxCategoriesInput_PreviewKeyDown)
    #
    # comboboxCategories
    #
    $comboboxCategories.DropDownStyle = 'DropDownList'
    $comboboxCategories.FormattingEnabled = $true
    $comboboxCategories.Location = '6, 17'
    $comboboxCategories.Name = 'comboboxCategories'
    $comboboxCategories.Size = '140, 21'
    $comboboxCategories.TabIndex = 0
    $comboboxCategories.add_SelectedIndexChanged($comboboxCategories_SelectedIndexChanged)
    #
    # TimerInput
    #
    $TimerInput.Interval = 300
    $TimerInput.add_Tick($timerInput_Tick)
    #
    # timeDataManagerConnectionState
    #
    $timeDataManagerConnectionState.Interval = 10000
    $timeDataManagerConnectionState.add_Tick($timeDataManagerConnectionState_Tick)
    $groupboxCategoriesInput.ResumeLayout($false)
    $groupboxCategories.ResumeLayout($false)
    $groupboxKindsInput.ResumeLayout($false)
    $groupboxKinds.ResumeLayout($false)
    $groupboxTypesInput.ResumeLayout($false)
    $groupboxTypes.ResumeLayout($false)
    $groupboxNamesInput.ResumeLayout($false)
    $groupboxNames.ResumeLayout($false)
    $groupboxStoresInput.ResumeLayout($false)
    $groupboxStores.ResumeLayout($false)
    $formDataManager.ResumeLayout($false)
    #endregion Generated Form Code

    #----------------------------------------------

    #Save the initial state of the form
    $InitialFormWindowState = $formDataManager.WindowState
    #Init the OnLoad event to correct the initial state of the form
    $formDataManager.add_Load($Form_StateCorrection_Load)
    #Clean up the control events
    $formDataManager.add_FormClosed($Form_Cleanup_FormClosed)
    #Store the control values when form is closing
    $formDataManager.add_Closing($Form_StoreValues_Closing)
    #Show the Form
    return $formDataManager.ShowDialog()
}
#endregion Source: DataManagerForm.psf

#region Source: Globals.ps1
#--------------------------------------------
# Declare Global Variables and Functions here
#--------------------------------------------
$script:ErrorActionPreference = 'SilentlyContinue'
$script:progresspreference = 'SilentlyContinue'
$script:RegistryPath = 'HKCU:\SOFTWARE\PK-Tools\My Accounting'
function Invoke-PSCheck
{
    Param (
        [Parameter(Mandatory = $true)]
        [System.Windows.Forms.Form]$Form
    )
    if ($PSVersionTable.PSVersion.Major -lt 3)
    {
        [void][System.Windows.Forms.MessageBox]::Show('This program will work only with powershell version 3 or above installed.', 'Error')
        $Form.Close()
    }
}
function Invoke-DatabaseTable
{
    param (
        [Parameter(Mandatory = $true)]
        [string]$ComputerName,
        [Parameter(Mandatory = $true)]
        [string]$DataBaseName,
        [Parameter(Mandatory = $true)]
        [string]$Query,
        [Parameter(Mandatory = $true)]
        [ValidateSet('True', 'False')]
        [string]$IntegratedSecurity,
        [Parameter(Mandatory = $false)]
        [string]$Login,
        [Parameter(Mandatory = $false)]
        [string]$Password,
        [Parameter(Mandatory = $false)]
        [switch]$ErrorCode
    )
    BEGIN
    {
        $Connection = New-Object -TypeName System.Data.SqlClient.SqlConnection
        $DataTable = New-Object -TypeName System.Data.DataTable
        switch ($IntegratedSecurity)
        {
            'True'
            {
                $Connection.ConnectionString = "Server=$ComputerName;Database=$DataBaseName;Integrated Security=$IntegratedSecurity;"
                break
            }
            'False'
            {
                $Connection.ConnectionString = "Server=$ComputerName;Database=$DataBaseName;uid=$Login; pwd=$Password;Integrated Security=$IntegratedSecurity;"
                break
            }
        }
        if ($ErrorCode)
        {
            $Query += "`n"
            $Query += 'select @@ERROR as [ErrorCode]'
        }
    }
    PROCESS
    {
        $Connection.Open()
        $Command = $Connection.CreateCommand()
        $Command.CommandText = $Query
        $DataTable.Load($Command.ExecuteReader())
    }
    END
    {
        $Connection.Close()
        Write-Output -InputObject $DataTable
        $DataTable.Clear()
    }
}
function Set-IntegratedSecurity
{
    if ($checkboxIntegratedSecurity.Checked -eq $true)
    {
        $groupboxSQLServerCredentials.Enabled = $false 
    }
    else
    {
        $groupboxSQLServerCredentials.Enabled = $true 
    }
    $textboxSQLServerLogin.Clear()
    $textboxSQLServerPassword.Clear()
}
function Get-RawData
{
    param (
        [Parameter(Mandatory = $true)]
        [string]$ComputerName,
        [Parameter(Mandatory = $true)]
        [string]$DataBaseName,
        [Parameter(Mandatory = $true)]
        [string]$Query,
        [Parameter(Mandatory = $true)]
        [ValidateSet('True', 'False')]
        [string]$IntegratedSecurity,
        [Parameter(Mandatory = $false)]
        [string]$Login,
        [Parameter(Mandatory = $false)]
        [string]$Password
    )
    BEGIN
    {
        $Connection = New-Object -TypeName System.Data.SqlClient.SqlConnection
        switch ($IntegratedSecurity)
        {
            'True'
            {
                $Connection.ConnectionString = "Server=$ComputerName;Database=$DataBaseName;Integrated Security=$IntegratedSecurity;"
                break
            }
            'False'
            {
                $Connection.ConnectionString = "Server=$ComputerName;Database=$DataBaseName;uid=$Login; pwd=$Password;Integrated Security=$IntegratedSecurity;"
                break
            }
        }
    }
    PROCESS
    {
        $Connection.Open()
        $Command = $Connection.CreateCommand()
        $Command.CommandText = $Query
        $RawData = $Command.ExecuteReader()
    }
    END
    {
        $Connection.Close()
        Write-Output -InputObject $RawData
    }
}
function Set-MyDataGridView
{
    param (
        [Parameter(Mandatory = $true)]
        [string]$Query,
        [Parameter(Mandatory = $true)]
        [System.Windows.Forms.DataGridView]$DataGridView
    )
    BEGIN
    {
        if ($script:MyDataTable -ne $null)
        {
            $script:MyDataTable.Clear()
            $script:MyDataTable.Dispose()
        }
        $MyDataConnection = New-Object -TypeName System.Data.SqlClient.SqlConnection
        $script:MyDataTable = New-Object -TypeName System.Data.DataTable
        switch ($script:IntegratedSecurityEnabled)
        {
            'True'
            {
                $MyDataConnection.ConnectionString = "Server=$script:SQLServerName;Database=$script:SQLServerDatabase;Integrated Security=$script:IntegratedSecurityEnabled;"
                break
            }
            'False'
            {
                $MyDataConnection.ConnectionString = "Server=$script:SQLServerName;Database=$script:SQLServerDatabase;uid=$script:SQLServerLogin; pwd=$script:SQLServerPassword;Integrated Security=$script:IntegratedSecurityEnabled;"
                break
            }
        }
    }
    PROCESS
    {
        $MyDataConnection.Open()
        $MyDataCommand = $MyDataConnection.CreateCommand()
        $MyDataCommand.CommandText = $Query
        $script:MyDataTable.Load($MyDataCommand.ExecuteReader())
        $DataGridView.DataSource = $script:MyDataTable
        if ($DataGridView -eq $datagridviewDataOutput)
        {
            if ($DataGridView.RowCount -gt 0)
            {
                $buttonDataOutputQueryToCsv.Enabled = $true 
            }
            else
            {
                $buttonDataOutputQueryToCsv.Enabled = $false 
            }
            if ($DataGridView.ColumnCount -eq 2 -and $($datagridviewDataOutput.Columns | Select-Object -ExpandProperty Name) -contains 'Chart' -and $datagridviewDataOutput.RowCount -gt 1)
            {
                $buttonDataOutputMakeChart.Enabled = $true 
            }
            else
            {
                $buttonDataOutputMakeChart.Enabled = $false 
            }
        }
    }
    END
    {
        $MyDataConnection.Close()
    }
}
function Set-Groupboxes
{
    if ($comboboxCategories.Items.Count -gt 0)
    {
        $groupboxKinds.Enabled = $true
    }
    else
    {
        $groupboxKinds.Enabled = $false
        $groupboxKindsInput.Visible = $false
        $buttonKindsAdd.BackColor = 'Control'
        $buttonKindsDelete.Enabled = $true
        $textboxKindsInput.Clear()
    }
		
    if ($comboboxKinds.Items.Count -gt 0)
    {
        $groupboxTypes.Enabled = $true 
    }
    else
    {
        $groupboxTypes.Enabled = $false
        $groupboxTypesInput.Visible = $false
        $buttonTypesAdd.BackColor = 'Control'
        $buttonTypesDelete.Enabled = $true
        $textboxTypesInput.Clear()
    }
		
    if ($comboboxTypes.Items.Count -gt 0)
    {
        $groupboxNames.Enabled = $true
    }
    else
    {
        $groupboxNames.Enabled = $false
        $groupboxNamesInput.Visible = $false
        $buttonNamesAdd.BackColor = 'Control'
        $buttonNamesDelete.Enabled = $true
        $textboxNamesInput.Clear()
    }
}
function Set-DataOutputComboboxes
{
    if ($comboboxDataOutputStores.Items.Count -gt 0)
    {
        $comboboxDataOutputStores.Enabled = $true
    }
    else
    {
        $comboboxDataOutputStores.Enabled = $false
    }
		
    if ($comboboxDataOutputCategories.Items.Count -gt 0)
    {
        $comboboxDataOutputCategories.Enabled = $true
    }
    else
    {
        $comboboxDataOutputCategories.Enabled = $false
    }
		
    if ($comboboxDataOutputKinds.Items.Count -gt 0)
    {
        $comboboxDataOutputKinds.Enabled = $true
    }
    else
    {
        $comboboxDataOutputKinds.Enabled = $false 
    }
		
    if ($comboboxDataOutputTypes.Items.Count -gt 0)
    {
        $comboboxDataOutputTypes.Enabled = $true
    }
    else
    {
        $comboboxDataOutputTypes.Enabled = $false
    }
		
    if ($comboboxDataOutputNames.Items.Count -gt 0)
    {
        $comboboxDataOutputNames.Enabled = $true
        $numericupdownDataOutputPrice.Enabled = $true
        $numericupdownDataOutputQuantity.Enabled = $true
        $datetimepickerDataOutputDate.Enabled = $true
        $buttonDataOutputAddPurchase.Enabled = $true
    }
    else
    {
        $comboboxDataOutputNames.Enabled = $false
        $numericupdownDataOutputPrice.Enabled = $false
        $numericupdownDataOutputPrice.Value = $numericupdownDataOutputPrice.Minimum
        $numericupdownDataOutputQuantity.Enabled = $false
        $numericupdownDataOutputQuantity.Value = 1
        $datetimepickerDataOutputDate.Enabled = $false
        $datetimepickerDataOutputDate.Value = (Get-Date)
        $buttonDataOutputAddPurchase.Enabled = $false
    }
}
function Set-Comboboxes
{
    param (
        [Parameter(Mandatory = $true)]
        [System.Windows.Forms.ComboBox]$Item,
        [Parameter(Mandatory = $true)]
        [string]$Table,
        [Parameter(Mandatory = $false)]
        [string]$Query,
        [Parameter(Mandatory = $true)]
        [string]$Property
    )
    $Item.Items.Clear()
    if (-not $Query) 
    {
        $Query = "select * from $Table" 
    }
    Invoke-DatabaseTable @GetDatabaseTableParams -Query $Query |
    Select-Object -ExpandProperty $Property |
    ForEach-Object	 -Process {
        Load-ComboBox -ComboBox $Item -Items $_ -Append
    }
    $Item.SelectedItem = $Item.Items[0]
}
function Get-SQLScripts
{
    param (
        $SelectedItem
    )
    $comboboxDataOutputQueries.Items.Clear()
    Get-Item -Path "$script:RegistryPath\Queries" |
    Select-Object -ExpandProperty Property |
    ForEach-Object	 -Process {
        Load-ComboBox -ComboBox $comboboxDataOutputQueries -Items $_ -Append
    }
    $comboboxDataOutputQueries.SelectedItem = $SelectedItem
}
function Set-SQLConnection
{
    $script:GetDatabaseTableParams = @{
        'ComputerName' = "$script:SQLServerName"
        'DataBaseName' = "$script:SQLServerDatabase"
    }
    if ($script:IntegratedSecurityEnabled -eq $true)
    {
        $GetDatabaseTableParams.Add('IntegratedSecurity', 'True')
    }
    else
    {
        $GetDatabaseTableParams.Add('IntegratedSecurity', 'False')
        $GetDatabaseTableParams.Add('Login', "$script:SQLServerLogin")
        $GetDatabaseTableParams.Add('Password', "$script:SQLServerPassword")
    }
}
function Set-Registry
{
    if (-not (Test-Path -Path $script:RegistryPath))
    {
        New-Item -ItemType Folder -Path $script:RegistryPath -Name General -Force
        New-ItemProperty -Path "$script:RegistryPath\General" -Name Version -PropertyType String -Value 1.0.0.2 -Force
        New-ItemProperty -Path "$script:RegistryPath\General" -Name Update -PropertyType String -Value 1 -Force
			
        New-Item -ItemType Folder -Path $script:RegistryPath -Name Configuration -Force
			
        New-Item -ItemType Folder -Path "$script:RegistryPath\Configuration" -Name Connection -Force
        New-ItemProperty -Path "$script:RegistryPath\Configuration\Connection" -Name ServerName -PropertyType String -Value '' -Force
        New-ItemProperty -Path "$script:RegistryPath\Configuration\Connection" -Name DefaultDatabase -PropertyType String -Value '' -Force
        New-ItemProperty -Path "$script:RegistryPath\Configuration\Connection" -Name IntegratedSecurity -PropertyType String -Value True -Force
        New-ItemProperty -Path "$script:RegistryPath\Configuration\Connection" -Name SQLServerLogin -PropertyType String -Value '' -Force
        New-ItemProperty -Path "$script:RegistryPath\Configuration\Connection" -Name SQLServerPassword -PropertyType String -Value '' -Force
			
        New-Item -ItemType Folder -Path "$script:RegistryPath\Configuration" -Name Common -Force
        New-ItemProperty -Path "$script:RegistryPath\Configuration\Common" -Name KeepConfiguration -PropertyType String -Value False -Force
        New-ItemProperty -Path "$script:RegistryPath\Configuration\Common" -Name AutoConnect -PropertyType String -Value False -Force
        New-ItemProperty -Path "$script:RegistryPath\Configuration\Common" -Name Language -PropertyType String -Value English -Force
        New-ItemProperty -Path "$script:RegistryPath\Configuration\Common" -Name DisplayColor -PropertyType String -Value Control -Force
			
        New-Item -ItemType Folder -Path $script:RegistryPath -Name Queries -Force
        New-ItemProperty -Path "$script:RegistryPath\Queries" -Name 'MyData (View)' -PropertyType String -Value @"
select 
* 
from MyData
order by BuyDate desc, Purchase_Id desc
"@ -Force
        New-ItemProperty -Path "$script:RegistryPath\Queries" -Name 'Spent (Today)' -PropertyType String -Value @"
select 
CAST(GETDATE() AS DATE) AS Today
,ISNULL(cast(sum(PriceSum)as dec(10,3)),0) as PriceSum 
from MyData
where BuyDate = CAST(GETDATE() AS DATE)
"@ -Force
        New-ItemProperty -Path "$script:RegistryPath\Queries" -Name 'Categories (Chart)' -PropertyType String -Value @"
select 
CategoryName as Chart,
SUM(PriceSum) as Spent
from MyData
group by CategoryName
"@
    }
}
function Set-RegistrySaveConfiguration
{
    if ($checkboxKeepConfiguration.Checked -eq $true)
    {
        New-ItemProperty -Path "$script:RegistryPath\Configuration\Common" -Name KeepConfiguration -PropertyType String -Value $($checkboxKeepConfiguration.Checked) -Force
        New-ItemProperty -Path "$script:RegistryPath\Configuration\Common" -Name AutoConnect -PropertyType String -Value $($checkboxAutoConnect.Checked) -Force
        New-ItemProperty -Path "$script:RegistryPath\Configuration\Connection" -Name ServerName -PropertyType String -Value $($textboxSQLServerName.Text.Trim()) -Force
        New-ItemProperty -Path "$script:RegistryPath\Configuration\Connection" -Name DefaultDatabase -PropertyType String -Value $($textboxSQLServerDatabase.Text.Trim()) -Force
        New-ItemProperty -Path "$script:RegistryPath\Configuration\Connection" -Name IntegratedSecurity -PropertyType String -Value $($checkboxIntegratedSecurity.Checked) -Force
        if ($checkboxIntegratedSecurity.Checked -eq $false)
        {
            New-ItemProperty -Path "$script:RegistryPath\Configuration\Connection" -Name SQLServerLogin -PropertyType String -Value $($textboxSQLServerLogin.Text.Trim()) -Force
            New-ItemProperty -Path "$script:RegistryPath\Configuration\Connection" -Name SQLServerPassword -PropertyType String -Value $($textboxSQLServerPassword.Text.Trim()) -Force
        }
        else
        {
            New-ItemProperty -Path "$script:RegistryPath\Configuration\Connection" -Name SQLServerLogin -PropertyType String -Value '' -Force
            New-ItemProperty -Path "$script:RegistryPath\Configuration\Connection" -Name SQLServerPassword -PropertyType String -Value '' -Force
        }
    }
    else
    {
        New-ItemProperty -Path "$script:RegistryPath\Configuration\Common" -Name KeepConfiguration -PropertyType String -Value $($checkboxKeepConfiguration.Checked) -Force
    }
}
function Get-RegistryValues
{
    if (((Get-ItemProperty -Path "$script:RegistryPath\Configuration\Common" -Name KeepConfiguration).KeepConfiguration) -eq $true)
    {
        $textboxSQLServerName.Text = (Get-ItemProperty -Path "$script:RegistryPath\Configuration\Connection" -Name ServerName).ServerName
        $textboxSQLServerDatabase.Text = (Get-ItemProperty -Path "$script:RegistryPath\Configuration\Connection" -Name DefaultDatabase).DefaultDatabase
        $checkboxKeepConfiguration.Checked = $true
        if (((Get-ItemProperty -Path "$script:RegistryPath\Configuration\Common" -Name AutoConnect).AutoConnect) -eq $true)
        {
            $checkboxAutoConnect.Checked = $true 
        }
        else
        {
            $checkboxAutoConnect.Checked = $false 
        }
        if (((Get-ItemProperty -Path "$script:RegistryPath\Configuration\Connection" -Name IntegratedSecurity).IntegratedSecurity) -eq $true)
        {
            $checkboxIntegratedSecurity.Checked = $true
        }
        else
        {
            $checkboxIntegratedSecurity.Checked = $false
            $textboxSQLServerLogin.Text = (Get-ItemProperty -Path "$script:RegistryPath\Configuration\Connection" -Name SQLServerLogin).SQLServerLogin
            $textboxSQLServerPassword.Text = (Get-ItemProperty -Path "$script:RegistryPath\Configuration\Connection" -Name SQLServerPassword).SQLServerPassword
        }
    }
    else
    {
        $checkboxKeepConfiguration.Checked = $false 
    }
}
function Invoke-CheckStart
{
    if (((Get-ItemProperty -Path "$script:RegistryPath\Configuration\Common" -Name KeepConfiguration).KeepConfiguration) -eq $true)
    {
        $script:SQLServerName = (Get-ItemProperty -Path "$script:RegistryPath\Configuration\Connection" -Name ServerName).ServerName
        $script:SQLServerDatabase = (Get-ItemProperty -Path "$script:RegistryPath\Configuration\Connection" -Name DefaultDatabase).DefaultDatabase
        $script:IntegratedSecurityEnabled = (Get-ItemProperty -Path "$script:RegistryPath\Configuration\Connection" -Name IntegratedSecurity).IntegratedSecurity
        $script:SQLServerLogin = (Get-ItemProperty -Path "$script:RegistryPath\Configuration\Connection" -Name SQLServerLogin).SQLServerLogin
        $script:SQLServerPassword = (Get-ItemProperty -Path "$script:RegistryPath\Configuration\Connection" -Name SQLServerPassword).SQLServerPassword
        Set-SQLConnection
        if (((Get-ItemProperty -Path "$script:RegistryPath\Configuration\Common" -Name AutoConnect).AutoConnect) -eq $true)
        {
            if ((Invoke-DatabaseTable @GetDatabaseTableParams -Query "select 'True' AS [Check]" |
            Select-Object -ExpandProperty Check) -eq $true)
            {
                $script:ConnectionState = 1
                if ($script:SQLServerDatabase -eq 'master')
                {
                    Call-DatabaseManager_psf
                }
                else
                {
                    Call-DataOutputForm_psf
                }
            }
            else
            {
                [void][System.Windows.Forms.MessageBox]::Show($script:ConnectionCheckErrorState, $script:ConnectionCheckErrorStateType)
            }
        }
    }
}
function Set-StatisticsGridView
{
    param (
        [Parameter(Mandatory = $true)]
        [System.Windows.Forms.DataGridView]$DataGridView
    )
    BEGIN
    {
        if ($script:StatisitcsTable -ne $null)
        {
            $script:StatisitcsTable.Clear()
            $script:StatisitcsTable.Dispose()
        }
        $MyDataConnection = New-Object -TypeName System.Data.SqlClient.SqlConnection
        $script:StatisitcsTable = New-Object -TypeName System.Data.DataTable
        switch ($script:IntegratedSecurityEnabled)
        {
            'True'
            {
                $MyDataConnection.ConnectionString = "Server=$script:SQLServerName;Database=$script:SQLServerDatabase;Integrated Security=$script:IntegratedSecurityEnabled;"
                break
            }
            'False'
            {
                $MyDataConnection.ConnectionString = "Server=$script:SQLServerName;Database=$script:SQLServerDatabase;uid=$script:SQLServerLogin; pwd=$script:SQLServerPassword;Integrated Security=$script:IntegratedSecurityEnabled;"
                break
            }
        }
    }
    PROCESS
    {
        $MyDataConnection.Open()
        $MyDataCommand = $MyDataConnection.CreateCommand()
        $MyDataCommand.CommandText = @"
use $script:DatabaseStatistics
select
SO.name AS TableName
 ,SC.name AS ColumnName
 ,SO.type_desc AS [Type]
 ,ISNULL(SP.rows,'0') AS [Rows]
 ,ST.name AS DataType
 ,SC.max_length AS MaxLength
 ,[ISNULL] = 
	CASE 
		WHEN SC.is_nullable = 1 THEN 'True' 
		WHEN SC.is_nullable = 0 THEN 'False'
	END
 ,PrimaryKey = 
	CASE 
		WHEN ISNULL(SI.is_primary_key,0) = 1 THEN 'True'
		WHEN ISNULL(SI.is_primary_key,0) = 0 THEN 'False'
	END
 ,SO.create_date AS Created
 ,SO.modify_date AS Modified
from 
sys.objects AS SO
full outer join
sys.columns AS SC
on SO.object_id=SC.object_id
left outer join
sys.index_columns AS SIC
on SIC.object_id = SC.object_id and SIC.column_id = SC.column_id
left outer join
sys.indexes AS SI
on SO.object_id = SI.object_id and SIC.index_id = SI.index_id
full outer join
sys.partitions AS SP
on SO.object_id=SP.object_id
full outer join
sys.types AS ST
on SC.user_type_id=ST.user_type_id
where SO.type in ('U','V')
"@
        $script:StatisitcsTable.Load($MyDataCommand.ExecuteReader())
        $DataGridView.DataSource = $script:StatisitcsTable
    }
    END
    {
        $MyDataConnection.Close()
    }
}
function Set-LanguageName
{
    if (((Get-ItemProperty -Path "$script:RegistryPath\Configuration\Common" -Name Language).Language) -eq 'Russian' -or ((Get-ItemProperty -Path "$script:RegistryPath\Configuration\Common" -Name Language).Language) -eq 'Русский')
    {
        'Русский', 'Английский' | ForEach-Object -Process {
            Load-ComboBox -ComboBox $comboboxDisplayLangugage -Items $_ -Append 
        }
        $comboboxDisplayLangugage.SelectedItem = 'Русский'
    }
    if (((Get-ItemProperty -Path "$script:RegistryPath\Configuration\Common" -Name Language).Language) -eq 'English' -or ((Get-ItemProperty -Path "$script:RegistryPath\Configuration\Common" -Name Language).Language) -eq 'Английский')
    {
        'Russian', 'English' | ForEach-Object -Process {
            Load-ComboBox -ComboBox $comboboxDisplayLangugage -Items $_ -Append 
        }
        $comboboxDisplayLangugage.SelectedItem = 'English'
    }
}
function Set-Language
{
    param (
        [Parameter(Mandatory = $false)]
        [switch]$SetToRegistry
    )
    if ($SetToRegistry)
    {
        New-ItemProperty -Path "$script:RegistryPath\Configuration\Common" -Name Language -PropertyType String -Value $($comboboxDisplayLangugage.SelectedItem) -Force 
    }
    if (((Get-ItemProperty -Path "$script:RegistryPath\Configuration\Common" -Name Language).Language) -eq 'Russian' -or ((Get-ItemProperty -Path "$script:RegistryPath\Configuration\Common" -Name Language).Language) -eq 'Русский')
    {
        #configuration form
        $formSQLServerConnectionConfiguration.Text = 'Менеджер конфигурации'
        $labelSQLServerServerName.Text = 'Имя сервера'
        $labelSQLServerDatabase.Text = 'База данных'
        $checkboxIntegratedSecurity.Text = 'Интегрированная авторизация'
        $labelSQLServerLogin.Text = 'Логин'
        $labelSQLServerPassword.Text = 'Пароль'
        $labelDisplayLanguage.Text = 'Отображаемый язык'
        $labelDisplayColors.Text = 'Цветовая схема'
        $checkboxKeepConfiguration.Text = 'Сохранить конфигурацию'
        $checkboxAutoConnect.Text = 'Подключаться автоматически'
        $buttonSQLConfigurationApply.Text = 'Применить'
        $script:buttonSQLConfigurationApplyState = 'Сохранено'
        $script:buttonSQLConfigurationApplyStateReset = 'Применить'
        $buttonClose.Text = 'Закрыть'
        #database manager form
        $formDatabaseManager.Text = 'Менеджер баз данных'
        $labelDatabaseManagerName.Text = 'Имя'
        $groupboxDatabaseManagerCreate.Text = 'Новая база данных'
        $groupboxDatabaseManagerExistingDatabases.Text = 'Существующие базы данных'
        $buttonDatabaseManagerClose.Text = 'Закрыть'
        $buttonDatabaseManagerCreateDatabase.Text = 'Создать'
        $StatisticsToolStripMenuItem.Text = 'Показать статистику выбранной базы данных'
        $dropDatabaseToolStripMenuItem.Text = 'Уничтожить выбранную базу данных'
        $script:DatabaseExistsPart1 = 'База данных с именем'
        $script:DatabaseExistsPart2 = 'уже существует.'
        $script:CaptionError = 'Ошибка'
        $script:CaptionWarning = 'Предупреждение'
        $script:DatabaseDropPart1 = 'Вы собираетесь уничтожить базу данных с именем'
        $script:DatabaseDropPart2 = ".`nЭто приведет к потере всей хранящейся информации в этой базе данных.`nУверены, что хотите продолжить?"
        #database statistics form
        $formDatabaseStatisticsForm.Text = "Статитика базы данных $script:DatabaseStatistics"
        $buttonDatabaseStatisticsClose.Text = 'Закрыть'
        #data manager form
        $formDataManager.Text = 'Менеджер данных'
        $groupboxStores.Text = 'Магазины'
        $labelStoreName.Text = 'Имя магазина'
        $labelStoreAddress.Text = 'Адрес магазина'
        $labelStoreCityInput.Text = 'Город'
        $groupboxCategories.Text = 'Категории'
        $groupboxKinds.Text = 'Виды'
        $groupboxTypes.Text = 'Типы'
        $groupboxNames.Text = 'Наименования'
        $buttonDataManagerClose.Text = 'Закрыть менеджер данных'
        $script:ModeAddButton = 'Добавить'
        $script:ModeEditButton = 'Редактировать'
        $script:DeleteStorePart1 = 'Магазин, который вы пытаетесь удалить, содержит'
        $script:DeleteStorePart2 = "покупоки:`n`n"
        $script:DeleteStorePart3 = "`n`nНеобходимо удалить покупки совершенные в этом магазине."
        $script:DeleteCategoryPart1 = 'Категория, которую вы пытаетесь удалить, содержит'
        $script:DeleteCategoryPart2 = "вид с именем:`n`n"
        $script:DeleteCategoryPart3 = "`nНеобходимо удалить вид содержащийся в этой категории."
        $script:DeleteKindPart1 = 'Вид, который вы пытаетесь удалить, содержит'
        $script:DeleteKindPart2 = "тип с именем:`n`n"
        $script:DeleteKindPart3 = "`nНеобходимо удалить тип содержащийся в этой категории."
        $script:DeleteTypePart1 = 'Тип, который вы пытаетесь удалить, содержит'
        $script:DeleteTypePart2 = "наименования:`n`n"
        $script:DeleteTypePart3 = "`nНеобходимо удалить наименования содержащиеся в этом типе."
        $script:DeleteNamePart1 = 'Наименование, которое вы пытаетесь удалить, содержит'
        $script:DeleteNamePart2 = "покупки(Id):`n`n"
        $script:DeleteNamePart3 = "`n`nНеобходимо удалить покупки содержащие данное наименование."
        #data output form
        $formDataOutput.Text = 'Менеджер ввода/ввывода информации'
        $groupboxDataOutputNewPurchase.Text = 'Новая покупка'
        $groupboxDataOutputTable.Text = 'Сводная таблица'
        $groupboxQueryManager.Text = 'Менеджер запросов'
        $labelDataOutputStores.Text = 'Магазины'
        $labelDataOutputCategories.Text = 'Категории'
        $labelDataOutputKinds.Text = 'Виды'
        $labelDataOutputTypes.Text = 'Типы'
        $labelDataOutputNames.Text = 'Названия'
        $labelDataOutputPrice.Text = 'Цена'
        $labelDataOutputQuantity.Text = 'Количество'
        $labelDataOutputDate.Text = 'Дата'
        $buttonDataOutputAddPurchase.Text = 'Добавить покупку'
        $buttonDataOutputDataManager.Text = 'Менеджер данных'
        $buttonDataOutputQueryNew.Text = 'Новый'
        $buttonDataOutputQueryLoad.Text = 'Загрузить'
        $buttonDataOutputQueryEdit.Text = 'Редактировать'
        $buttonDataOutputQueryDelete.Text = 'Удалить'
        $buttonDataOutputQueryToCsv.Text = 'Экспорт в CSV'
        $buttonDataOutputMakeChart.Text = 'Создать диаграмму'
        $script:DataOutputMinimize = 'Свернуть данное окно'
        $script:DataOutputMakeChart = "Для возможности создания диаграммы необходимо:`nИметь входные данные из двух столбцов.`nСтолбец критерия должен иметь псевдоним Chart."
        $buttonOutputFormClose.Text = 'Закрыть'
        #main form
        $formMyAccounting.Text = 'Моя бухгалтерия'
        $buttonMainFormConnect.Text = 'Подключиться'
        $script:MyAccountingStateConnected = 'Подключен'
        $script:MyAccountingStateDisconnected = 'Отключен'
        $buttonMainFormConfigurationManager.Text = 'Менеджер конфигурации'
        $changeStoreForSelectedToolStripMenuItem.Text = 'Изменить магазин для выбраной покупки'
        $makeCopyOfSelectedPurchaseWithCurrentDateToolStripMenuItem.Text = 'Сделать копию для выбранной покупки с указанием текущей даты'
        $script:ChangeDataOutputPurchasePart1 = 'Вы собираетесь изменить магазин на'
        $script:ChangeDataOutputPurchasePart2 = ".`nДля покупки(ок) с Purchase_Id"
        $script:ChangeDataOutputPurchasePart3 = ".`nУверены, что хотите продолжить?"
        $script:ChangeDataOutputPurchaseType = 'Информация'
        $DataOutputRemoveSelectedToolStripMenuItem.Text = 'Удалить выбраную покупку'
        $script:DeletePurchasePart1 = 'Вы собираетесь удалить покупку(и) с Purchase_Id'
        $script:DeletePurchasePart2 = ".`nУверены, что хотите продолжить?"
        $script:DeletePurchaseType = 'Предупреждение'
        $script:CopyPurchasePart1 = 'Вы собираетесь создать копию покупки(ок) с Purchase_Id'
        $script:CopyPurchasePart2 = ".`nУверены, что хотите продолжить?"
        $script:CopyPurchaseType = 'Предупреждение'
        $script:EditQuery = 'К сожалению редактировать запрос по умолчанию нельзя'
        $script:EditQueryType = 'Информация'
        $script:DeleteQueryPart1 = 'Вы собираетесь удалить запрос'
        $script:DeleteQueryPart2 = ".`nУверены, что хотите продолжить?"
        $script:DeleteQueryType = 'Предупреждение'
        $script:DeleteQueryDefault = 'К сожалению удалить запрос по умолчанию нельзя'
        $script:DeleteQueryDefaultType = 'Информация'
        $script:ConnectionCheckErrorState = "Невозможно подключится к SQL Server.`nПроверьте настройки подключения."
        $script:ConnectionCheckErrorStateType = 'Ошибка'
        #query editor
        $script:QueryEditorModeNew = 'Новый'
        $script:QueryEditorModeEdit = 'Редактирование'
        $formQueryEditor.Text = "Редактор запросов ($script:QueryEditorMode)"
        $groupboxQueryEditorQueryName.Text = 'Имя запроса'
        $groupboxQueryEditorQueryText.Text = 'Текст запроса'
        $script:QueryExistsPart1 = 'Запрос с именем'
        $script:QueryExistsPart2 = 'уже существует'
        $script:QueryExistsType = 'Ошибка'
        $buttonSaveAndLeaveQueryEditor.Text = 'Сохранить и выйти из редактора запросов'
        $buttonCloseQueryEditorWithoutSaving.Text = 'Закрыть редактор запросов без сохранения'
        $script:QuerySelectCheck = "Запрос должен:`n- Начинаться с выражения SELECT или WITH.`n- Содеражать последующий TSQL код."
        $script:QuerySelectCheckErrorType = 'Ошибка'
        #charts manager
        $formDataCharts.Text = 'Менеджер диаграмм'
        $script:ChartsTitle = 'Диаграмма для:'
        $buttonDataChartsSave.Text = 'Сохранить диаграмму на диск'
        $buttonDataChartsClose.Text = 'Закрыть менеджер диаграмм'
    }
    if (((Get-ItemProperty -Path "$script:RegistryPath\Configuration\Common" -Name Language).Language) -eq 'English' -or ((Get-ItemProperty -Path "$script:RegistryPath\Configuration\Common" -Name Language).Language) -eq 'Английский')
    {
        #configuration form
        $formSQLServerConnectionConfiguration.Text = 'Configuration Manager'
        $labelSQLServerServerName.Text = 'ServerName'
        $labelSQLServerDatabase.Text = 'Database'
        $checkboxIntegratedSecurity.Text = 'IntegratedSecurity'
        $labelSQLServerLogin.Text = 'Login'
        $labelSQLServerPassword.Text = 'Password'
        $labelDisplayLanguage.Text = 'Display Language'
        $labelDisplayColors.Text = 'Display Colors'
        $checkboxKeepConfiguration.Text = 'Keep Configuration'
        $checkboxAutoConnect.Text = 'Auto Connect'
        $buttonSQLConfigurationApply.Text = 'Apply'
        $script:buttonSQLConfigurationApplyState = 'Saved'
        $script:buttonSQLConfigurationApplyStateReset = 'Apply'
        $buttonClose.Text = 'Close'
        #database manager form
        $formDatabaseManager.Text = 'Database Manager'
        $labelDatabaseManagerName.Text = 'Name'
        $groupboxDatabaseManagerCreate.Text = 'New Database'
        $groupboxDatabaseManagerExistingDatabases.Text = 'Existing Databases'
        $buttonDatabaseManagerClose.Text = 'Close'
        $buttonDatabaseManagerCreateDatabase.Text = 'Create'
        $StatisticsToolStripMenuItem.Text = 'Show selected database statistics'
        $dropDatabaseToolStripMenuItem.Text = 'Drop selected database'
        $script:DatabaseExistsPart1 = 'Database with name'
        $script:DatabaseExistsPart2 = 'already exist.'
        $script:CaptionError = 'Error'
        $script:DatabaseDropPart1 = 'You are about to drop database with name'
        $script:DatabaseDropPart2 = "permamently.`nThis will lead to lost of entire data stored inside this database.`nSure you want to proceed?"
        #database statistics form
        $formDatabaseStatisticsForm.Text = "$script:DatabaseStatistics Database Statistics"
        $buttonDatabaseStatisticsClose.Text = 'Close'
        #data manager form
        $formDataManager.Text = 'Data Manager'
        $groupboxStores.Text = 'Stores'
        $labelStoreName.Text = 'Store Name'
        $labelStoreAddress.Text = 'Store Address'
        $labelStoreCityInput.Text = 'Store Address City'
        $groupboxCategories.Text = 'Categories'
        $groupboxKinds.Text = 'Kinds'
        $groupboxTypes.Text = 'Types'
        $groupboxNames.Text = 'Names'
        $buttonDataManagerClose.Text = 'Close Data Manager'
        $script:ModeAddButton = 'Add'
        $script:ModeEditButton = 'Edit'
        $script:DeleteStorePart1 = 'Store you trying to remove has'
        $script:DeleteStorePart2 = "purchase(s):`n`n"
        $script:DeleteStorePart3 = "`n`nYou need to remove purchase(s) made in this store first."
        $script:DeleteCategoryPart1 = 'Category you trying to remove has'
        $script:DeleteCategoryPart2 = "kind name(s):`n`n"
        $script:DeleteCategoryPart3 = "`nYou need to remove kind(s) contained in this category first."
        $script:DeleteKindPart1 = 'Kind you trying to remove has'
        $script:DeleteKindPart2 = "type name(s):`n`n"
        $script:DeleteKindPart3 = "`nYou need to remove type(s) contained in this kind first."
        $script:DeleteTypePart1 = 'Type you trying to remove has'
        $script:DeleteTypePart2 = "name(s):`n`n"
        $script:DeleteTypePart3 = "`nYou need to remove name(s) contained in this type first."
        $script:DeleteNamePart1 = 'Name you trying to remove has'
        $script:DeleteNamePart2 = "purchase(Id):`n`n"
        $script:DeleteNamePart3 = "`n`nYou need to remove purchase(s) with this name first."
        #data output form
        $formDataOutput.Text = 'Data Input/Output Manager'
        $groupboxDataOutputNewPurchase.Text = 'New Purchase'
        $groupboxDataOutputTable.Text = 'Data Table'
        $groupboxQueryManager.Text = 'Query Manager'
        $labelDataOutputStores.Text = 'Stores'
        $labelDataOutputCategories.Text = 'Categories'
        $labelDataOutputKinds.Text = 'Kinds'
        $labelDataOutputTypes.Text = 'Types'
        $labelDataOutputNames.Text = 'Names'
        $labelDataOutputPrice.Text = 'Price'
        $labelDataOutputQuantity.Text = 'Quantity'
        $labelDataOutputDate.Text = 'Date'
        $buttonDataOutputAddPurchase.Text = 'Add Purchase'
        $buttonDataOutputDataManager.Text = 'Data Manager'
        $buttonDataOutputQueryNew.Text = 'New'
        $buttonDataOutputQueryLoad.Text = 'Load'
        $buttonDataOutputQueryEdit.Text = 'Edit'
        $buttonDataOutputQueryDelete.Text = 'Delete'
        $buttonDataOutputQueryToCsv.Text = 'Export to CSV'
        $buttonDataOutputMakeChart.Text = 'Make Chart'
        $script:DataOutputMinimize = 'Minimize this window'
        $script:DataOutputMakeChart = "In order to make charts you need to:`nHave input as two column data set.`nCriteria column need to have alias named Chart."
        $buttonOutputFormClose.Text = 'Close'
        $changeStoreForSelectedToolStripMenuItem.Text = 'Change Store for selected purchase'
        $makeCopyOfSelectedPurchaseWithCurrentDateToolStripMenuItem.Text = 'Make copy of selected purchase with current date'
        $script:ChangeDataOutputPurchasePart1 = 'You are about to change Store to'
        $script:ChangeDataOutputPurchasePart2 = ".`nFor record(s) with Purchase_Id"
        $script:ChangeDataOutputPurchasePart3 = ".`nSure you want to proceed?"
        $script:ChangeDataOutputPurchaseType = 'Information'
        $DataOutputRemoveSelectedToolStripMenuItem.Text = 'Remove selected purchase'
        $script:DeletePurchasePart1 = 'You are about to delete record(s) with Purchase_Id'
        $script:DeletePurchasePart2 = "permamently.`nSure you want to proceed?"
        $script:DeletePurchaseType = 'Warning'
        $script:CopyPurchasePart1 = 'You are about to make copy of record(s) with Purchase_Id'
        $script:CopyPurchasePart2 = "permamently.`nSure you want to proceed?"
        $script:CopyPurchaseType = 'Warning'
        $script:EditQuery = 'Sorry but you cannot edit default query'
        $script:EditQueryType = 'Information'
        $script:DeleteQueryPart1 = 'You are about to remove query with name'
        $script:DeleteQueryPart2 = "permamently.`nSure you want to proceed?"
        $script:DeleteQueryType = 'Warning'
        $script:DeleteQueryDefault = 'Sorry but you cannot delete default query'
        $script:DeleteQueryDefaultType = 'Information'
        #main form
        $formMyAccounting.Text = 'My Accounting'
        $buttonMainFormConnect.Text = 'Connect'
        $script:MyAccountingStateConnected = 'Connected'
        $script:MyAccountingStateDisconnected = 'Disconnected'
        $buttonMainFormConfigurationManager.Text = 'Configuration Manager'
        $script:ConnectionCheckErrorState = "Cannot connect to SQL Server.`nCheck connection configuration."
        $script:ConnectionCheckErrorStateType = 'Error'
        #query editor
        $script:QueryEditorModeNew = 'New'
        $script:QueryEditorModeEdit = 'Edit'
        $formQueryEditor.Text = "Query Editor ($script:QueryEditorMode)"
        $groupboxQueryEditorQueryName.Text = 'Query Name'
        $groupboxQueryEditorQueryText.Text = 'Query Text'
        $script:QueryExistsPart1 = 'Query with name'
        $script:QueryExistsPart2 = 'already exist'
        $script:QueryExistsType = 'Error'
        $buttonSaveAndLeaveQueryEditor.Text = 'Save and leave query editor'
        $buttonCloseQueryEditorWithoutSaving.Text = 'Close query editor without saving'
        $script:QuerySelectCheck = "Query must:`n- Begin with SELECT or WITH statement.`n- Have followed TSQL code."
        $script:QuerySelectCheckErrorType = 'Error'
        #charts manager
        $formDataCharts.Text = 'Charts Manager'
        $script:ChartsTitle = 'Charts for:'
        $formDataChartsSave.Text = 'Save chart picture to disk'
        $buttonDataChartsClose.Text = 'Close charts manager'
    }
}
function Set-DisplayColor
{
    param (
        [Parameter(Mandatory = $false)]
        [System.Windows.Forms.Form]$Form,
        [Parameter(Mandatory = $false)]
        [switch]$SaveToRegistry
    )
    if ($SaveToRegistry)
    {
        New-ItemProperty -Path "$script:RegistryPath\Configuration\Common" -Name DisplayColor -PropertyType String -Value $($comboboxDisplayColors.SelectedItem) -Force 
    }
    $Forms = $formMyAccounting, $formSQLServerConnectionConfiguration, $formDataManager, $formQueryEditor, $formDataOutput, $formDatabaseManager, $formDatabaseStatisticsForm, $formDataCharts
		
    foreach ($Form in $Forms)
    {
        $Form.BackColor = ((Get-ItemProperty -Path "$script:RegistryPath\Configuration\Common" -Name DisplayColor).DisplayColor)
    }
}
function Set-DisplayColorName
{
    $comboboxDisplayColors.Items.Clear()
    [System.Drawing.KnownColor].GetEnumValues() | ForEach-Object -Process {
        Load-ComboBox -ComboBox $comboboxDisplayColors -Items $_ -Append
    }
    $comboboxDisplayColors.SelectedItem = $comboboxDisplayColors.Items | Where-Object -FilterScript {
        $_ -eq $((Get-ItemProperty -Path "$script:RegistryPath\Configuration\Common" -Name DisplayColor).DisplayColor) 
    }
}
function Set-DataManagerEdit
{
    if ($comboboxStores.Items.Count -gt 0)
    {
        $buttonStoresEdit.Enabled = $true
    }
    else
    {
        $buttonStoresEdit.Enabled = $false
    }
		
    if ($comboboxCategories.Items.Count -gt 0)
    {
        $buttonCategoriesEdit.Enabled = $true
    }
    else
    {
        $buttonCategoriesEdit.Enabled = $false
    }
		
    if ($comboboxKinds.Items.Count -gt 0)
    {
        $buttonKindsEdit.Enabled = $true
    }
    else
    {
        $buttonKindsEdit.Enabled = $false
    }
		
    if ($comboboxTypes.Items.Count -gt 0)
    {
        $buttonTypesEdit.Enabled = $true
    }
    else
    {
        $buttonTypesEdit.Enabled = $false
    }
		
    if ($comboboxNames.Items.Count -gt 0)
    {
        $buttonNamesEdit.Enabled = $true
    }
    else
    {
        $buttonNamesEdit.Enabled = $false
    }
}
function Set-AddEditGroupbox
{
    Param (
        [Parameter(Mandatory = $true)]
        [system.Windows.Forms.GroupBox]$Groupbox,
			
        [Parameter(Mandatory = $true)]
        [system.Windows.Forms.ComboBox]$ComboBox,
			
        [Parameter(Mandatory = $true)]
        [system.Windows.Forms.TextBox]$Textbox,
        [Parameter(Mandatory = $false)]
        [system.Windows.Forms.TextBox]$Textbox1,
        [Parameter(Mandatory = $false)]
        [system.Windows.Forms.TextBox]$Textbox2,
			
        [Parameter(Mandatory = $true)]
        [system.Windows.Forms.Button]$Add,
			
        [Parameter(Mandatory = $true)]
        [system.Windows.Forms.Button]$Delete,
			
        [Parameter(Mandatory = $true)]
        [system.Windows.Forms.Button]$Edit,
			
        [Parameter(Mandatory = $true)]
        [system.Windows.Forms.Button]$ActionButton,
			
        [Parameter(Mandatory = $true)]
        [ValidateSet('Add', 'Edit')]
        [string]$Mode
    )
		
    if ($Groupbox.Visible -eq $false)
    {
        $Groupbox.Visible = $true
        if ($Mode -eq 'Add')
        {
            $ActionButton.Text = $script:ModeAddButton
            $Add.BackColor = 'ActiveCaption'
            $Delete.Enabled = $false
            $Edit.Enabled = $false
        }
        if ($Mode -eq 'Edit')
        {
            $ActionButton.Text = $script:ModeEditButton
            $Add.Enabled = $false
            $Delete.Enabled = $false
            $Edit.BackColor = 'ActiveCaption'
            $Textbox.Text = $ComboBox.SelectedItem -replace ' [(].*'
            $Textbox1.Text = $ComboBox.SelectedItem -replace '.*[(]' -replace '[)].*'
            $Textbox2.Text = $ComboBox.SelectedItem -replace '.*[)] '
        }
        $Textbox.Focus()
    }
    else
    {
        $Groupbox.Visible = $false
        $Add.BackColor = 'Control'
        $Edit.BackColor = 'Control'
        $Add.Enabled = $true
        $Delete.Enabled = $true
        $Edit.Enabled = $true
        $Textbox.Clear()
        if ($Textbox1) 
        {
            $Textbox1.Clear() 
        }
        if ($Textbox2) 
        {
            $Textbox2.Clear() 
        }
    }
}
function Set-EditDataCheck
{
    Param (
        [Parameter(Mandatory = $false)]
        [ValidateSet('Block', 'Allow')]
        [string]$Mode,
			
        [Parameter(Mandatory = $true)]
        [system.Windows.Forms.GroupBox]$Groupbox
    )
    BEGIN
    {
        if (-not $Mode)
        {
            if ($script:EditIsEnabled -eq 0)
            {
                $Mode = 'Block' 
            }
            if ($script:EditIsEnabled -eq 1)
            {
                $Mode = 'Allow' 
            }
        }
        $a = New-Object -TypeName System.Collections.ArrayList
        $a.Add($groupboxStores)
        $a.Add($groupboxCategories)
        $a.Add($groupboxKinds)
        $a.Add($groupboxTypes)
        $a.Add($groupboxNames)
        if ($Groupbox)
        {
            $a.Remove($Groupbox) 
        }
    }
    PROCESS
    {
        if ($Mode -eq 'Block')
        {
            $comboboxStores.Enabled = $false
            $comboboxCategories.Enabled = $false
            $comboboxKinds.Enabled = $false
            $comboboxTypes.Enabled = $false
            $comboboxNames.Enabled = $false
            foreach ($b in $a)
            {
                $b.Enabled = $false
            }
            $script:EditIsEnabled = 1
        }
        if ($Mode -eq 'Allow')
        {
            $comboboxStores.Enabled = $true
            $comboboxCategories.Enabled = $true
            $comboboxKinds.Enabled = $true
            $comboboxTypes.Enabled = $true
            $comboboxNames.Enabled = $true
            foreach ($b in $a)
            {
                $b.Enabled = $true
            }
            $script:EditIsEnabled = 0
            Set-Groupboxes
        }
    }
    END { }
}
function Set-Charts
{
    Param (
        [Parameter(Mandatory = $true)]
        [ValidateSet('Area', 'Bar', 'BoxPlot', 'Bubble', 'Candlestick', 'Column', 'Doughnut', 'ErrorBar', 'FastLine', 'FastPoint', 'Funnel', 'Kagi', 'Line', 'Pie', 'Point', 'PointAndFigure', 'Polar', 'Pyramid', 'Radar', 'Range', 'RangeBar', 'RangeColumn', 'Renko', 'Spline', 'SplineArea', 'SplineRange', 'StackedArea100', 'StackedBar', 'StackedBar100', 'StackedColumn', 'StackedColumn100', 'StepLine', 'Stock', 'ThreeLineBreak')]
        [string]$ChartType,
			
        [Parameter(Mandatory = $true)]
        [string]$Title
    )
    $Rows = @()
    foreach ($Row in $script:MyDataTable.Rows)
    {
        $Rows += $Row 
    }
    $Columns = @()
    foreach ($Column in $script:MyDataTable.Columns.ColumnName)
    {
        $Columns += $Column 
    }
    $ChartData = @()
    for ($r = -1; $r -lt ($Rows.Count - 1); $r++)
    {
        $obj = New-Object -TypeName System.Object
        for ($i = -1; $i -lt ($Columns.Count - 1); $i++)
        {
            $obj | Add-Member -MemberType NoteProperty -Name $Columns[$i] -Value ($Rows[$r].($Columns[$i]))
        }
        $obj | Add-Member -MemberType NoteProperty -Name Info -Value ("$($Rows[$r].(($obj|
                Get-Member -MemberType NoteProperty|
                Select-Object -ExpandProperty Name|
                Where-Object -FilterScript {
                $_ -eq 'Chart'
        }))) ($($Rows[$r].($Columns[$i])))")
        $ChartData += $obj
    }
    Clear-Chart -ChartControl $chart
    if ($ChartType -eq 'Pie')
    {
        foreach ($Series in $chart.Series)
        {
            $Series.CustomProperties = 'PieDrawingStyle=Concave'
        }
    }
    if ($checkboxDataCharts3D.Checked)
    {
        Load-Chart -ChartControl $chart -ChartType $ChartType -Title $Title -XPoints $ChartData.Info -YPoints $ChartData.$($ChartData |
            Get-Member -MemberType NoteProperty |
            Select-Object -ExpandProperty Name |
            Where-Object -FilterScript {
                $_ -notin ('Info', 'Chart') 
        }) -Append -Enable3D
    }
    else
    {
        Load-Chart -ChartControl $chart -ChartType $ChartType -Title $Title -XPoints $ChartData.Info -YPoints $ChartData.$($ChartData |
            Get-Member -MemberType NoteProperty |
            Select-Object -ExpandProperty Name |
            Where-Object -FilterScript {
                $_ -notin ('Info', 'Chart') 
        }) -Append -Disable3D
    }
}#endregion Source: Globals.ps1

#region Source: DataOutputForm.psf
function Call-DataOutputForm_psf
{
    #----------------------------------------------
    #region Import the Assemblies
    #----------------------------------------------
    [void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    [void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    [void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    [void][reflection.assembly]::Load('System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    #endregion Import Assemblies

    #----------------------------------------------
    #region Generated Form Objects
    #----------------------------------------------
    [System.Windows.Forms.Application]::EnableVisualStyles()
    $formDataOutput = New-Object -TypeName 'System.Windows.Forms.Form'
    $groupboxDataOutputTable = New-Object -TypeName 'System.Windows.Forms.GroupBox'
    $datagridviewDataOutput = New-Object -TypeName 'System.Windows.Forms.DataGridView'
    $groupboxQueryManager = New-Object -TypeName 'System.Windows.Forms.GroupBox'
    $buttonDataOutputMakeChart = New-Object -TypeName 'System.Windows.Forms.Button'
    $buttonDataOutputQueryToCsv = New-Object -TypeName 'System.Windows.Forms.Button'
    $buttonDataOutputQueryLoad = New-Object -TypeName 'System.Windows.Forms.Button'
    $buttonDataOutputQueryDelete = New-Object -TypeName 'System.Windows.Forms.Button'
    $buttonDataOutputQueryNew = New-Object -TypeName 'System.Windows.Forms.Button'
    $comboboxDataOutputQueries = New-Object -TypeName 'System.Windows.Forms.ComboBox'
    $buttonDataOutputQueryEdit = New-Object -TypeName 'System.Windows.Forms.Button'
    $groupboxDataOutputControls = New-Object -TypeName 'System.Windows.Forms.GroupBox'
    $buttonOutputFormClose = New-Object -TypeName 'System.Windows.Forms.Button'
    $groupboxDataOutputNewPurchase = New-Object -TypeName 'System.Windows.Forms.GroupBox'
    $buttonDataOutputMinimize = New-Object -TypeName 'System.Windows.Forms.Button'
    $labelDataOutputDate = New-Object -TypeName 'System.Windows.Forms.Label'
    $labelDataOutputPrice = New-Object -TypeName 'System.Windows.Forms.Label'
    $labelDataOutputQuantity = New-Object -TypeName 'System.Windows.Forms.Label'
    $labelDataOutputNames = New-Object -TypeName 'System.Windows.Forms.Label'
    $labelDataOutputTypes = New-Object -TypeName 'System.Windows.Forms.Label'
    $labelDataOutputKinds = New-Object -TypeName 'System.Windows.Forms.Label'
    $labelDataOutputCategories = New-Object -TypeName 'System.Windows.Forms.Label'
    $labelDataOutputStores = New-Object -TypeName 'System.Windows.Forms.Label'
    $buttonDataOutputDataManager = New-Object -TypeName 'System.Windows.Forms.Button'
    $datetimepickerDataOutputDate = New-Object -TypeName 'System.Windows.Forms.DateTimePicker'
    $numericupdownDataOutputPrice = New-Object -TypeName 'System.Windows.Forms.NumericUpDown'
    $comboboxDataOutputTypes = New-Object -TypeName 'System.Windows.Forms.ComboBox'
    $buttonDataOutputAddPurchase = New-Object -TypeName 'System.Windows.Forms.Button'
    $comboboxDataOutputStores = New-Object -TypeName 'System.Windows.Forms.ComboBox'
    $numericupdownDataOutputQuantity = New-Object -TypeName 'System.Windows.Forms.NumericUpDown'
    $comboboxDataOutputCategories = New-Object -TypeName 'System.Windows.Forms.ComboBox'
    $comboboxDataOutputNames = New-Object -TypeName 'System.Windows.Forms.ComboBox'
    $comboboxDataOutputKinds = New-Object -TypeName 'System.Windows.Forms.ComboBox'
    $timerOpenDataManager = New-Object -TypeName 'System.Windows.Forms.Timer'
    $timerDataOutputConnectionState = New-Object -TypeName 'System.Windows.Forms.Timer'
    $contextmenustripDataOutput = New-Object -TypeName 'System.Windows.Forms.ContextMenuStrip'
    $DataOutputRemoveSelectedToolStripMenuItem = New-Object -TypeName 'System.Windows.Forms.ToolStripMenuItem'
    $openfiledialogDataOutputQueryLoad = New-Object -TypeName 'System.Windows.Forms.OpenFileDialog'
    $TimerInput = New-Object -TypeName 'System.Windows.Forms.Timer'
    $tooltipDataOutput = New-Object -TypeName 'System.Windows.Forms.ToolTip'
    $toolstripseparator1 = New-Object -TypeName 'System.Windows.Forms.ToolStripSeparator'
    $changeStoreForSelectedToolStripMenuItem = New-Object -TypeName 'System.Windows.Forms.ToolStripMenuItem'
    $ChangeStoretoolstripcombobox = New-Object -TypeName 'System.Windows.Forms.ToolStripComboBox'
    $makeCopyOfSelectedPurchaseWithCurrentDateToolStripMenuItem = New-Object -TypeName 'System.Windows.Forms.ToolStripMenuItem'
    $toolstripseparator2 = New-Object -TypeName 'System.Windows.Forms.ToolStripSeparator'
    $timerOpenCharts = New-Object -TypeName 'System.Windows.Forms.Timer'
    $timerOpenQueryEditor = New-Object -TypeName 'System.Windows.Forms.Timer'
    $InitialFormWindowState = New-Object -TypeName 'System.Windows.Forms.FormWindowState'
    #endregion Generated Form Objects

    #----------------------------------------------
    # User Generated Script
    #----------------------------------------------
    $formDataOutput_Load = {
        $timerDataOutputConnectionState.Start()
        $script:FormsOpen = 1
        Set-MyDataGridView -Query 'select * from MyData' -DataGridView $datagridviewDataOutput
        Get-SQLScripts -SelectedItem 'MyData (View)'
        Set-Comboboxes -Item $comboboxDataOutputStores -Table Stores -Property Stores -Query "select Name + ' (' + Address + ') ' + City AS Stores from Stores"
        Set-Comboboxes -Item $comboboxDataOutputCategories -Table Categories -Property CategoryName
        Set-DataOutputComboboxes
        Set-Language
        Set-DisplayColor
        $tooltipDataOutput.Active = $true
        $tooltipDataOutput.SetToolTip($buttonDataOutputMinimize, "$script:DataOutputMinimize")
    }
	
    function Load-DataGridView
    {
        Param (
            [ValidateNotNull()]
            [Parameter(Mandatory = $true)]
            [System.Windows.Forms.DataGridView]$DataGridView,
            [ValidateNotNull()]
            [Parameter(Mandatory = $true)]
            $Item,
            [Parameter(Mandatory = $false)]
            [string]$DataMember
        )
        $DataGridView.SuspendLayout()
        $DataGridView.DataMember = $DataMember
		
        if ($Item -is [System.ComponentModel.IListSource]`
        -or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView])
        {
            $DataGridView.DataSource = $Item
        }
        else
        {
            $array = New-Object -TypeName System.Collections.ArrayList
			
            if ($Item -is [System.Collections.IList])
            {
                $array.AddRange($Item)
            }
            else
            {
                $array.Add($Item)
            }
            $DataGridView.DataSource = $array
        }
		
        $DataGridView.ResumeLayout()
    }
	
    $datagridviewDataOutput_DataError = [System.Windows.Forms.DataGridViewDataErrorEventHandler]{
        {
            'Found Error' 
        }
    }
	
    function Load-ComboBox
    {
        Param (
            [ValidateNotNull()]
            [Parameter(Mandatory = $true)]
            [System.Windows.Forms.ComboBox]$ComboBox,
            [ValidateNotNull()]
            [Parameter(Mandatory = $true)]
            $Items,
            [Parameter(Mandatory = $false)]
            [string]$DisplayMember,
            [switch]$Append
        )
		
        if (-not $Append)
        {
            $ComboBox.Items.Clear()
        }
		
        if ($Items -is [Object[]])
        {
            $ComboBox.Items.AddRange($Items)
        }
        elseif ($Items -is [Array])
        {
            $ComboBox.BeginUpdate()
            foreach ($obj in $Items)
            {
                $ComboBox.Items.Add($obj)
            }
            $ComboBox.EndUpdate()
        }
        else
        {
            $ComboBox.Items.Add($Items)
        }
		
        $ComboBox.DisplayMember = $DisplayMember
    }
    $buttonOutputFormClose_Click = {
        $timerOpenDataManager.Stop()
        $timerDataOutputConnectionState.Stop()
        $script:FormsOpen = 0
        $formDataOutput.Close()
    }
	
    $buttonDataOutputAddPurchase_Click = {
        if ($comboboxDataOutputNames.SelectedItem -ne '' -and $comboboxDataOutputStores.SelectedItem -ne '' -and $numericupdownDataOutputPrice.Value -ne 0)
        {
            Invoke-DatabaseTable @GetDatabaseTableParams -Query "insert into Purchases(Category_Id, Kind_Id, Type_Id, Name_Id, Price, Quantity, Store_Id, BuyDate)values((select Category_Id from Categories where CategoryName = N'$($comboboxDataOutputCategories.SelectedItem)'),(select Kind_Id from Kinds where KindName = N'$($comboboxDataOutputKinds.SelectedItem)'	and Category_Id = (	select Category_Id from Categories where CategoryName = N'$($comboboxDataOutputCategories.SelectedItem)')),(select Type_Id from Types where TypeName = N'$($comboboxDataOutputTypes.SelectedItem)' and Kind_Id = (select Kind_Id from Kinds where KindName = N'$($comboboxDataOutputKinds.SelectedItem)' and Category_Id = (select Category_Id from Categories where CategoryName = N'$($comboboxDataOutputCategories.SelectedItem)'))),(select Name_Id from Names where Name = N'$($comboboxDataOutputNames.SelectedItem)' and Type_Id =(select Type_Id from Types where TypeName = N'$($comboboxDataOutputTypes.SelectedItem)' and Kind_Id = (select Kind_Id from Kinds where KindName = N'$($comboboxDataOutputKinds.SelectedItem)' and Category_Id = (select Category_Id from Categories where CategoryName = N'$($comboboxDataOutputCategories.SelectedItem)')))),$($numericupdownDataOutputPrice.Value),$($numericupdownDataOutputQuantity.Value),(select Store_Id from Stores where Name = N'$((($comboboxDataOutputStores.SelectedItem) -replace '[(].*').Trim())')' and Address = N'$(((($comboboxDataOutputStores.SelectedItem) -replace '.*[(]') -replace '[)].*').Trim())' and City = N'$(($comboboxDataOutputStores.SelectedItem) -replace '.*\w+[()]+\s')'),'$($datetimepickerDataOutputDate.Value)')"
            #Set-MyDataGridView -Query $(Get-ItemProperty -Path "$script:RegistryPath\Queries" -Name $($comboboxDataOutputQueries.SelectedItem)).$($comboboxDataOutputQueries.SelectedItem) -DataGridView $datagridviewDataOutput
            Set-MyDataGridView -Query 'select * from MyData' -DataGridView $datagridviewDataOutput
            Get-SQLScripts -SelectedItem 'MyData (View)'
            $numericupdownDataOutputPrice.Value = $numericupdownDataOutputPrice.Minimum
            $numericupdownDataOutputQuantity.Value = 1
        }
        else
        {
            $TimerInput.Start()
            $numericupdownDataOutputPrice.BackColor = 'LightCoral'
            $numericupdownDataOutputPrice.Focus()
        }
    }
	
    $comboboxDataOutputQueries_SelectedIndexChanged = {
        Set-MyDataGridView -Query $(Get-ItemProperty -Path "$script:RegistryPath\Queries" -Name $($comboboxDataOutputQueries.SelectedItem)).$($comboboxDataOutputQueries.SelectedItem) -DataGridView $datagridviewDataOutput
    }
	
    $comboboxDataOutputCategories_SelectedIndexChanged = {
        $comboboxDataOutputKinds.Items.Clear()
        $comboboxDataOutputTypes.Items.Clear()
        $comboboxDataOutputNames.Items.Clear()
        Set-Comboboxes -Item $comboboxDataOutputKinds -Table Kinds -Property KindName -Query "select * from Kinds where Category_Id = (select Category_Id from Categories where CategoryName = N'$($comboboxDataOutputCategories.SelectedItem)')"
        Set-DataOutputComboboxes
    }
	
    $comboboxDataOutputKinds_SelectedIndexChanged = {
        $comboboxDataOutputTypes.Items.Clear()
        $comboboxDataOutputNames.Items.Clear()
        Set-Comboboxes -Item $comboboxDataOutputTypes -Table Types -Property TypeName -Query "select * from Types where Kind_Id = (select Kind_Id from Kinds where KindName = N'$($comboboxDataOutputKinds.SelectedItem)' and Category_Id = (select Category_Id from Categories where CategoryName = N'$($comboboxDataOutputCategories.SelectedItem)'))"
        Set-DataOutputComboboxes
    }
	
    $comboboxDataOutputTypes_SelectedIndexChanged = {
        $comboboxDataOutputNames.Items.Clear()
        Set-Comboboxes -Item $comboboxDataOutputNames -Table Names -Property Name -Query "select * from Names where Type_Id = (select Type_Id from Types where TypeName = N'$($comboboxDataOutputTypes.SelectedItem)' and Kind_Id = (select Kind_Id from Kinds where KindName = N'$($comboboxDataOutputKinds.SelectedItem)' and Category_Id = (select Category_Id from Categories where CategoryName = N'$($comboboxDataOutputCategories.SelectedItem)')))"
        Set-DataOutputComboboxes
    }
	
    $buttonDataOutputDataManager_Click = {
        $script:LockedStores = $comboboxDataOutputStores.SelectedItem
        $script:LockedCategories = $comboboxDataOutputCategories.SelectedItem
        $script:LockedKinds = $comboboxDataOutputKinds.SelectedItem
        $script:LockedTypes = $comboboxDataOutputTypes.SelectedItem
        $script:LockedNames = $comboboxDataOutputNames.SelectedItem
        $groupboxQueryManager.Enabled = $false
        $script:DataManagerOpen = 1
        $timerOpenDataManager.Start()
        Call-DataManagerForm_psf
    }
	
    $timerOpenDataManager_Tick = {
        if ($script:DataManagerOpen -eq 0)
        {
            Set-Comboboxes -Item $comboboxDataOutputStores -Table Stores -Property Stores -Query "select Name + ' (' + Address + ') ' + City AS Stores from Stores"
            Set-Comboboxes -Item $comboboxDataOutputCategories -Table Categories -Property CategoryName
            Set-DataOutputComboboxes
            $numericupdownDataOutputPrice.Value = $numericupdownDataOutputPrice.Minimum
            $comboboxDataOutputStores.SelectedItem = $script:LockedStores
            $comboboxDataOutputCategories.SelectedItem = $script:LockedCategories
            $comboboxDataOutputKinds.SelectedItem = $script:LockedKinds
            $comboboxDataOutputTypes.SelectedItem = $script:LockedTypes
            $comboboxDataOutputNames.SelectedItem = $script:LockedNames
            $groupboxQueryManager.Enabled = $true
            $timerOpenDataManager.Stop()
        }
    }
	
    $timerDataOutputConnectionState_Tick = {
        if ($script:ConnectionState -eq 0)
        {
            $timerDataOutputConnectionState.Stop()
            $formDataOutput.Close()
        }
    }
	
    $buttonDataOutputQueryEdit_Click = {
        $groupboxQueryManager.Enabled = $false
        if ($comboboxDataOutputQueries.SelectedItem -ne 'MyData (View)')
        {
            $script:QueryEditerOpen = 1
            $script:QueryEditing = $($comboboxDataOutputQueries.SelectedItem)
            $script:QueryEditorMode = $script:QueryEditorModeEdit
            $script:QueryCurrentSelection = $($comboboxDataOutputQueries.SelectedItem)
            $timerOpenQueryEditor.Start()
            Call-QueryEditor_psf
        }
        else
        {
            [void][System.Windows.Forms.MessageBox]::Show("$script:EditQuery ""$($comboboxDataOutputQueries.SelectedItem)"".", $script:EditQueryType)
        }
        $groupboxQueryManager.Enabled = $true
    }
	
    $DataOutputRemoveSelectedToolStripMenuItem_Click = {
        $Purchase_Ids = @()
        ($datagridviewDataOutput.SelectedRows | Select-Object -ExpandProperty Index) | ForEach-Object -Process {
            $Purchase_Ids += $($script:MyDataTable.Purchase_Id[$_])
        }
        if ([System.Windows.Forms.MessageBox]::Show("$script:DeletePurchasePart1 $(($Purchase_Ids | Sort-Object) -join ', ') $script:DeletePurchasePart2", $script:DeletePurchaseType, [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
        {
            Invoke-DatabaseTable @GetDatabaseTableParams -Query "delete from Purchases where Purchase_Id in ($(($Purchase_Ids | Sort-Object) -join ', '))"
            Set-MyDataGridView -Query $(Get-ItemProperty -Path "$script:RegistryPath\Queries" -Name $($comboboxDataOutputQueries.SelectedItem)).$($comboboxDataOutputQueries.SelectedItem) -DataGridView $datagridviewDataOutput
            $contextmenustripDataOutput.Close()
        }
    }
	
    $contextmenustripDataOutput_Opening = [System.ComponentModel.CancelEventHandler]{
        if ($comboboxDataOutputQueries.SelectedItem -eq 'MyData (View)' -and $datagridviewDataOutput.RowCount -gt 0)
        {
            $contextmenustripDataOutput.Enabled = $true
            $StoresList = Invoke-DatabaseTable @GetDatabaseTableParams -Query "select Name + ' (' + Address + ') ' + City as Name from Stores" | Select-Object -ExpandProperty Name
            $ChangeStoretoolstripcombobox.Items.Clear()
            foreach ($Store in $StoresList) 
            {
                $ChangeStoretoolstripcombobox.Items.Add($Store)
            }
            $ChangeStoretoolstripcombobox.SelectedItem = $ChangeStoretoolstripcombobox.Items[0]
        }
        else
        {
            $contextmenustripDataOutput.Enabled = $false
        }
    }
	
    $buttonDataOutputQueryDelete_Click = {
        $groupboxQueryManager.Enabled = $false
        if ([System.Windows.Forms.MessageBox]::Show("$script:DeleteQueryPart1 ""$($comboboxDataOutputQueries.SelectedItem)""$script:DeleteQueryPart2", $script:DeleteQueryType, [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
        {
            if ($comboboxDataOutputQueries.SelectedItem -ne 'MyData (View)')
            {
                Remove-ItemProperty -Path "$script:RegistryPath\Queries" -Name $($comboboxDataOutputQueries.SelectedItem) -Force
                Get-SQLScripts -SelectedItem 'MyData (View)'
            }
            else
            {
                [void][System.Windows.Forms.MessageBox]::Show("$script:DeleteQueryDefault ""$($comboboxDataOutputQueries.SelectedItem)"".", $script:DeleteQueryDefaultType)
            }
        }
        $groupboxQueryManager.Enabled = $true
    }
	
    $buttonDataOutputQueryLoad_Click = {
        $groupboxQueryManager.Enabled = $false
        $timerOpenQueryEditor.Start()
        if ($openfiledialogDataOutputQueryLoad.ShowDialog() -eq 'OK')
        {
            if ((Get-ItemProperty -Path "$script:RegistryPath\Queries" -Name $($openfiledialogDataOutputQueryLoad.SafeFileName -replace '[.].*')).$($openfiledialogDataOutputQueryLoad.SafeFileName -replace '[.].*') -eq $null)
            {
                New-ItemProperty -Path "$script:RegistryPath\Queries" -Name $($openfiledialogDataOutputQueryLoad.SafeFileName -replace '[.].*') -PropertyType String -Value $(Get-Content -Path $openfiledialogDataOutputQueryLoad.FileName) -Force
                Get-SQLScripts -SelectedItem $($openfiledialogDataOutputQueryLoad.SafeFileName -replace '[.].*')
                $groupboxQueryManager.Enabled = $true
            }
            else
            {
                [void][System.Windows.Forms.MessageBox]::Show("Query with name ""$($openfiledialogDataOutputQueryLoad.SafeFileName -replace '[.].*')"" already exist.", 'Error')
                $groupboxQueryManager.Enabled = $true
            }
        }
        else
        {
            $groupboxQueryManager.Enabled = $true 
        }
    }
	
    $datetimepickerDataOutputDate_PreviewKeyDown = [System.Windows.Forms.PreviewKeyDownEventHandler]{
        if ($_.KeyCode -eq [System.Windows.Forms.Keys]::Enter)
        {
            &$buttonDataOutputAddPurchase_Click
        }
    }
	
    $timerInput_Tick = {
        $TimerInput.Stop()
        $numericupdownDataOutputPrice.BackColor = 'Window'
    }
	
    $numericupdownDataOutputPrice_KeyDown = [System.Windows.Forms.KeyEventHandler]{
        if ($_.KeyCode -eq [System.Windows.Forms.Keys]::Enter)
        {
            &$buttonDataOutputAddPurchase_Click
        }
    }
	
    $numericupdownDataOutputQuantity_KeyDown = [System.Windows.Forms.KeyEventHandler]{
        if ($_.KeyCode -eq [System.Windows.Forms.Keys]::Enter)
        {
            &$buttonDataOutputAddPurchase_Click
        }
    }
    $buttonDataOutputQueryNew_Click = {
        $script:QueryEditerOpen = 1
        $script:QueryEditorMode = $script:QueryEditorModeNew
        $script:QueryCurrentSelection = $($comboboxDataOutputQueries.SelectedItem)
        $groupboxQueryManager.Enabled = $false
        $timerOpenQueryEditor.Start()
        Call-QueryEditor_psf
    }
	
    $buttonDataOutputQueryToCsv_Click = {
        $DataToCSV = "Generated at $(Get-Date -Format 'yyyyMMdd-HHmmss') Database '$($script:SQLServerDatabase)' Query '$($comboboxDataOutputQueries.SelectedItem)'.csv"
        $datagridviewDataOutput.Rows |
        Select-Object -ExpandProperty DataBoundItem |
        Export-Csv $DataToCSV -Encoding UTF8 -NoTypeInformation -Force
        Invoke-Item $DataToCSV
    }
	
    $buttonDataOutputMinimize_Click = {
        $formDataOutput.WindowState = 'Minimized'
    }
    $ChangeStoretoolstripcombobox_DropDownClosed = {
        $Purchase_Ids = @()
        ($datagridviewDataOutput.SelectedRows | Select-Object -ExpandProperty Index) | ForEach-Object -Process {
            $Purchase_Ids += $($script:MyDataTable.Purchase_Id[$_])
        }
        if([System.Windows.Forms.MessageBox]::Show("$script:ChangeDataOutputPurchasePart1 $($ChangeStoretoolstripcombobox.SelectedItem)$script:ChangeDataOutputPurchasePart2 $(($Purchase_Ids | Sort-Object) -join ', ') $script:ChangeDataOutputPurchasePart3", $script:ChangeDataOutputPurchaseType,[System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
        {
            Invoke-DatabaseTable @GetDatabaseTableParams -Query "update Purchases set Store_Id = (select Store_Id from Stores where Name = N'$((($ChangeStoretoolstripcombobox.SelectedItem) -replace '[(].*').Trim())')' and Address = N'$(((($ChangeStoretoolstripcombobox.SelectedItem) -replace '.*[(]') -replace '[)].*').Trim())' and City = N'$(($ChangeStoretoolstripcombobox.SelectedItem) -replace '.*\w+[()]+\s')') where Purchase_Id in ($(($Purchase_Ids | Sort-Object) -join ', '))"
            Set-MyDataGridView -Query $(Get-ItemProperty -Path "$script:RegistryPath\Queries" -Name $($comboboxDataOutputQueries.SelectedItem)).$($comboboxDataOutputQueries.SelectedItem) -DataGridView $datagridviewDataOutput
            $contextmenustripDataOutput.Close()
        }
    }
	
    $makeCopyOfSelectedPurchaseWithCurrentDateToolStripMenuItem_Click = {
        $Purchase_Ids = @()
        ($datagridviewDataOutput.SelectedRows | Select-Object -ExpandProperty Index) | ForEach-Object -Process {
            $Purchase_Ids += $($script:MyDataTable.Purchase_Id[$_])
        }
        if ([System.Windows.Forms.MessageBox]::Show("$script:CopyPurchasePart1 $(($Purchase_Ids | Sort-Object) -join ', ') $script:CopyPurchasePart2", $script:CopyPurchaseType, [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
        {
            foreach ($Purchase_Id in $Purchase_Ids)
            {
                Invoke-DatabaseTable @GetDatabaseTableParams -Query @"
insert into Purchases(BuyDate,Quantity,Price,Store_Id,Category_Id,Kind_Id,Type_Id,Name_Id)
values(
getdate()
,(select Quantity from Purchases where Purchase_Id = $Purchase_Id)
,(select Price from Purchases where Purchase_Id = $Purchase_Id)
,(select Store_Id from Purchases where Purchase_Id = $Purchase_Id)
,(select Category_Id from Purchases where Purchase_Id = $Purchase_Id)
,(select Kind_Id from Purchases where Purchase_Id = $Purchase_Id)
,(select Type_Id from Purchases where Purchase_Id = $Purchase_Id)
,(select Name_Id from Purchases where Purchase_Id = $Purchase_Id)
)
"@
            }
            Set-MyDataGridView -Query $(Get-ItemProperty -Path "$script:RegistryPath\Queries" -Name $($comboboxDataOutputQueries.SelectedItem)).$($comboboxDataOutputQueries.SelectedItem) -DataGridView $datagridviewDataOutput
            $contextmenustripDataOutput.Close()
        }
    }
	
    $buttonDataOutputMakeChart_Click = {
        $groupboxQueryManager.Enabled = $false
        $script:ChartsManagerOpen = 1
        $script:ChartsManagerItem = $comboboxDataOutputQueries.SelectedItem
        $timerOpenCharts.Start()
        Call-DataOutputCharts_psf
    }
	
    $comboboxDataOutputQueries_MouseEnter = {
        $tooltipDataOutput.SetToolTip($comboboxDataOutputQueries, $(Get-ItemProperty -Path "$script:RegistryPath\Queries" -Name $($comboboxDataOutputQueries.SelectedItem)).$($comboboxDataOutputQueries.SelectedItem))
    }
	
    $buttonDataOutputMakeChart_MouseEnter = {
        $tooltipDataOutput.SetToolTip($buttonDataOutputMakeChart, $script:DataOutputMakeChart)
    }
	
    $timerOpenCharts_Tick = {
        if ($script:ChartsManagerOpen -eq 0)
        {
            $groupboxQueryManager.Enabled = $true
            $comboboxDataOutputQueries.SelectedItem = $script:ChartsManagerItem
            $timerOpenCharts.Stop()
        }
    }
	
    $timerOpenQueryEditor_Tick = {
        if ($script:QueryEditerOpen -eq 0)
        {
            do
            {
                Start-Sleep -Milliseconds 100
            }
            while ((Get-ItemProperty -Path "$script:RegistryPath\Queries").$script:NewQuery -eq $null)
            $groupboxQueryManager.Enabled = $true
            Get-SQLScripts -SelectedItem $script:NewQuery
            Set-DataOutputComboboxes
            $timerOpenQueryEditor.Stop()
        }
    }
    # --End User Generated Script--
    #----------------------------------------------
    #region Generated Events
    #----------------------------------------------
	
    $Form_StateCorrection_Load = 
    {
        #Correct the initial state of the form to prevent the .Net maximized form issue
        $formDataOutput.WindowState = $InitialFormWindowState
    }
	
    $Form_StoreValues_Closing = 
    {
        #Store the control values
        $script:DataOutputForm_comboboxDataOutputQueries_SelectedItem = $comboboxDataOutputQueries.SelectedItems
        $script:DataOutputForm_datetimepickerDataOutputDate = $datetimepickerDataOutputDate.Value
        $script:DataOutputForm_numericupdownDataOutputPrice = $numericupdownDataOutputPrice.Value
        $script:DataOutputForm_comboboxDataOutputTypes_SelectedItem = $comboboxDataOutputTypes.SelectedItems
        $script:DataOutputForm_comboboxDataOutputStores_SelectedItem = $comboboxDataOutputStores.SelectedItems
        $script:DataOutputForm_numericupdownDataOutputQuantity = $numericupdownDataOutputQuantity.Value
        $script:DataOutputForm_comboboxDataOutputCategories_SelectedItem = $comboboxDataOutputCategories.SelectedItems
        $script:DataOutputForm_comboboxDataOutputNames_SelectedItem = $comboboxDataOutputNames.SelectedItems
        $script:DataOutputForm_comboboxDataOutputKinds_SelectedItem = $comboboxDataOutputKinds.SelectedItems
    }

	
    $Form_Cleanup_FormClosed = 
    {
        #Remove all event handlers from the controls
        try
        {
            $datagridviewDataOutput.remove_DataError($datagridviewDataOutput_DataError)
            $buttonDataOutputMakeChart.remove_Click($buttonDataOutputMakeChart_Click)
            $buttonDataOutputMakeChart.remove_MouseEnter($buttonDataOutputMakeChart_MouseEnter)
            $buttonDataOutputQueryToCsv.remove_Click($buttonDataOutputQueryToCsv_Click)
            $buttonDataOutputQueryLoad.remove_Click($buttonDataOutputQueryLoad_Click)
            $buttonDataOutputQueryDelete.remove_Click($buttonDataOutputQueryDelete_Click)
            $buttonDataOutputQueryNew.remove_Click($buttonDataOutputQueryNew_Click)
            $comboboxDataOutputQueries.remove_SelectedIndexChanged($comboboxDataOutputQueries_SelectedIndexChanged)
            $comboboxDataOutputQueries.remove_MouseEnter($comboboxDataOutputQueries_MouseEnter)
            $buttonDataOutputQueryEdit.remove_Click($buttonDataOutputQueryEdit_Click)
            $buttonOutputFormClose.remove_Click($buttonOutputFormClose_Click)
            $buttonDataOutputMinimize.remove_Click($buttonDataOutputMinimize_Click)
            $buttonDataOutputDataManager.remove_Click($buttonDataOutputDataManager_Click)
            $datetimepickerDataOutputDate.remove_PreviewKeyDown($datetimepickerDataOutputDate_PreviewKeyDown)
            $numericupdownDataOutputPrice.remove_KeyDown($numericupdownDataOutputPrice_KeyDown)
            $comboboxDataOutputTypes.remove_SelectedIndexChanged($comboboxDataOutputTypes_SelectedIndexChanged)
            $buttonDataOutputAddPurchase.remove_Click($buttonDataOutputAddPurchase_Click)
            $numericupdownDataOutputQuantity.remove_KeyDown($numericupdownDataOutputQuantity_KeyDown)
            $comboboxDataOutputCategories.remove_SelectedIndexChanged($comboboxDataOutputCategories_SelectedIndexChanged)
            $comboboxDataOutputKinds.remove_SelectedIndexChanged($comboboxDataOutputKinds_SelectedIndexChanged)
            $formDataOutput.remove_Load($formDataOutput_Load)
            $timerOpenDataManager.remove_Tick($timerOpenDataManager_Tick)
            $timerDataOutputConnectionState.remove_Tick($timerDataOutputConnectionState_Tick)
            $contextmenustripDataOutput.remove_Opening($contextmenustripDataOutput_Opening)
            $DataOutputRemoveSelectedToolStripMenuItem.remove_Click($DataOutputRemoveSelectedToolStripMenuItem_Click)
            $TimerInput.remove_Tick($timerInput_Tick)
            $ChangeStoretoolstripcombobox.remove_DropDownClosed($ChangeStoretoolstripcombobox_DropDownClosed)
            $makeCopyOfSelectedPurchaseWithCurrentDateToolStripMenuItem.remove_Click($makeCopyOfSelectedPurchaseWithCurrentDateToolStripMenuItem_Click)
            $timerOpenCharts.remove_Tick($timerOpenCharts_Tick)
            $timerOpenQueryEditor.remove_Tick($timerOpenQueryEditor_Tick)
            $formDataOutput.remove_Load($Form_StateCorrection_Load)
            $formDataOutput.remove_Closing($Form_StoreValues_Closing)
            $formDataOutput.remove_FormClosed($Form_Cleanup_FormClosed)
        }
        catch [Exception]
        {
 
        }
    }
    #endregion Generated Events

    #----------------------------------------------
    #region Generated Form Code
    #----------------------------------------------
    $formDataOutput.SuspendLayout()
    $groupboxDataOutputTable.SuspendLayout()
    $groupboxQueryManager.SuspendLayout()
    $groupboxDataOutputControls.SuspendLayout()
    $groupboxDataOutputNewPurchase.SuspendLayout()
    $numericupdownDataOutputPrice.BeginInit()
    $numericupdownDataOutputQuantity.BeginInit()
    #
    # formDataOutput
    #
    $formDataOutput.Controls.Add($groupboxDataOutputTable)
    $formDataOutput.Controls.Add($groupboxQueryManager)
    $formDataOutput.Controls.Add($groupboxDataOutputControls)
    $formDataOutput.Controls.Add($groupboxDataOutputNewPurchase)
    $formDataOutput.CancelButton = $buttonOutputFormClose
    $formDataOutput.ClientSize = '784, 662'
    $formDataOutput.ControlBox = $false
    $formDataOutput.Name = 'formDataOutput'
    $formDataOutput.StartPosition = 'CenterScreen'
    $formDataOutput.Text = 'Data Input/Output Manager'
    $formDataOutput.WindowState = 'Maximized'
    $formDataOutput.add_Load($formDataOutput_Load)
    #
    # groupboxDataOutputTable
    #
    $groupboxDataOutputTable.Controls.Add($datagridviewDataOutput)
    $groupboxDataOutputTable.Dock = 'Fill'
    $groupboxDataOutputTable.Location = '0, 161'
    $groupboxDataOutputTable.Name = 'groupboxDataOutputTable'
    $groupboxDataOutputTable.Size = '784, 387'
    $groupboxDataOutputTable.TabIndex = 0
    $groupboxDataOutputTable.TabStop = $false
    $groupboxDataOutputTable.Text = 'Data Table'
    #
    # datagridviewDataOutput
    #
    $datagridviewDataOutput.AllowUserToAddRows = $false
    $datagridviewDataOutput.AllowUserToDeleteRows = $false
    $datagridviewDataOutput.AllowUserToResizeColumns = $false
    $datagridviewDataOutput.AllowUserToResizeRows = $false
    $System_Windows_Forms_DataGridViewCellStyle_1 = New-Object -TypeName 'System.Windows.Forms.DataGridViewCellStyle'
    $System_Windows_Forms_DataGridViewCellStyle_1.BackColor = 'Gainsboro'
    $datagridviewDataOutput.AlternatingRowsDefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_1
    $datagridviewDataOutput.AutoSizeColumnsMode = 'Fill'
    $datagridviewDataOutput.AutoSizeRowsMode = 'AllCells'
    $datagridviewDataOutput.ColumnHeadersHeightSizeMode = 'AutoSize'
    $datagridviewDataOutput.ContextMenuStrip = $contextmenustripDataOutput
    $datagridviewDataOutput.Cursor = 'Hand'
    $datagridviewDataOutput.Dock = 'Fill'
    $datagridviewDataOutput.Location = '3, 16'
    $datagridviewDataOutput.Name = 'datagridviewDataOutput'
    $datagridviewDataOutput.ReadOnly = $true
    $datagridviewDataOutput.RowHeadersWidth = 24
    $datagridviewDataOutput.RowHeadersWidthSizeMode = 'DisableResizing'
    $datagridviewDataOutput.SelectionMode = 'FullRowSelect'
    $datagridviewDataOutput.Size = '778, 368'
    $datagridviewDataOutput.TabIndex = 0
    $datagridviewDataOutput.add_DataError($datagridviewDataOutput_DataError)
    #
    # groupboxQueryManager
    #
    $groupboxQueryManager.Controls.Add($buttonDataOutputMakeChart)
    $groupboxQueryManager.Controls.Add($buttonDataOutputQueryToCsv)
    $groupboxQueryManager.Controls.Add($buttonDataOutputQueryLoad)
    $groupboxQueryManager.Controls.Add($buttonDataOutputQueryDelete)
    $groupboxQueryManager.Controls.Add($buttonDataOutputQueryNew)
    $groupboxQueryManager.Controls.Add($comboboxDataOutputQueries)
    $groupboxQueryManager.Controls.Add($buttonDataOutputQueryEdit)
    $groupboxQueryManager.Dock = 'Bottom'
    $groupboxQueryManager.Location = '0, 548'
    $groupboxQueryManager.Name = 'groupboxQueryManager'
    $groupboxQueryManager.Size = '784, 84'
    $groupboxQueryManager.TabIndex = 0
    $groupboxQueryManager.TabStop = $false
    $groupboxQueryManager.Text = 'Query Manager'
    #
    # buttonDataOutputMakeChart
    #
    $buttonDataOutputMakeChart.Anchor = 'Bottom, Left'
    $buttonDataOutputMakeChart.Enabled = $false
    $buttonDataOutputMakeChart.Location = '537, 19'
    $buttonDataOutputMakeChart.Name = 'buttonDataOutputMakeChart'
    $buttonDataOutputMakeChart.Size = '97, 51'
    $buttonDataOutputMakeChart.TabIndex = 6
    $buttonDataOutputMakeChart.Text = 'Make Chart'
    $buttonDataOutputMakeChart.UseVisualStyleBackColor = $true
    $buttonDataOutputMakeChart.add_Click($buttonDataOutputMakeChart_Click)
    $buttonDataOutputMakeChart.add_MouseEnter($buttonDataOutputMakeChart_MouseEnter)
    #
    # buttonDataOutputQueryToCsv
    #
    $buttonDataOutputQueryToCsv.Anchor = 'Bottom, Left'
    $buttonDataOutputQueryToCsv.Enabled = $false
    $buttonDataOutputQueryToCsv.Font = 'Microsoft Sans Serif, 8.25pt'
    $buttonDataOutputQueryToCsv.Location = '434, 19'
    $buttonDataOutputQueryToCsv.Name = 'buttonDataOutputQueryToCsv'
    $buttonDataOutputQueryToCsv.Size = '97, 51'
    $buttonDataOutputQueryToCsv.TabIndex = 5
    $buttonDataOutputQueryToCsv.Text = 'Export to CSV'
    $buttonDataOutputQueryToCsv.UseVisualStyleBackColor = $true
    $buttonDataOutputQueryToCsv.add_Click($buttonDataOutputQueryToCsv_Click)
    #
    # buttonDataOutputQueryLoad
    #
    $buttonDataOutputQueryLoad.Location = '116, 47'
    $buttonDataOutputQueryLoad.Name = 'buttonDataOutputQueryLoad'
    $buttonDataOutputQueryLoad.Size = '100, 23'
    $buttonDataOutputQueryLoad.TabIndex = 2
    $buttonDataOutputQueryLoad.Text = 'Load'
    $buttonDataOutputQueryLoad.UseVisualStyleBackColor = $true
    $buttonDataOutputQueryLoad.add_Click($buttonDataOutputQueryLoad_Click)
    #
    # buttonDataOutputQueryDelete
    #
    $buttonDataOutputQueryDelete.Location = '328, 47'
    $buttonDataOutputQueryDelete.Name = 'buttonDataOutputQueryDelete'
    $buttonDataOutputQueryDelete.Size = '100, 23'
    $buttonDataOutputQueryDelete.TabIndex = 4
    $buttonDataOutputQueryDelete.Text = 'Delete'
    $buttonDataOutputQueryDelete.UseVisualStyleBackColor = $true
    $buttonDataOutputQueryDelete.add_Click($buttonDataOutputQueryDelete_Click)
    #
    # buttonDataOutputQueryNew
    #
    $buttonDataOutputQueryNew.Location = '10, 47'
    $buttonDataOutputQueryNew.Name = 'buttonDataOutputQueryNew'
    $buttonDataOutputQueryNew.Size = '100, 23'
    $buttonDataOutputQueryNew.TabIndex = 1
    $buttonDataOutputQueryNew.Text = 'New'
    $buttonDataOutputQueryNew.UseVisualStyleBackColor = $true
    $buttonDataOutputQueryNew.add_Click($buttonDataOutputQueryNew_Click)
    #
    # comboboxDataOutputQueries
    #
    $comboboxDataOutputQueries.DropDownStyle = 'DropDownList'
    $comboboxDataOutputQueries.FormattingEnabled = $true
    $comboboxDataOutputQueries.Location = '10, 19'
    $comboboxDataOutputQueries.Name = 'comboboxDataOutputQueries'
    $comboboxDataOutputQueries.Size = '418, 21'
    $comboboxDataOutputQueries.TabIndex = 0
    $comboboxDataOutputQueries.add_SelectedIndexChanged($comboboxDataOutputQueries_SelectedIndexChanged)
    $comboboxDataOutputQueries.add_MouseEnter($comboboxDataOutputQueries_MouseEnter)
    #
    # buttonDataOutputQueryEdit
    #
    $buttonDataOutputQueryEdit.Location = '222, 47'
    $buttonDataOutputQueryEdit.Name = 'buttonDataOutputQueryEdit'
    $buttonDataOutputQueryEdit.Size = '100, 23'
    $buttonDataOutputQueryEdit.TabIndex = 3
    $buttonDataOutputQueryEdit.Text = 'Edit'
    $buttonDataOutputQueryEdit.UseVisualStyleBackColor = $true
    $buttonDataOutputQueryEdit.add_Click($buttonDataOutputQueryEdit_Click)
    #
    # groupboxDataOutputControls
    #
    $groupboxDataOutputControls.Controls.Add($buttonOutputFormClose)
    $groupboxDataOutputControls.Dock = 'Bottom'
    $groupboxDataOutputControls.Font = 'Microsoft Sans Serif, 0.25pt'
    $groupboxDataOutputControls.Location = '0, 632'
    $groupboxDataOutputControls.Name = 'groupboxDataOutputControls'
    $groupboxDataOutputControls.Size = '784, 30'
    $groupboxDataOutputControls.TabIndex = 17
    $groupboxDataOutputControls.TabStop = $false
    #
    # buttonOutputFormClose
    #
    $buttonOutputFormClose.DialogResult = 'Cancel'
    $buttonOutputFormClose.Dock = 'Bottom'
    $buttonOutputFormClose.Font = 'Microsoft Sans Serif, 8.25pt'
    $buttonOutputFormClose.Location = '3, 4'
    $buttonOutputFormClose.Name = 'buttonOutputFormClose'
    $buttonOutputFormClose.Size = '778, 23'
    $buttonOutputFormClose.TabIndex = 0
    $buttonOutputFormClose.Text = 'Close'
    $buttonOutputFormClose.UseVisualStyleBackColor = $true
    $buttonOutputFormClose.add_Click($buttonOutputFormClose_Click)
    #
    # groupboxDataOutputNewPurchase
    #
    $groupboxDataOutputNewPurchase.Controls.Add($buttonDataOutputMinimize)
    $groupboxDataOutputNewPurchase.Controls.Add($labelDataOutputDate)
    $groupboxDataOutputNewPurchase.Controls.Add($labelDataOutputPrice)
    $groupboxDataOutputNewPurchase.Controls.Add($labelDataOutputQuantity)
    $groupboxDataOutputNewPurchase.Controls.Add($labelDataOutputNames)
    $groupboxDataOutputNewPurchase.Controls.Add($labelDataOutputTypes)
    $groupboxDataOutputNewPurchase.Controls.Add($labelDataOutputKinds)
    $groupboxDataOutputNewPurchase.Controls.Add($labelDataOutputCategories)
    $groupboxDataOutputNewPurchase.Controls.Add($labelDataOutputStores)
    $groupboxDataOutputNewPurchase.Controls.Add($buttonDataOutputDataManager)
    $groupboxDataOutputNewPurchase.Controls.Add($datetimepickerDataOutputDate)
    $groupboxDataOutputNewPurchase.Controls.Add($numericupdownDataOutputPrice)
    $groupboxDataOutputNewPurchase.Controls.Add($comboboxDataOutputTypes)
    $groupboxDataOutputNewPurchase.Controls.Add($buttonDataOutputAddPurchase)
    $groupboxDataOutputNewPurchase.Controls.Add($comboboxDataOutputStores)
    $groupboxDataOutputNewPurchase.Controls.Add($numericupdownDataOutputQuantity)
    $groupboxDataOutputNewPurchase.Controls.Add($comboboxDataOutputCategories)
    $groupboxDataOutputNewPurchase.Controls.Add($comboboxDataOutputNames)
    $groupboxDataOutputNewPurchase.Controls.Add($comboboxDataOutputKinds)
    $groupboxDataOutputNewPurchase.Dock = 'Top'
    $groupboxDataOutputNewPurchase.Location = '0, 0'
    $groupboxDataOutputNewPurchase.Name = 'groupboxDataOutputNewPurchase'
    $groupboxDataOutputNewPurchase.Size = '784, 161'
    $groupboxDataOutputNewPurchase.TabIndex = 0
    $groupboxDataOutputNewPurchase.TabStop = $false
    $groupboxDataOutputNewPurchase.Text = 'New Purchase'
    #
    # buttonDataOutputMinimize
    #
    $buttonDataOutputMinimize.Anchor = 'Top, Right'
    $buttonDataOutputMinimize.FlatAppearance.BorderSize = 0
    $buttonDataOutputMinimize.FlatStyle = 'Flat'
    $buttonDataOutputMinimize.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
    $buttonDataOutputMinimize.Location = '756, 11'
    $buttonDataOutputMinimize.Name = 'buttonDataOutputMinimize'
    $buttonDataOutputMinimize.Size = '25, 25'
    $buttonDataOutputMinimize.TabIndex = 28
    $buttonDataOutputMinimize.Text = '_'
    $buttonDataOutputMinimize.TextAlign = 'TopCenter'
    $buttonDataOutputMinimize.UseVisualStyleBackColor = $true
    $buttonDataOutputMinimize.add_Click($buttonDataOutputMinimize_Click)
    #
    # labelDataOutputDate
    #
    $labelDataOutputDate.Location = '302, 108'
    $labelDataOutputDate.Name = 'labelDataOutputDate'
    $labelDataOutputDate.Size = '140, 20'
    $labelDataOutputDate.TabIndex = 27
    $labelDataOutputDate.Text = 'Date'
    $labelDataOutputDate.TextAlign = 'MiddleLeft'
    #
    # labelDataOutputPrice
    #
    $labelDataOutputPrice.Location = '10, 108'
    $labelDataOutputPrice.Name = 'labelDataOutputPrice'
    $labelDataOutputPrice.Size = '140, 20'
    $labelDataOutputPrice.TabIndex = 26
    $labelDataOutputPrice.Text = 'Price'
    $labelDataOutputPrice.TextAlign = 'MiddleLeft'
    #
    # labelDataOutputQuantity
    #
    $labelDataOutputQuantity.Location = '156, 108'
    $labelDataOutputQuantity.Name = 'labelDataOutputQuantity'
    $labelDataOutputQuantity.Size = '140, 20'
    $labelDataOutputQuantity.TabIndex = 25
    $labelDataOutputQuantity.Text = 'Quantity'
    $labelDataOutputQuantity.TextAlign = 'MiddleLeft'
    #
    # labelDataOutputNames
    #
    $labelDataOutputNames.Location = '302, 61'
    $labelDataOutputNames.Name = 'labelDataOutputNames'
    $labelDataOutputNames.Size = '140, 20'
    $labelDataOutputNames.TabIndex = 24
    $labelDataOutputNames.Text = 'Names'
    $labelDataOutputNames.TextAlign = 'MiddleLeft'
    #
    # labelDataOutputTypes
    #
    $labelDataOutputTypes.Location = '156, 61'
    $labelDataOutputTypes.Name = 'labelDataOutputTypes'
    $labelDataOutputTypes.Size = '140, 20'
    $labelDataOutputTypes.TabIndex = 23
    $labelDataOutputTypes.Text = 'Types'
    $labelDataOutputTypes.TextAlign = 'MiddleLeft'
    #
    # labelDataOutputKinds
    #
    $labelDataOutputKinds.Location = '10, 61'
    $labelDataOutputKinds.Name = 'labelDataOutputKinds'
    $labelDataOutputKinds.Size = '140, 20'
    $labelDataOutputKinds.TabIndex = 22
    $labelDataOutputKinds.Text = 'Kinds'
    $labelDataOutputKinds.TextAlign = 'MiddleLeft'
    #
    # labelDataOutputCategories
    #
    $labelDataOutputCategories.Location = '302, 16'
    $labelDataOutputCategories.Name = 'labelDataOutputCategories'
    $labelDataOutputCategories.Size = '140, 20'
    $labelDataOutputCategories.TabIndex = 21
    $labelDataOutputCategories.Text = 'Categories'
    $labelDataOutputCategories.TextAlign = 'MiddleLeft'
    #
    # labelDataOutputStores
    #
    $labelDataOutputStores.Location = '10, 16'
    $labelDataOutputStores.Name = 'labelDataOutputStores'
    $labelDataOutputStores.Size = '291, 20'
    $labelDataOutputStores.TabIndex = 20
    $labelDataOutputStores.Text = 'Stores'
    $labelDataOutputStores.TextAlign = 'MiddleLeft'
    #
    # buttonDataOutputDataManager
    #
    $buttonDataOutputDataManager.Location = '556, 37'
    $buttonDataOutputDataManager.Name = 'buttonDataOutputDataManager'
    $buttonDataOutputDataManager.Size = '97, 114'
    $buttonDataOutputDataManager.TabIndex = 9
    $buttonDataOutputDataManager.Text = 'Data Manager'
    $buttonDataOutputDataManager.UseVisualStyleBackColor = $true
    $buttonDataOutputDataManager.add_Click($buttonDataOutputDataManager_Click)
    #
    # datetimepickerDataOutputDate
    #
    $datetimepickerDataOutputDate.Location = '302, 131'
    $datetimepickerDataOutputDate.Name = 'datetimepickerDataOutputDate'
    $datetimepickerDataOutputDate.Size = '140, 20'
    $datetimepickerDataOutputDate.TabIndex = 7
    $datetimepickerDataOutputDate.add_PreviewKeyDown($datetimepickerDataOutputDate_PreviewKeyDown)
    #
    # numericupdownDataOutputPrice
    #
    $numericupdownDataOutputPrice.DecimalPlaces = 2
    $numericupdownDataOutputPrice.Increment = 100
    $numericupdownDataOutputPrice.Location = '10, 131'
    $numericupdownDataOutputPrice.Maximum = 10000000
    $numericupdownDataOutputPrice.Name = 'numericupdownDataOutputPrice'
    $numericupdownDataOutputPrice.Size = '140, 20'
    $numericupdownDataOutputPrice.TabIndex = 5
    $numericupdownDataOutputPrice.TextAlign = 'Center'
    $numericupdownDataOutputPrice.add_KeyDown($numericupdownDataOutputPrice_KeyDown)
    #
    # comboboxDataOutputTypes
    #
    $comboboxDataOutputTypes.DropDownStyle = 'DropDownList'
    $comboboxDataOutputTypes.FormattingEnabled = $true
    $comboboxDataOutputTypes.Location = '156, 84'
    $comboboxDataOutputTypes.Name = 'comboboxDataOutputTypes'
    $comboboxDataOutputTypes.Size = '140, 21'
    $comboboxDataOutputTypes.TabIndex = 3
    $comboboxDataOutputTypes.add_SelectedIndexChanged($comboboxDataOutputTypes_SelectedIndexChanged)
    #
    # buttonDataOutputAddPurchase
    #
    $buttonDataOutputAddPurchase.Location = '453, 37'
    $buttonDataOutputAddPurchase.Name = 'buttonDataOutputAddPurchase'
    $buttonDataOutputAddPurchase.Size = '97, 114'
    $buttonDataOutputAddPurchase.TabIndex = 8
    $buttonDataOutputAddPurchase.Text = 'Add Purchase'
    $buttonDataOutputAddPurchase.UseVisualStyleBackColor = $true
    $buttonDataOutputAddPurchase.add_Click($buttonDataOutputAddPurchase_Click)
    #
    # comboboxDataOutputStores
    #
    $comboboxDataOutputStores.DropDownStyle = 'DropDownList'
    $comboboxDataOutputStores.FormattingEnabled = $true
    $comboboxDataOutputStores.Location = '10, 37'
    $comboboxDataOutputStores.Name = 'comboboxDataOutputStores'
    $comboboxDataOutputStores.Size = '286, 21'
    $comboboxDataOutputStores.TabIndex = 0
    #
    # numericupdownDataOutputQuantity
    #
    $numericupdownDataOutputQuantity.DecimalPlaces = 3
    $numericupdownDataOutputQuantity.Location = '156, 131'
    $numericupdownDataOutputQuantity.Maximum = 1000
    $numericupdownDataOutputQuantity.Minimum = 0.1
    $numericupdownDataOutputQuantity.Name = 'numericupdownDataOutputQuantity'
    $numericupdownDataOutputQuantity.Size = '140, 20'
    $numericupdownDataOutputQuantity.TabIndex = 6
    $numericupdownDataOutputQuantity.TextAlign = 'Center'
    $numericupdownDataOutputQuantity.Value = 1
    $numericupdownDataOutputQuantity.add_KeyDown($numericupdownDataOutputQuantity_KeyDown)
    #
    # comboboxDataOutputCategories
    #
    $comboboxDataOutputCategories.DropDownStyle = 'DropDownList'
    $comboboxDataOutputCategories.FormattingEnabled = $true
    $comboboxDataOutputCategories.Location = '302, 37'
    $comboboxDataOutputCategories.Name = 'comboboxDataOutputCategories'
    $comboboxDataOutputCategories.Size = '140, 21'
    $comboboxDataOutputCategories.TabIndex = 1
    $comboboxDataOutputCategories.add_SelectedIndexChanged($comboboxDataOutputCategories_SelectedIndexChanged)
    #
    # comboboxDataOutputNames
    #
    $comboboxDataOutputNames.DropDownStyle = 'DropDownList'
    $comboboxDataOutputNames.FormattingEnabled = $true
    $comboboxDataOutputNames.Location = '302, 84'
    $comboboxDataOutputNames.Name = 'comboboxDataOutputNames'
    $comboboxDataOutputNames.Size = '140, 21'
    $comboboxDataOutputNames.TabIndex = 4
    #
    # comboboxDataOutputKinds
    #
    $comboboxDataOutputKinds.DropDownStyle = 'DropDownList'
    $comboboxDataOutputKinds.FormattingEnabled = $true
    $comboboxDataOutputKinds.Location = '10, 84'
    $comboboxDataOutputKinds.Name = 'comboboxDataOutputKinds'
    $comboboxDataOutputKinds.Size = '140, 21'
    $comboboxDataOutputKinds.TabIndex = 2
    $comboboxDataOutputKinds.add_SelectedIndexChanged($comboboxDataOutputKinds_SelectedIndexChanged)
    #
    # timerOpenDataManager
    #
    $timerOpenDataManager.add_Tick($timerOpenDataManager_Tick)
    #
    # timerDataOutputConnectionState
    #
    $timerDataOutputConnectionState.Interval = 10000
    $timerDataOutputConnectionState.add_Tick($timerDataOutputConnectionState_Tick)
    #
    # contextmenustripDataOutput
    #
    [void]$contextmenustripDataOutput.Items.Add($makeCopyOfSelectedPurchaseWithCurrentDateToolStripMenuItem)
    [void]$contextmenustripDataOutput.Items.Add($toolstripseparator2)
    [void]$contextmenustripDataOutput.Items.Add($changeStoreForSelectedToolStripMenuItem)
    [void]$contextmenustripDataOutput.Items.Add($toolstripseparator1)
    [void]$contextmenustripDataOutput.Items.Add($DataOutputRemoveSelectedToolStripMenuItem)
    $contextmenustripDataOutput.Name = 'contextmenustripDataOutput'
    $contextmenustripDataOutput.ShowImageMargin = $false
    $contextmenustripDataOutput.Size = '312, 60'
    $contextmenustripDataOutput.add_Opening($contextmenustripDataOutput_Opening)
    #
    # DataOutputRemoveSelectedToolStripMenuItem
    #
    $DataOutputRemoveSelectedToolStripMenuItem.Name = 'DataOutputRemoveSelectedToolStripMenuItem'
    $DataOutputRemoveSelectedToolStripMenuItem.Size = '311, 22'
    $DataOutputRemoveSelectedToolStripMenuItem.Text = 'Remove selected purchase'
    $DataOutputRemoveSelectedToolStripMenuItem.add_Click($DataOutputRemoveSelectedToolStripMenuItem_Click)
    #
    # openfiledialogDataOutputQueryLoad
    #
    $openfiledialogDataOutputQueryLoad.DefaultExt = 'txt'
    $openfiledialogDataOutputQueryLoad.Filter = 'SQL Query File (.sql)|*.sql|All Files|*.*'
    $openfiledialogDataOutputQueryLoad.ShowHelp = $true
    #
    # timerInput
    #
    $TimerInput.Interval = 300
    $TimerInput.add_Tick($timerInput_Tick)
    #
    # tooltipDataOutput
    #
    #
    # toolstripseparator1
    #
    $toolstripseparator1.Name = 'toolstripseparator1'
    $toolstripseparator1.Size = '308, 6'
    #
    # changeStoreForSelectedToolStripMenuItem
    #
    [void]$changeStoreForSelectedToolStripMenuItem.DropDownItems.Add($ChangeStoretoolstripcombobox)
    $changeStoreForSelectedToolStripMenuItem.Name = 'changeStoreForSelectedToolStripMenuItem'
    $changeStoreForSelectedToolStripMenuItem.Size = '311, 22'
    $changeStoreForSelectedToolStripMenuItem.Text = 'Change Store for selected purchase'
    #
    # ChangeStoretoolstripcombobox
    #
    $ChangeStoretoolstripcombobox.DropDownStyle = 'DropDownList'
    $ChangeStoretoolstripcombobox.FlatStyle = 'Standard'
    $ChangeStoretoolstripcombobox.MaxDropDownItems = 64
    $ChangeStoretoolstripcombobox.Name = 'ChangeStoretoolstripcombobox'
    $ChangeStoretoolstripcombobox.Size = '286, 23'
    $ChangeStoretoolstripcombobox.add_DropDownClosed($ChangeStoretoolstripcombobox_DropDownClosed)
    #
    # makeCopyOfSelectedPurchaseWithCurrentDateToolStripMenuItem
    #
    $makeCopyOfSelectedPurchaseWithCurrentDateToolStripMenuItem.Name = 'makeCopyOfSelectedPurchaseWithCurrentDateToolStripMenuItem'
    $makeCopyOfSelectedPurchaseWithCurrentDateToolStripMenuItem.Size = '311, 22'
    $makeCopyOfSelectedPurchaseWithCurrentDateToolStripMenuItem.Text = 'Make copy of selected purchase with current date'
    $makeCopyOfSelectedPurchaseWithCurrentDateToolStripMenuItem.add_Click($makeCopyOfSelectedPurchaseWithCurrentDateToolStripMenuItem_Click)
    #
    # toolstripseparator2
    #
    $toolstripseparator2.Name = 'toolstripseparator2'
    $toolstripseparator2.Size = '308, 6'
    #
    # timerOpenCharts
    #
    $timerOpenCharts.add_Tick($timerOpenCharts_Tick)
    #
    # timerOpenQueryEditor
    #
    $timerOpenQueryEditor.add_Tick($timerOpenQueryEditor_Tick)
    $numericupdownDataOutputQuantity.EndInit()
    $numericupdownDataOutputPrice.EndInit()
    $groupboxDataOutputNewPurchase.ResumeLayout($false)
    $groupboxDataOutputControls.ResumeLayout($false)
    $groupboxQueryManager.ResumeLayout($false)
    $groupboxDataOutputTable.ResumeLayout($false)
    $formDataOutput.ResumeLayout($false)
    #endregion Generated Form Code

    #----------------------------------------------

    #Save the initial state of the form
    $InitialFormWindowState = $formDataOutput.WindowState
    #Init the OnLoad event to correct the initial state of the form
    $formDataOutput.add_Load($Form_StateCorrection_Load)
    #Clean up the control events
    $formDataOutput.add_FormClosed($Form_Cleanup_FormClosed)
    #Store the control values when form is closing
    $formDataOutput.add_Closing($Form_StoreValues_Closing)
    #Show the Form
    return $formDataOutput.ShowDialog()
}
#endregion Source: DataOutputForm.psf

#region Source: ConfigurationManagerForm.psf
function Call-ConfigurationManagerForm_psf
{
    #----------------------------------------------
    #region Import the Assemblies
    #----------------------------------------------
    [void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    [void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    [void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    #endregion Import Assemblies

    #----------------------------------------------
    #region Generated Form Objects
    #----------------------------------------------
    [System.Windows.Forms.Application]::EnableVisualStyles()
    $formSQLServerConnectionConfiguration = New-Object -TypeName 'System.Windows.Forms.Form'
    $groupboxControls = New-Object -TypeName 'System.Windows.Forms.GroupBox'
    $buttonSQLConfigurationApply = New-Object -TypeName 'System.Windows.Forms.Button'
    $buttonClose = New-Object -TypeName 'System.Windows.Forms.Button'
    $groupboxSaveToRegistry = New-Object -TypeName 'System.Windows.Forms.GroupBox'
    $checkboxAutoConnect = New-Object -TypeName 'System.Windows.Forms.CheckBox'
    $checkboxKeepConfiguration = New-Object -TypeName 'System.Windows.Forms.CheckBox'
    $groupboxPersonalization = New-Object -TypeName 'System.Windows.Forms.GroupBox'
    $comboboxDisplayColors = New-Object -TypeName 'System.Windows.Forms.ComboBox'
    $labelDisplayColors = New-Object -TypeName 'System.Windows.Forms.Label'
    $comboboxDisplayLangugage = New-Object -TypeName 'System.Windows.Forms.ComboBox'
    $labelDisplayLanguage = New-Object -TypeName 'System.Windows.Forms.Label'
    $groupboxSQLServerCredentials = New-Object -TypeName 'System.Windows.Forms.GroupBox'
    $textboxSQLServerPassword = New-Object -TypeName 'System.Windows.Forms.TextBox'
    $textboxSQLServerLogin = New-Object -TypeName 'System.Windows.Forms.TextBox'
    $labelSQLServerLogin = New-Object -TypeName 'System.Windows.Forms.Label'
    $labelSQLServerPassword = New-Object -TypeName 'System.Windows.Forms.Label'
    $groupboxSQLServerConnection = New-Object -TypeName 'System.Windows.Forms.GroupBox'
    $labelSQLServerServerName = New-Object -TypeName 'System.Windows.Forms.Label'
    $textboxSQLServerDatabase = New-Object -TypeName 'System.Windows.Forms.TextBox'
    $checkboxIntegratedSecurity = New-Object -TypeName 'System.Windows.Forms.CheckBox'
    $textboxSQLServerName = New-Object -TypeName 'System.Windows.Forms.TextBox'
    $labelSQLServerDatabase = New-Object -TypeName 'System.Windows.Forms.Label'
    $TimerInput = New-Object -TypeName 'System.Windows.Forms.Timer'
    $InitialFormWindowState = New-Object -TypeName 'System.Windows.Forms.FormWindowState'
    #endregion Generated Form Objects

    #----------------------------------------------
    # User Generated Script
    #----------------------------------------------
	
    $formSQLServerConnectionConfiguration_Load = {
        Get-RegistryValues
        Set-LanguageName
        Set-Language
        Set-DisplayColorName
        Set-DisplayColor
    }
	
    $buttonSQLConfigurationApply_Click = {
        if ($textboxSQLServerName.Text.Trim() -ne '' -and $textboxSQLServerDatabase.Text.Trim() -ne '')
        {
            $script:SQLServerName = $textboxSQLServerName.Text.Trim()
            $script:SQLServerDatabase = $textboxSQLServerDatabase.Text.Trim()
            if ($checkboxIntegratedSecurity.Checked -eq $true)
            {
                $script:IntegratedSecurityEnabled = $checkboxIntegratedSecurity.Checked
                Set-SQLConnection
                Set-RegistrySaveConfiguration
                $TimerInput.Start()
                $buttonSQLConfigurationApply.Text = $script:buttonSQLConfigurationApplyState
                $buttonSQLConfigurationApply.BackColor = 'GreenYellow'
            }
            else
            {
                if ($textboxSQLServerLogin.Text.Trim() -ne '' -and $textboxSQLServerPassword.Text.Trim() -ne '')
                {
                    $script:SQLServerLogin = $textboxSQLServerLogin.Text.Trim()
                    $script:SQLServerPassword = $textboxSQLServerPassword.Text.Trim()
                    Set-SQLConnection
                    Set-RegistrySaveConfiguration
                    $TimerInput.Start()
                    $buttonSQLConfigurationApply.Text = $script:buttonSQLConfigurationApplyState
                    $buttonSQLConfigurationApply.BackColor = 'GreenYellow'
                }
                else
                {
                    $TimerInput.Start()
                    if ($textboxSQLServerLogin.Text.Trim() -eq '')
                    {
                        $textboxSQLServerLogin.BackColor = 'LightCoral'
                    }
                    if ($textboxSQLServerPassword.Text.Trim() -eq '')
                    {
                        $textboxSQLServerPassword.BackColor = 'LightCoral'
                    }
                }
            }
        }
        else
        {
            $TimerInput.Start()
            if ($textboxSQLServerName.Text.Trim() -eq '')
            {
                $textboxSQLServerName.BackColor = 'LightCoral'
            }
            if ($textboxSQLServerDatabase.Text.Trim() -eq '')
            {
                $textboxSQLServerDatabase.BackColor = 'LightCoral'
            }
        }
    }
	
    $checkboxIntegratedSecurity_CheckedChanged = {
        Set-IntegratedSecurity
    }
	
    $checkboxKeepConfiguration_CheckedChanged = {
        if ($checkboxKeepConfiguration.Checked -eq $true)
        {
            $checkboxAutoConnect.Enabled = $true 
        }
        else
        {
            $checkboxAutoConnect.Enabled = $false
            $checkboxAutoConnect.Checked = $false
        }
    }
	
    $timerInput_Tick = {
        $TimerInput.Stop()
        $textboxSQLServerName.BackColor = 'Window'
        $textboxSQLServerDatabase.BackColor = 'Window'
        $textboxSQLServerLogin.BackColor = 'Window'
        $textboxSQLServerPassword.BackColor = 'Window'
        $buttonSQLConfigurationApply.Text = $script:buttonSQLConfigurationApplyStateReset
        $buttonSQLConfigurationApply.BackColor = 'Control'
    }
	
    $buttonClose_Click = {
        $script:ConfigurationOpen = 0
        $formSQLServerConnectionConfiguration.Close()
    }
	
    #region Control Helper Functions
    function Load-ComboBox 
    {
        <#
                .SYNOPSIS
                This functions helps you load items into a ComboBox.
	
                .DESCRIPTION
                Use this function to dynamically load items into the ComboBox control.
	
                .PARAMETER  ComboBox
                The ComboBox control you want to add items to.
	
                .PARAMETER  Items
                The object or objects you wish to load into the ComboBox's Items collection.
	
                .PARAMETER  DisplayMember
                Indicates the property to display for the items in this control.
		
                .PARAMETER  Append
                Adds the item(s) to the ComboBox without clearing the Items collection.
		
                .EXAMPLE
                Load-ComboBox $combobox1 "Red", "White", "Blue"
		
                .EXAMPLE
                Load-ComboBox $combobox1 "Red" -Append
                Load-ComboBox $combobox1 "White" -Append
                Load-ComboBox $combobox1 "Blue" -Append
		
                .EXAMPLE
                Load-ComboBox $combobox1 (Get-Process) "ProcessName"
        #>
        Param (
            [ValidateNotNull()]
            [Parameter(Mandatory = $true)]
            [System.Windows.Forms.ComboBox]$ComboBox,
            [ValidateNotNull()]
            [Parameter(Mandatory = $true)]
            $Items,
            [Parameter(Mandatory = $false)]
            [string]$DisplayMember,
            [switch]$Append
        )
		
        if(-not $Append)
        {
            $ComboBox.Items.Clear()
        }
		
        if($Items -is [Object[]])
        {
            $ComboBox.Items.AddRange($Items)
        }
        elseif ($Items -is [Array])
        {
            $ComboBox.BeginUpdate()
            foreach($obj in $Items)
            {
                $ComboBox.Items.Add($obj)
            }
            $ComboBox.EndUpdate()
        }
        else
        {
            $ComboBox.Items.Add($Items)
        }
	
        $ComboBox.DisplayMember = $DisplayMember
    }
	
    $SQLConnectionPreviewKeyDown = [System.Windows.Forms.PreviewKeyDownEventHandler]{
        if ($_.KeyCode -eq [System.Windows.Forms.Keys]::Enter)
        {
            &$buttonSQLConfigurationApply_Click
        }
    }
	
    $comboboxDisplayLangugage_SelectionChangeCommitted = {
        Set-Language -SetToRegistry
        $comboboxDisplayLangugage.Items.Clear()
        Set-LanguageName
    }
	
    $comboboxDisplayColors_SelectionChangeCommitted = {
        Set-DisplayColor -Form $formSQLServerConnectionConfiguration -SaveToRegistry
    }
    # --End User Generated Script--
    #----------------------------------------------
    #region Generated Events
    #----------------------------------------------
	
    $Form_StateCorrection_Load = 
    {
        #Correct the initial state of the form to prevent the .Net maximized form issue
        $formSQLServerConnectionConfiguration.WindowState = $InitialFormWindowState
    }
	
    $Form_StoreValues_Closing = 
    {
        #Store the control values
        $script:ConfigurationManagerForm_checkboxAutoConnect = $checkboxAutoConnect.Checked
        $script:ConfigurationManagerForm_checkboxKeepConfiguration = $checkboxKeepConfiguration.Checked
        $script:ConfigurationManagerForm_comboboxDisplayColors_SelectedItem = $comboboxDisplayColors.SelectedItems
        $script:ConfigurationManagerForm_comboboxDisplayLangugage_SelectedItem = $comboboxDisplayLangugage.SelectedItems
        $script:ConfigurationManagerForm_textboxSQLServerPassword = $textboxSQLServerPassword.Text
        $script:ConfigurationManagerForm_textboxSQLServerLogin = $textboxSQLServerLogin.Text
        $script:ConfigurationManagerForm_textboxSQLServerDatabase = $textboxSQLServerDatabase.Text
        $script:ConfigurationManagerForm_checkboxIntegratedSecurity = $checkboxIntegratedSecurity.Checked
        $script:ConfigurationManagerForm_textboxSQLServerName = $textboxSQLServerName.Text
    }

	
    $Form_Cleanup_FormClosed = 
    {
        #Remove all event handlers from the controls
        try
        {
            $buttonSQLConfigurationApply.remove_Click($buttonSQLConfigurationApply_Click)
            $buttonClose.remove_Click($buttonClose_Click)
            $checkboxKeepConfiguration.remove_CheckedChanged($checkboxKeepConfiguration_CheckedChanged)
            $comboboxDisplayColors.remove_SelectionChangeCommitted($comboboxDisplayColors_SelectionChangeCommitted)
            $comboboxDisplayLangugage.remove_SelectionChangeCommitted($comboboxDisplayLangugage_SelectionChangeCommitted)
            $textboxSQLServerPassword.remove_PreviewKeyDown($SQLConnectionPreviewKeyDown)
            $textboxSQLServerLogin.remove_PreviewKeyDown($SQLConnectionPreviewKeyDown)
            $textboxSQLServerDatabase.remove_PreviewKeyDown($SQLConnectionPreviewKeyDown)
            $checkboxIntegratedSecurity.remove_CheckedChanged($checkboxIntegratedSecurity_CheckedChanged)
            $textboxSQLServerName.remove_PreviewKeyDown($SQLConnectionPreviewKeyDown)
            $formSQLServerConnectionConfiguration.remove_Load($formSQLServerConnectionConfiguration_Load)
            $TimerInput.remove_Tick($timerInput_Tick)
            $formSQLServerConnectionConfiguration.remove_Load($Form_StateCorrection_Load)
            $formSQLServerConnectionConfiguration.remove_Closing($Form_StoreValues_Closing)
            $formSQLServerConnectionConfiguration.remove_FormClosed($Form_Cleanup_FormClosed)
        }
        catch [Exception]
        {
 
        }
    }
    #endregion Generated Events

    #----------------------------------------------
    #region Generated Form Code
    #----------------------------------------------
    $formSQLServerConnectionConfiguration.SuspendLayout()
    $groupboxControls.SuspendLayout()
    $groupboxSaveToRegistry.SuspendLayout()
    $groupboxPersonalization.SuspendLayout()
    $groupboxSQLServerCredentials.SuspendLayout()
    $groupboxSQLServerConnection.SuspendLayout()
    #
    # formSQLServerConnectionConfiguration
    #
    $formSQLServerConnectionConfiguration.Controls.Add($groupboxControls)
    $formSQLServerConnectionConfiguration.Controls.Add($groupboxSaveToRegistry)
    $formSQLServerConnectionConfiguration.Controls.Add($groupboxPersonalization)
    $formSQLServerConnectionConfiguration.Controls.Add($groupboxSQLServerCredentials)
    $formSQLServerConnectionConfiguration.Controls.Add($groupboxSQLServerConnection)
    $formSQLServerConnectionConfiguration.CancelButton = $buttonClose
    $formSQLServerConnectionConfiguration.ClientSize = '237, 381'
    $formSQLServerConnectionConfiguration.ControlBox = $false
    $formSQLServerConnectionConfiguration.FormBorderStyle = 'FixedDialog'
    $formSQLServerConnectionConfiguration.MaximizeBox = $false
    $formSQLServerConnectionConfiguration.MinimizeBox = $false
    $formSQLServerConnectionConfiguration.Name = 'formSQLServerConnectionConfiguration'
    $formSQLServerConnectionConfiguration.StartPosition = 'CenterScreen'
    $formSQLServerConnectionConfiguration.Text = 'Configuration Manager'
    $formSQLServerConnectionConfiguration.add_Load($formSQLServerConnectionConfiguration_Load)
    #
    # groupboxControls
    #
    $groupboxControls.Controls.Add($buttonSQLConfigurationApply)
    $groupboxControls.Controls.Add($buttonClose)
    $groupboxControls.Dock = 'Bottom'
    $groupboxControls.Font = 'Microsoft Sans Serif, 0.25pt'
    $groupboxControls.Location = '0, 321'
    $groupboxControls.Name = 'groupboxControls'
    $groupboxControls.Size = '237, 60'
    $groupboxControls.TabIndex = 11
    $groupboxControls.TabStop = $false
    #
    # buttonSQLConfigurationApply
    #
    $buttonSQLConfigurationApply.Font = 'Microsoft Sans Serif, 8.25pt'
    $buttonSQLConfigurationApply.Location = '6, 20'
    $buttonSQLConfigurationApply.Name = 'buttonSQLConfigurationApply'
    $buttonSQLConfigurationApply.Size = '110, 24'
    $buttonSQLConfigurationApply.TabIndex = 8
    $buttonSQLConfigurationApply.Text = 'Apply'
    $buttonSQLConfigurationApply.UseVisualStyleBackColor = $true
    $buttonSQLConfigurationApply.add_Click($buttonSQLConfigurationApply_Click)
    #
    # buttonClose
    #
    $buttonClose.DialogResult = 'Cancel'
    $buttonClose.Font = 'Microsoft Sans Serif, 8.25pt'
    $buttonClose.Location = '121, 20'
    $buttonClose.Name = 'buttonClose'
    $buttonClose.Size = '110, 24'
    $buttonClose.TabIndex = 9
    $buttonClose.Text = 'Close'
    $buttonClose.UseVisualStyleBackColor = $true
    $buttonClose.add_Click($buttonClose_Click)
    #
    # groupboxSaveToRegistry
    #
    $groupboxSaveToRegistry.Controls.Add($checkboxAutoConnect)
    $groupboxSaveToRegistry.Controls.Add($checkboxKeepConfiguration)
    $groupboxSaveToRegistry.Dock = 'Top'
    $groupboxSaveToRegistry.Font = 'Microsoft Sans Serif, 0.25pt'
    $groupboxSaveToRegistry.Location = '0, 261'
    $groupboxSaveToRegistry.Name = 'groupboxSaveToRegistry'
    $groupboxSaveToRegistry.Size = '237, 60'
    $groupboxSaveToRegistry.TabIndex = 10
    $groupboxSaveToRegistry.TabStop = $false
    #
    # checkboxAutoConnect
    #
    $checkboxAutoConnect.Enabled = $false
    $checkboxAutoConnect.Font = 'Microsoft Sans Serif, 8.25pt'
    $checkboxAutoConnect.Location = '6, 33'
    $checkboxAutoConnect.Name = 'checkboxAutoConnect'
    $checkboxAutoConnect.Size = '211, 20'
    $checkboxAutoConnect.TabIndex = 7
    $checkboxAutoConnect.Text = 'Auto Connect'
    $checkboxAutoConnect.UseVisualStyleBackColor = $true
    #
    # checkboxKeepConfiguration
    #
    $checkboxKeepConfiguration.Font = 'Microsoft Sans Serif, 8.25pt'
    $checkboxKeepConfiguration.Location = '6, 7'
    $checkboxKeepConfiguration.Name = 'checkboxKeepConfiguration'
    $checkboxKeepConfiguration.Size = '211, 20'
    $checkboxKeepConfiguration.TabIndex = 6
    $checkboxKeepConfiguration.Text = 'Keep Configuration'
    $checkboxKeepConfiguration.UseVisualStyleBackColor = $true
    $checkboxKeepConfiguration.add_CheckedChanged($checkboxKeepConfiguration_CheckedChanged)
    #
    # groupboxPersonalization
    #
    $groupboxPersonalization.Controls.Add($comboboxDisplayColors)
    $groupboxPersonalization.Controls.Add($labelDisplayColors)
    $groupboxPersonalization.Controls.Add($comboboxDisplayLangugage)
    $groupboxPersonalization.Controls.Add($labelDisplayLanguage)
    $groupboxPersonalization.Dock = 'Top'
    $groupboxPersonalization.Font = 'Microsoft Sans Serif, 0.25pt'
    $groupboxPersonalization.Location = '0, 148'
    $groupboxPersonalization.Name = 'groupboxPersonalization'
    $groupboxPersonalization.Size = '237, 113'
    $groupboxPersonalization.TabIndex = 12
    $groupboxPersonalization.TabStop = $false
    #
    # comboboxDisplayColors
    #
    $comboboxDisplayColors.DropDownStyle = 'DropDownList'
    $comboboxDisplayColors.Font = 'Microsoft Sans Serif, 8.25pt'
    $comboboxDisplayColors.FormattingEnabled = $true
    $comboboxDisplayColors.Location = '6, 83'
    $comboboxDisplayColors.Name = 'comboboxDisplayColors'
    $comboboxDisplayColors.Size = '225, 21'
    $comboboxDisplayColors.TabIndex = 3
    $comboboxDisplayColors.add_SelectionChangeCommitted($comboboxDisplayColors_SelectionChangeCommitted)
    #
    # labelDisplayColors
    #
    $labelDisplayColors.Font = 'Microsoft Sans Serif, 8.25pt'
    $labelDisplayColors.Location = '6, 57'
    $labelDisplayColors.Name = 'labelDisplayColors'
    $labelDisplayColors.Size = '225, 23'
    $labelDisplayColors.TabIndex = 2
    $labelDisplayColors.Text = 'Display Colors'
    $labelDisplayColors.TextAlign = 'MiddleLeft'
    #
    # comboboxDisplayLangugage
    #
    $comboboxDisplayLangugage.DropDownStyle = 'DropDownList'
    $comboboxDisplayLangugage.Font = 'Microsoft Sans Serif, 8.25pt'
    $comboboxDisplayLangugage.FormattingEnabled = $true
    $comboboxDisplayLangugage.Location = '6, 33'
    $comboboxDisplayLangugage.Name = 'comboboxDisplayLangugage'
    $comboboxDisplayLangugage.Size = '225, 21'
    $comboboxDisplayLangugage.TabIndex = 1
    $comboboxDisplayLangugage.add_SelectionChangeCommitted($comboboxDisplayLangugage_SelectionChangeCommitted)
    #
    # labelDisplayLanguage
    #
    $labelDisplayLanguage.Font = 'Microsoft Sans Serif, 8.25pt'
    $labelDisplayLanguage.Location = '6, 7'
    $labelDisplayLanguage.Name = 'labelDisplayLanguage'
    $labelDisplayLanguage.Size = '225, 23'
    $labelDisplayLanguage.TabIndex = 0
    $labelDisplayLanguage.Text = 'Display Langugage'
    $labelDisplayLanguage.TextAlign = 'MiddleLeft'
    #
    # groupboxSQLServerCredentials
    #
    $groupboxSQLServerCredentials.Controls.Add($textboxSQLServerPassword)
    $groupboxSQLServerCredentials.Controls.Add($textboxSQLServerLogin)
    $groupboxSQLServerCredentials.Controls.Add($labelSQLServerLogin)
    $groupboxSQLServerCredentials.Controls.Add($labelSQLServerPassword)
    $groupboxSQLServerCredentials.Dock = 'Top'
    $groupboxSQLServerCredentials.Enabled = $false
    $groupboxSQLServerCredentials.Font = 'Microsoft Sans Serif, 0.25pt'
    $groupboxSQLServerCredentials.Location = '0, 88'
    $groupboxSQLServerCredentials.Name = 'groupboxSQLServerCredentials'
    $groupboxSQLServerCredentials.Size = '237, 60'
    $groupboxSQLServerCredentials.TabIndex = 6
    $groupboxSQLServerCredentials.TabStop = $false
    #
    # textboxSQLServerPassword
    #
    $textboxSQLServerPassword.Font = 'Microsoft Sans Serif, 8.25pt'
    $textboxSQLServerPassword.Location = '87, 33'
    $textboxSQLServerPassword.MaxLength = 20
    $textboxSQLServerPassword.Name = 'textboxSQLServerPassword'
    $textboxSQLServerPassword.PasswordChar = '*'
    $textboxSQLServerPassword.Size = '144, 20'
    $textboxSQLServerPassword.TabIndex = 5
    $textboxSQLServerPassword.TextAlign = 'Center'
    $textboxSQLServerPassword.add_PreviewKeyDown($SQLConnectionPreviewKeyDown)
    #
    # textboxSQLServerLogin
    #
    $textboxSQLServerLogin.Font = 'Microsoft Sans Serif, 8.25pt'
    $textboxSQLServerLogin.Location = '87, 7'
    $textboxSQLServerLogin.MaxLength = 20
    $textboxSQLServerLogin.Name = 'textboxSQLServerLogin'
    $textboxSQLServerLogin.Size = '144, 20'
    $textboxSQLServerLogin.TabIndex = 4
    $textboxSQLServerLogin.TextAlign = 'Center'
    $textboxSQLServerLogin.add_PreviewKeyDown($SQLConnectionPreviewKeyDown)
    #
    # labelSQLServerLogin
    #
    $labelSQLServerLogin.Font = 'Microsoft Sans Serif, 8.25pt'
    $labelSQLServerLogin.Location = '6, 7'
    $labelSQLServerLogin.Name = 'labelSQLServerLogin'
    $labelSQLServerLogin.Size = '75, 20'
    $labelSQLServerLogin.TabIndex = 4
    $labelSQLServerLogin.Text = 'Login'
    #
    # labelSQLServerPassword
    #
    $labelSQLServerPassword.Font = 'Microsoft Sans Serif, 8.25pt'
    $labelSQLServerPassword.Location = '6, 33'
    $labelSQLServerPassword.Name = 'labelSQLServerPassword'
    $labelSQLServerPassword.Size = '75, 20'
    $labelSQLServerPassword.TabIndex = 5
    $labelSQLServerPassword.Text = 'Password'
    #
    # groupboxSQLServerConnection
    #
    $groupboxSQLServerConnection.Controls.Add($labelSQLServerServerName)
    $groupboxSQLServerConnection.Controls.Add($textboxSQLServerDatabase)
    $groupboxSQLServerConnection.Controls.Add($checkboxIntegratedSecurity)
    $groupboxSQLServerConnection.Controls.Add($textboxSQLServerName)
    $groupboxSQLServerConnection.Controls.Add($labelSQLServerDatabase)
    $groupboxSQLServerConnection.Dock = 'Top'
    $groupboxSQLServerConnection.Font = 'Microsoft Sans Serif, 0.25pt'
    $groupboxSQLServerConnection.Location = '0, 0'
    $groupboxSQLServerConnection.Name = 'groupboxSQLServerConnection'
    $groupboxSQLServerConnection.Size = '237, 88'
    $groupboxSQLServerConnection.TabIndex = 9
    $groupboxSQLServerConnection.TabStop = $false
    #
    # labelSQLServerServerName
    #
    $labelSQLServerServerName.Font = 'Microsoft Sans Serif, 8.25pt'
    $labelSQLServerServerName.Location = '6, 16'
    $labelSQLServerServerName.Name = 'labelSQLServerServerName'
    $labelSQLServerServerName.Size = '75, 20'
    $labelSQLServerServerName.TabIndex = 2
    $labelSQLServerServerName.Text = 'ServerName'
    #
    # textboxSQLServerDatabase
    #
    $textboxSQLServerDatabase.Font = 'Microsoft Sans Serif, 8.25pt'
    $textboxSQLServerDatabase.Location = '87, 39'
    $textboxSQLServerDatabase.MaxLength = 20
    $textboxSQLServerDatabase.Name = 'textboxSQLServerDatabase'
    $textboxSQLServerDatabase.Size = '144, 20'
    $textboxSQLServerDatabase.TabIndex = 1
    $textboxSQLServerDatabase.TextAlign = 'Center'
    $textboxSQLServerDatabase.add_PreviewKeyDown($SQLConnectionPreviewKeyDown)
    #
    # checkboxIntegratedSecurity
    #
    $checkboxIntegratedSecurity.Checked = $true
    $checkboxIntegratedSecurity.CheckState = 'Checked'
    $checkboxIntegratedSecurity.Font = 'Microsoft Sans Serif, 8.25pt'
    $checkboxIntegratedSecurity.Location = '6, 63'
    $checkboxIntegratedSecurity.Name = 'checkboxIntegratedSecurity'
    $checkboxIntegratedSecurity.Size = '225, 20'
    $checkboxIntegratedSecurity.TabIndex = 2
    $checkboxIntegratedSecurity.Text = 'IntegratedSecurity'
    $checkboxIntegratedSecurity.UseVisualStyleBackColor = $true
    $checkboxIntegratedSecurity.add_CheckedChanged($checkboxIntegratedSecurity_CheckedChanged)
    #
    # textboxSQLServerName
    #
    $textboxSQLServerName.Font = 'Microsoft Sans Serif, 8.25pt'
    $textboxSQLServerName.Location = '87, 16'
    $textboxSQLServerName.MaxLength = 20
    $textboxSQLServerName.Name = 'textboxSQLServerName'
    $textboxSQLServerName.Size = '144, 20'
    $textboxSQLServerName.TabIndex = 0
    $textboxSQLServerName.TextAlign = 'Center'
    $textboxSQLServerName.add_PreviewKeyDown($SQLConnectionPreviewKeyDown)
    #
    # labelSQLServerDatabase
    #
    $labelSQLServerDatabase.Font = 'Microsoft Sans Serif, 8.25pt'
    $labelSQLServerDatabase.Location = '6, 39'
    $labelSQLServerDatabase.Name = 'labelSQLServerDatabase'
    $labelSQLServerDatabase.Size = '75, 20'
    $labelSQLServerDatabase.TabIndex = 3
    $labelSQLServerDatabase.Text = 'Database'
    #
    # timerInput
    #
    $TimerInput.Interval = 300
    $TimerInput.add_Tick($timerInput_Tick)
    $groupboxSQLServerConnection.ResumeLayout($false)
    $groupboxSQLServerCredentials.ResumeLayout($false)
    $groupboxPersonalization.ResumeLayout($false)
    $groupboxSaveToRegistry.ResumeLayout($false)
    $groupboxControls.ResumeLayout($false)
    $formSQLServerConnectionConfiguration.ResumeLayout($false)
    #endregion Generated Form Code

    #----------------------------------------------

    #Save the initial state of the form
    $InitialFormWindowState = $formSQLServerConnectionConfiguration.WindowState
    #Init the OnLoad event to correct the initial state of the form
    $formSQLServerConnectionConfiguration.add_Load($Form_StateCorrection_Load)
    #Clean up the control events
    $formSQLServerConnectionConfiguration.add_FormClosed($Form_Cleanup_FormClosed)
    #Store the control values when form is closing
    $formSQLServerConnectionConfiguration.add_Closing($Form_StoreValues_Closing)
    #Show the Form
    return $formSQLServerConnectionConfiguration.ShowDialog()
}
#endregion Source: ConfigurationManagerForm.psf

#region Source: MainForm.psf
function Call-MainForm_psf
{
    #----------------------------------------------
    #region Import the Assemblies
    #----------------------------------------------
    [void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    [void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    [void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    #endregion Import Assemblies

    #----------------------------------------------
    #region Generated Form Objects
    #----------------------------------------------
    [System.Windows.Forms.Application]::EnableVisualStyles()
    $formMyAccounting = New-Object -TypeName 'System.Windows.Forms.Form'
    $buttonMainFormConnect = New-Object -TypeName 'System.Windows.Forms.Button'
    $buttonMainFormConfigurationManager = New-Object -TypeName 'System.Windows.Forms.Button'
    $timerConnectionCheck = New-Object -TypeName 'System.Windows.Forms.Timer'
    $timerFormsOpen = New-Object -TypeName 'System.Windows.Forms.Timer'
    $InitialFormWindowState = New-Object -TypeName 'System.Windows.Forms.FormWindowState'
    #endregion Generated Form Objects

    #----------------------------------------------
    # User Generated Script
    #----------------------------------------------
    Invoke-PSCheck -Form $formMyAccounting
    $formMyAccounting_Load = {
        Set-Registry
        Set-Language
        Set-DisplayColor
        Invoke-CheckStart
    }
	
    $buttonMainFormConfigurationManager_Click = {
        Call-ConfigurationManagerForm_psf
    }
    $buttonMainFormConnect_Click = {
        $CurrentDatabase = Invoke-DatabaseTable @GetDatabaseTableParams -Query 'select db_name() AS [Check]' | Select-Object -ExpandProperty Check
        if ($CurrentDatabase -ne $null)
        {
            $script:ConnectionState = 1
            $timerConnectionCheck.Start()
            $timerFormsOpen.Start()
            $buttonMainFormConnect.Text = $script:MyAccountingStateConnected
            $buttonMainFormConnect.Enabled = $false
            $buttonMainFormConnect.BackColor = 'GreenYellow'
            if ($CurrentDatabase -eq 'master')
            {
                Call-DatabaseManager_psf
            }
            else
            {
                Call-DataOutputForm_psf
            }
        }
        else
        {
            [void][System.Windows.Forms.MessageBox]::Show($script:ConnectionCheckErrorState, $script:ConnectionCheckErrorStateType)
        }
    }
	
    $timerConnectionCheck_Tick = {
        if (-not (Invoke-DatabaseTable @GetDatabaseTableParams -Query "select 'True' AS [Check]" |
        Select-Object -ExpandProperty Check))
        {
            $script:ConnectionState = 0
            $script:FormsOpen = 0
            $timerFormsOpen.Stop()
            $timerConnectionCheck.Stop()
            $buttonMainFormConnect.Text = $script:MyAccountingStateDisconnected
            $buttonMainFormConnect.Enabled = $true
            $buttonMainFormConnect.BackColor = 'LightCoral'
        }
    }
	
    $timerFormsOpen_Tick = {
        if ($script:FormsOpen -eq 0)
        {
            $script:ConnectionState = 0
            $buttonMainFormConnect.Text = $script:MyAccountingStateDisconnected
            $buttonMainFormConnect.Enabled = $true
            $buttonMainFormConnect.BackColor = 'LightCoral'
            $timerConnectionCheck.Stop()
        }
    }
    # --End User Generated Script--
    #----------------------------------------------
    #region Generated Events
    #----------------------------------------------
	
    $Form_StateCorrection_Load = 
    {
        #Correct the initial state of the form to prevent the .Net maximized form issue
        $formMyAccounting.WindowState = $InitialFormWindowState
    }
	
    $Form_StoreValues_Closing = 
    {
        #Store the control values
    }

	
    $Form_Cleanup_FormClosed = 
    {
        #Remove all event handlers from the controls
        try
        {
            $buttonMainFormConnect.remove_Click($buttonMainFormConnect_Click)
            $buttonMainFormConfigurationManager.remove_Click($buttonMainFormConfigurationManager_Click)
            $formMyAccounting.remove_Load($formMyAccounting_Load)
            $timerConnectionCheck.remove_Tick($timerConnectionCheck_Tick)
            $timerFormsOpen.remove_Tick($timerFormsOpen_Tick)
            $formMyAccounting.remove_Load($Form_StateCorrection_Load)
            $formMyAccounting.remove_Closing($Form_StoreValues_Closing)
            $formMyAccounting.remove_FormClosed($Form_Cleanup_FormClosed)
        }
        catch [Exception]
        {
 
        }
    }
    #endregion Generated Events

    #----------------------------------------------
    #region Generated Form Code
    #----------------------------------------------
    $formMyAccounting.SuspendLayout()
    #
    # formMyAccounting
    #
    $formMyAccounting.Controls.Add($buttonMainFormConnect)
    $formMyAccounting.Controls.Add($buttonMainFormConfigurationManager)
    $formMyAccounting.ClientSize = '232, 76'
    $formMyAccounting.FormBorderStyle = 'FixedDialog'
    $formMyAccounting.MaximizeBox = $false
    $formMyAccounting.MinimizeBox = $false
    $formMyAccounting.Name = 'formMyAccounting'
    $formMyAccounting.StartPosition = 'CenterScreen'
    $formMyAccounting.Text = 'My Accounting'
    $formMyAccounting.add_Load($formMyAccounting_Load)
    #
    # buttonMainFormConnect
    #
    $buttonMainFormConnect.Location = '12, 12'
    $buttonMainFormConnect.Name = 'buttonMainFormConnect'
    $buttonMainFormConnect.Size = '100, 50'
    $buttonMainFormConnect.TabIndex = 0
    $buttonMainFormConnect.Text = 'Connect'
    $buttonMainFormConnect.UseVisualStyleBackColor = $true
    $buttonMainFormConnect.add_Click($buttonMainFormConnect_Click)
    #
    # buttonMainFormConfigurationManager
    #
    $buttonMainFormConfigurationManager.Location = '118, 12'
    $buttonMainFormConfigurationManager.Name = 'buttonMainFormConfigurationManager'
    $buttonMainFormConfigurationManager.Size = '100, 50'
    $buttonMainFormConfigurationManager.TabIndex = 1
    $buttonMainFormConfigurationManager.Text = 'Configuration Manager'
    $buttonMainFormConfigurationManager.UseVisualStyleBackColor = $true
    $buttonMainFormConfigurationManager.add_Click($buttonMainFormConfigurationManager_Click)
    #
    # timerConnectionCheck
    #
    $timerConnectionCheck.Interval = 10000
    $timerConnectionCheck.add_Tick($timerConnectionCheck_Tick)
    #
    # timerFormsOpen
    #
    $timerFormsOpen.Interval = 500
    $timerFormsOpen.add_Tick($timerFormsOpen_Tick)
    $formMyAccounting.ResumeLayout($false)
    #endregion Generated Form Code

    #----------------------------------------------

    #Save the initial state of the form
    $InitialFormWindowState = $formMyAccounting.WindowState
    #Init the OnLoad event to correct the initial state of the form
    $formMyAccounting.add_Load($Form_StateCorrection_Load)
    #Clean up the control events
    $formMyAccounting.add_FormClosed($Form_Cleanup_FormClosed)
    #Store the control values when form is closing
    $formMyAccounting.add_Closing($Form_StoreValues_Closing)
    #Show the Form
    return $formMyAccounting.ShowDialog()
}
#endregion Source: MainForm.psf

#region Source: QueryEditor.psf
function Call-QueryEditor_psf
{
    #----------------------------------------------
    #region Import the Assemblies
    #----------------------------------------------
    [void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    [void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    [void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    #endregion Import Assemblies

    #----------------------------------------------
    #region Generated Form Objects
    #----------------------------------------------
    [System.Windows.Forms.Application]::EnableVisualStyles()
    $formQueryEditor = New-Object -TypeName 'System.Windows.Forms.Form'
    $groupboxQueryEditorQueryText = New-Object -TypeName 'System.Windows.Forms.GroupBox'
    $richtextboxQueryEditorQueryText = New-Object -TypeName 'System.Windows.Forms.RichTextBox'
    $groupboxQueryEditorControls = New-Object -TypeName 'System.Windows.Forms.GroupBox'
    $buttonSaveAndLeaveQueryEditor = New-Object -TypeName 'System.Windows.Forms.Button'
    $buttonCloseQueryEditorWithoutSaving = New-Object -TypeName 'System.Windows.Forms.Button'
    $groupboxQueryEditorQueryName = New-Object -TypeName 'System.Windows.Forms.GroupBox'
    $textboxQueryEditorQueryName = New-Object -TypeName 'System.Windows.Forms.TextBox'
    $timerQueryEditorConnectionState = New-Object -TypeName 'System.Windows.Forms.Timer'
    $TimerInput = New-Object -TypeName 'System.Windows.Forms.Timer'
    $InitialFormWindowState = New-Object -TypeName 'System.Windows.Forms.FormWindowState'
    #endregion Generated Form Objects

    #----------------------------------------------
    # User Generated Script
    #----------------------------------------------
    $formQueryEditor_Load = {
        Set-Language
        Set-DisplayColor
        $timerQueryEditorConnectionState.Start()
        if ($script:QueryEditorMode -eq $script:QueryEditorModeEdit)
        {
            $textboxQueryEditorQueryName.Text = $script:QueryEditing
            $textboxQueryEditorQueryName.Enabled = $false
            $richtextboxQueryEditorQueryText.Text = (Get-ItemProperty -Path "$script:RegistryPath\Queries" -Name $script:QueryEditing).$script:QueryEditing
        }
        else
        {
            $textboxQueryEditorQueryName.Enabled = $true
        }
    }
	
    $buttonCloseQueryEditorWithoutSaving_Click = {
        $script:NewQuery = $script:QueryCurrentSelection
        $script:QueryEditerOpen = 0
        $formQueryEditor.Close()
    }
	
    $buttonSaveAndLeaveQueryEditor_Click = {
        if ($textboxQueryEditorQueryName.Text.Trim() -ne '' -and $richtextboxQueryEditorQueryText.Text.Trim() -ne '')
        {
            if ($richtextboxQueryEditorQueryText.Text.Trim() -match '^select\s+' -or $richtextboxQueryEditorQueryText.Text.Trim() -match '^with\s+')
            {
                if ($script:QueryEditorMode -eq $script:QueryEditorModeNew)
                {
                    if ((Get-ItemProperty -Path "$script:RegistryPath\Queries" -Name $($textboxQueryEditorQueryName.Text.Trim()) -ErrorAction 'SilentlyContinue').$($textboxQueryEditorQueryName.Text.Trim()) -eq $null)
                    {
                        New-ItemProperty -Path "$script:RegistryPath\Queries" -Name $($textboxQueryEditorQueryName.Text.Trim()) -PropertyType String -Value $($richtextboxQueryEditorQueryText.Text.Trim()) -Force
                        $script:QueryEditerOpen = 0
                        $script:NewQuery = $($textboxQueryEditorQueryName.Text.Trim())
                        $formQueryEditor.Close()
                    }
                    else
                    {
                        [void][System.Windows.Forms.MessageBox]::Show("$script:QueryExistsPart1 ""$($textboxQueryEditorQueryName.Text.Trim())"" $script:QueryExistsPart2.", $script:QueryExistsType)
                        $textboxQueryEditorQueryName.Focus()
                    }
                }
                if ($script:QueryEditorMode -eq $script:QueryEditorModeEdit)
                {
                    New-ItemProperty -Path "$script:RegistryPath\Queries" -Name $($textboxQueryEditorQueryName.Text.Trim()) -PropertyType String -Value $($richtextboxQueryEditorQueryText.Text.Trim()) -Force
                    $script:QueryEditerOpen = 0
                    $script:NewQuery = $($textboxQueryEditorQueryName.Text.Trim())
                    $formQueryEditor.Close()
                }
            }
            else
            {
                [void][System.Windows.Forms.MessageBox]::Show($script:QuerySelectCheck, $script:QuerySelectCheckErrorType)
                $richtextboxQueryEditorQueryText.Focus()
            }
        }
        else
        {
            $TimerInput.Start()
            if ($textboxQueryEditorQueryName.Text.Trim() -eq '')
            {
                $textboxQueryEditorQueryName.BackColor = 'LightCoral'
            }
            if ($richtextboxQueryEditorQueryText.Text.Trim() -eq '')
            {
                $richtextboxQueryEditorQueryText.BackColor = 'LightCoral'
            }
        }
    }
	
    $timerQueryEditorConnectionState_Tick = {
        if ($script:ConnectionState -eq 0)
        {
            $timerQueryEditorConnectionState.Stop()
            $formQueryEditor.Close()
        }
    }
	
    $timerInput_Tick = {
        $TimerInput.Stop()
        $textboxQueryEditorQueryName.BackColor = 'Window'
        $richtextboxQueryEditorQueryText.BackColor = 'Window'
    }
    # --End User Generated Script--
    #----------------------------------------------
    #region Generated Events
    #----------------------------------------------
	
    $Form_StateCorrection_Load = 
    {
        #Correct the initial state of the form to prevent the .Net maximized form issue
        $formQueryEditor.WindowState = $InitialFormWindowState
    }
	
    $Form_StoreValues_Closing = 
    {
        #Store the control values
        $script:QueryEditor_richtextboxQueryEditorQueryText = $richtextboxQueryEditorQueryText.Text
        $script:QueryEditor_textboxQueryEditorQueryName = $textboxQueryEditorQueryName.Text
    }

	
    $Form_Cleanup_FormClosed = 
    {
        #Remove all event handlers from the controls
        try
        {
            $buttonSaveAndLeaveQueryEditor.remove_Click($buttonSaveAndLeaveQueryEditor_Click)
            $buttonCloseQueryEditorWithoutSaving.remove_Click($buttonCloseQueryEditorWithoutSaving_Click)
            $formQueryEditor.remove_Load($formQueryEditor_Load)
            $timerQueryEditorConnectionState.remove_Tick($timerQueryEditorConnectionState_Tick)
            $TimerInput.remove_Tick($timerInput_Tick)
            $formQueryEditor.remove_Load($Form_StateCorrection_Load)
            $formQueryEditor.remove_Closing($Form_StoreValues_Closing)
            $formQueryEditor.remove_FormClosed($Form_Cleanup_FormClosed)
        }
        catch [Exception]
        {
 
        }
    }
    #endregion Generated Events

    #----------------------------------------------
    #region Generated Form Code
    #----------------------------------------------
    $formQueryEditor.SuspendLayout()
    $groupboxQueryEditorQueryText.SuspendLayout()
    $groupboxQueryEditorControls.SuspendLayout()
    $groupboxQueryEditorQueryName.SuspendLayout()
    #
    # formQueryEditor
    #
    $formQueryEditor.Controls.Add($groupboxQueryEditorQueryText)
    $formQueryEditor.Controls.Add($groupboxQueryEditorControls)
    $formQueryEditor.Controls.Add($groupboxQueryEditorQueryName)
    $formQueryEditor.CancelButton = $buttonCloseQueryEditorWithoutSaving
    $formQueryEditor.ClientSize = '526, 423'
    $formQueryEditor.ControlBox = $false
    $formQueryEditor.Name = 'formQueryEditor'
    $formQueryEditor.StartPosition = 'CenterScreen'
    $formQueryEditor.Text = 'Query Editor'
    $formQueryEditor.add_Load($formQueryEditor_Load)
    #
    # groupboxQueryEditorQueryText
    #
    $groupboxQueryEditorQueryText.Controls.Add($richtextboxQueryEditorQueryText)
    $groupboxQueryEditorQueryText.Dock = 'Fill'
    $groupboxQueryEditorQueryText.Location = '0, 42'
    $groupboxQueryEditorQueryText.Name = 'groupboxQueryEditorQueryText'
    $groupboxQueryEditorQueryText.Size = '526, 352'
    $groupboxQueryEditorQueryText.TabIndex = 5
    $groupboxQueryEditorQueryText.TabStop = $false
    $groupboxQueryEditorQueryText.Text = 'Query Text'
    #
    # richtextboxQueryEditorQueryText
    #
    $richtextboxQueryEditorQueryText.Dock = 'Fill'
    $richtextboxQueryEditorQueryText.Font = 'Microsoft Sans Serif, 14.25pt'
    $richtextboxQueryEditorQueryText.Location = '3, 16'
    $richtextboxQueryEditorQueryText.Name = 'richtextboxQueryEditorQueryText'
    $richtextboxQueryEditorQueryText.Size = '520, 333'
    $richtextboxQueryEditorQueryText.TabIndex = 0
    $richtextboxQueryEditorQueryText.Text = ''
    #
    # groupboxQueryEditorControls
    #
    $groupboxQueryEditorControls.Controls.Add($buttonSaveAndLeaveQueryEditor)
    $groupboxQueryEditorControls.Controls.Add($buttonCloseQueryEditorWithoutSaving)
    $groupboxQueryEditorControls.Dock = 'Bottom'
    $groupboxQueryEditorControls.Font = 'Microsoft Sans Serif, 0.25pt'
    $groupboxQueryEditorControls.Location = '0, 394'
    $groupboxQueryEditorControls.Name = 'groupboxQueryEditorControls'
    $groupboxQueryEditorControls.Size = '526, 29'
    $groupboxQueryEditorControls.TabIndex = 6
    $groupboxQueryEditorControls.TabStop = $false
    #
    # buttonSaveAndLeaveQueryEditor
    #
    $buttonSaveAndLeaveQueryEditor.Anchor = 'Bottom'
    $buttonSaveAndLeaveQueryEditor.Font = 'Microsoft Sans Serif, 8.25pt'
    $buttonSaveAndLeaveQueryEditor.Location = '3, 3'
    $buttonSaveAndLeaveQueryEditor.Name = 'buttonSaveAndLeaveQueryEditor'
    $buttonSaveAndLeaveQueryEditor.Size = '258, 23'
    $buttonSaveAndLeaveQueryEditor.TabIndex = 1
    $buttonSaveAndLeaveQueryEditor.Text = 'Save and leave query editor'
    $buttonSaveAndLeaveQueryEditor.UseVisualStyleBackColor = $true
    $buttonSaveAndLeaveQueryEditor.add_Click($buttonSaveAndLeaveQueryEditor_Click)
    #
    # buttonCloseQueryEditorWithoutSaving
    #
    $buttonCloseQueryEditorWithoutSaving.Anchor = 'Bottom'
    $buttonCloseQueryEditorWithoutSaving.DialogResult = 'Cancel'
    $buttonCloseQueryEditorWithoutSaving.Font = 'Microsoft Sans Serif, 8.25pt'
    $buttonCloseQueryEditorWithoutSaving.Location = '265, 3'
    $buttonCloseQueryEditorWithoutSaving.Name = 'buttonCloseQueryEditorWithoutSaving'
    $buttonCloseQueryEditorWithoutSaving.Size = '258, 23'
    $buttonCloseQueryEditorWithoutSaving.TabIndex = 2
    $buttonCloseQueryEditorWithoutSaving.Text = 'Close query editor without saving'
    $buttonCloseQueryEditorWithoutSaving.UseVisualStyleBackColor = $true
    $buttonCloseQueryEditorWithoutSaving.add_Click($buttonCloseQueryEditorWithoutSaving_Click)
    #
    # groupboxQueryEditorQueryName
    #
    $groupboxQueryEditorQueryName.Controls.Add($textboxQueryEditorQueryName)
    $groupboxQueryEditorQueryName.Dock = 'Top'
    $groupboxQueryEditorQueryName.Location = '0, 0'
    $groupboxQueryEditorQueryName.Name = 'groupboxQueryEditorQueryName'
    $groupboxQueryEditorQueryName.Size = '526, 42'
    $groupboxQueryEditorQueryName.TabIndex = 4
    $groupboxQueryEditorQueryName.TabStop = $false
    $groupboxQueryEditorQueryName.Text = 'Query Name'
    #
    # textboxQueryEditorQueryName
    #
    $textboxQueryEditorQueryName.Dock = 'Fill'
    $textboxQueryEditorQueryName.Location = '3, 16'
    $textboxQueryEditorQueryName.Name = 'textboxQueryEditorQueryName'
    $textboxQueryEditorQueryName.Size = '520, 20'
    $textboxQueryEditorQueryName.TabIndex = 3
    #
    # timerQueryEditorConnectionState
    #
    $timerQueryEditorConnectionState.Interval = 10000
    $timerQueryEditorConnectionState.add_Tick($timerQueryEditorConnectionState_Tick)
    #
    # timerInput
    #
    $TimerInput.Interval = 300
    $TimerInput.add_Tick($timerInput_Tick)
    $groupboxQueryEditorQueryName.ResumeLayout($false)
    $groupboxQueryEditorControls.ResumeLayout($false)
    $groupboxQueryEditorQueryText.ResumeLayout($false)
    $formQueryEditor.ResumeLayout($false)
    #endregion Generated Form Code

    #----------------------------------------------

    #Save the initial state of the form
    $InitialFormWindowState = $formQueryEditor.WindowState
    #Init the OnLoad event to correct the initial state of the form
    $formQueryEditor.add_Load($Form_StateCorrection_Load)
    #Clean up the control events
    $formQueryEditor.add_FormClosed($Form_Cleanup_FormClosed)
    #Store the control values when form is closing
    $formQueryEditor.add_Closing($Form_StoreValues_Closing)
    #Show the Form
    return $formQueryEditor.ShowDialog()
}
#endregion Source: QueryEditor.psf

#region Source: DatabaseManager.psf
function Call-DatabaseManager_psf
{
    #----------------------------------------------
    #region Import the Assemblies
    #----------------------------------------------
    [void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    [void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    [void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    [void][reflection.assembly]::Load('System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    #endregion Import Assemblies

    #----------------------------------------------
    #region Generated Form Objects
    #----------------------------------------------
    [System.Windows.Forms.Application]::EnableVisualStyles()
    $formDatabaseManager = New-Object -TypeName 'System.Windows.Forms.Form'
    $groupboxDatabaseManagerExistingDatabases = New-Object -TypeName 'System.Windows.Forms.GroupBox'
    $datagridviewDatabaseManager = New-Object -TypeName 'System.Windows.Forms.DataGridView'
    $groupboxDatabaseManagerControls = New-Object -TypeName 'System.Windows.Forms.GroupBox'
    $buttonDatabaseManagerClose = New-Object -TypeName 'System.Windows.Forms.Button'
    $groupboxDatabaseManagerCreate = New-Object -TypeName 'System.Windows.Forms.GroupBox'
    $buttonDatabaseManagerCreateDatabase = New-Object -TypeName 'System.Windows.Forms.Button'
    $labelDatabaseManagerName = New-Object -TypeName 'System.Windows.Forms.Label'
    $textboxDatabaseManager = New-Object -TypeName 'System.Windows.Forms.TextBox'
    $timerDatabaseSetupConnectionCheck = New-Object -TypeName 'System.Windows.Forms.Timer'
    $TimerInput = New-Object -TypeName 'System.Windows.Forms.Timer'
    $contextmenustripDatabaseManager = New-Object -TypeName 'System.Windows.Forms.ContextMenuStrip'
    $StatisticsToolStripMenuItem = New-Object -TypeName 'System.Windows.Forms.ToolStripMenuItem'
    $dropDatabaseToolStripMenuItem = New-Object -TypeName 'System.Windows.Forms.ToolStripMenuItem'
    $toolstripseparator1 = New-Object -TypeName 'System.Windows.Forms.ToolStripSeparator'
    $InitialFormWindowState = New-Object -TypeName 'System.Windows.Forms.FormWindowState'
    #endregion Generated Form Objects

    #----------------------------------------------
    # User Generated Script
    #----------------------------------------------
	
    $formDatabaseManager_Load = {
        $timerDatabaseSetupConnectionCheck.Start()
        $script:FormsOpen = 1
        Set-MyDataGridView -Query 'select name as Name, create_date as Created from sys.databases where database_id > 4 order by Created desc' -DataGridView $datagridviewDatabaseManager
        $script:DBNames = @()
        $datagridviewDatabaseManager.Rows |
        Select-Object -ExpandProperty Index |
        ForEach-Object -Process {
            $script:DBNames += $script:MyDataTable.Name[$_]
        }
        Set-Language
        Set-DisplayColor
    }
	
    $timerDatabaseSetupConnectionCheck_Tick = {
        if ($script:ConnectionState -eq 0)
        {
            $timerDatabaseSetupConnectionCheck.Stop()
            $formDatabaseManager.Close()
        }
    }
	
    $buttonDatabaseManagerClose_Click = {
        $timerDatabaseSetupConnectionCheck.Stop()
        $script:FormsOpen = 0
        $formDatabaseManager.Close()
    }
	
    $buttonDatabaseManagerCreateDatabase_Click = {
        $buttonDatabaseManagerCreateDatabase.Enabled = $false
        $datagridviewDatabaseManager.Enabled = $false
        if ($textboxDatabaseManager.Text.Trim() -ne '' -and $textboxDatabaseManager.Text.Trim() -notmatch '^[0-9]' -and $script:DBNames -notcontains $textboxDatabaseManager.Text.Trim())
        {
            $CreatingDatabase = Invoke-DatabaseTable @GetDatabaseTableParams -Query @"
CREATE DATABASE $($textboxDatabaseManager.Text.Trim());
"@ -ErrorCode | Select-Object -ExpandProperty ErrorCode
            #if ($CreatingDatabase -eq 0)
            #{ Write-Host 'DATABASE OK' }
			
            $script:SQLServerDatabase = $($textboxDatabaseManager.Text.Trim())
            Set-SQLConnection
            $ConfiguringDatabase = Invoke-DatabaseTable @GetDatabaseTableParams -Query @"
EXEC sp_configure 'default language', 21;
RECONFIGURE;
SET DATEFORMAT dmy;
"@ -ErrorCode | Select-Object -ExpandProperty ErrorCode
            #if ($ConfiguringDatabase -eq 0)
            #{ Write-Host 'Configuring OK' }
            $CreatingTables = Invoke-DatabaseTable @GetDatabaseTableParams -Query @"		
CREATE TABLE Stores
(
Store_Id int IDENTITY(1,1) PRIMARY KEY,
Name nvarchar(255) NOT NULL,
Address nvarchar(255)NOT NULL,
City nvarchar(255)NOT NULL
);
CREATE TABLE Categories
(
Category_Id int IDENTITY(1,1) PRIMARY KEY,
CategoryName nvarchar(255) NOT NULL UNIQUE
);
CREATE TABLE Kinds
(
Kind_Id int IDENTITY(1,1) PRIMARY KEY,
KindName nvarchar(255) NOT NULL,
Category_Id int FOREIGN KEY REFERENCES Categories(Category_Id) NOT NULL
);
CREATE TABLE Types
(
Type_Id int IDENTITY(1,1) PRIMARY KEY,
TypeName nvarchar(255) NOT NULL,
Kind_Id int FOREIGN KEY REFERENCES Kinds(Kind_Id) NOT NULL
);
CREATE TABLE Names
(
Name_Id int IDENTITY(1,1) PRIMARY KEY,
Name nvarchar(255) NOT NULL,
Type_Id int FOREIGN KEY REFERENCES Types(Type_Id)
);
CREATE TABLE Purchases
(
Purchase_Id int IDENTITY(1,1) PRIMARY KEY,
BuyDate datetime NOT NULL,
Quantity dec(10,3) NOT NULL,
Price smallmoney NOT NULL,
Store_Id int FOREIGN KEY REFERENCES Stores(Store_Id),
Category_Id int FOREIGN KEY REFERENCES Categories(Category_Id) NOT NULL,
Kind_Id int FOREIGN KEY REFERENCES Kinds(Kind_Id) NOT NULL,
Type_Id int FOREIGN KEY REFERENCES Types(Type_Id) NOT NULL,
Name_Id int FOREIGN KEY REFERENCES Names(Name_Id) NOT NULL
);
"@ -ErrorCode | Select-Object -ExpandProperty ErrorCode
            #if ($CreatingTables -eq 0)
            #{ Write-Host 'Tables OK' }
            Invoke-DatabaseTable @GetDatabaseTableParams -Query @"
CREATE VIEW MyData AS
(
SELECT  S.Name + ' ('+ S.[Address] + ') ' + S.City AS Store
		,C.CategoryName AS CategoryName
		,K.KindName AS KindName
		,T.TypeName AS TypeName
		,N.Name AS Name
		,CAST(P.Price AS DEC(9,2)) AS Price
		,CAST(P.Quantity AS DEC(10,3)) AS Quantity
		,CAST(P.Price*P.Quantity AS DEC(9,2)) AS PriceSum
		,CAST(P.BuyDate AS DATE) AS BuyDate
		,P.Purchase_Id AS Purchase_Id
		FROM Purchases AS P
INNER JOIN Stores AS S ON P.Store_Id = S.Store_Id
INNER JOIN Categories AS C ON P.Category_Id = C.Category_Id
INNER JOIN Kinds AS K ON P.Kind_Id = K.Kind_Id
INNER JOIN Types AS T ON P.Type_Id = T.Type_Id
INNER JOIN Names AS N ON P.Name_Id = N.Name_Id
);
"@
            $CreatingViews = Invoke-DatabaseTable @GetDatabaseTableParams -Query @"
SELECT OBJECT_ID('MyData') AS [View]
"@ | Select-Object -ExpandProperty View
            #if ($CreatingViews -ne [System.DBNull]::Value)
            #{ Write-Host 'Views OK' }
            $script:SQLServerDatabase = 'master'
            Set-SQLConnection
            Set-MyDataGridView -Query 'select name as Name, create_date as Created from sys.databases where database_id > 4 order by Created desc' -DataGridView $datagridviewDatabaseManager
            $script:DBNames = @()
            $datagridviewDatabaseManager.Rows |
            Select-Object -ExpandProperty Index |
            ForEach-Object -Process {
                $script:DBNames += $script:MyDataTable.Name[$_]
            }
            $textboxDatabaseManager.Clear()
        }
        else
        {
            if ($textboxDatabaseManager.Text.Trim() -eq '' -or $textboxDatabaseManager.Text.Trim() -match '^[0-9]')
            {
                $TimerInput.Start()
                $textboxDatabaseManager.BackColor = 'LightCoral'
            }
            if ($script:DBNames -contains $textboxDatabaseManager.Text.Trim())
            {
                [void][System.Windows.Forms.MessageBox]::Show("$script:DatabaseExistsPart1 ""$($textboxDatabaseManager.Text.Trim())"" $script:DatabaseExistsPart2", $script:CaptionError)
            }
            $textboxDatabaseManager.Focus()
        }
        $datagridviewDatabaseManager.Enabled = $true
        $buttonDatabaseManagerCreateDatabase.Enabled = $true
    }
	
    $timerInput_Tick = {
        $TimerInput.Stop()
        $textboxDatabaseManager.BackColor = 'Window'
    }
	
    function Load-DataGridView
    {
        <#
                .SYNOPSIS
                This functions helps you load items into a DataGridView.
	
                .DESCRIPTION
                Use this function to dynamically load items into the DataGridView control.
	
                .PARAMETER  DataGridView
                The ComboBox control you want to add items to.
	
                .PARAMETER  Item
                The object or objects you wish to load into the ComboBox's items collection.
		
                .PARAMETER  DataMember
                Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
        #>
        Param (
            [ValidateNotNull()]
            [Parameter(Mandatory = $true)]
            [System.Windows.Forms.DataGridView]$DataGridView,
            [ValidateNotNull()]
            [Parameter(Mandatory = $true)]
            $Item,
            [Parameter(Mandatory = $false)]
            [string]$DataMember
        )
        $DataGridView.SuspendLayout()
        $DataGridView.DataMember = $DataMember
		
        if ($Item -is [System.ComponentModel.IListSource]`
        -or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView])
        {
            $DataGridView.DataSource = $Item
        }
        else
        {
            $array = New-Object -TypeName System.Collections.ArrayList
			
            if ($Item -is [System.Collections.IList])
            {
                $array.AddRange($Item)
            }
            else
            {
                $array.Add($Item)
            }
            $DataGridView.DataSource = $array
        }
		
        $DataGridView.ResumeLayout()
    }
	
    $StatisticsToolStripMenuItem_Click = {
        $script:DatabaseStatistics = $($script:MyDataTable.Name[($datagridviewDatabaseManager.SelectedRows | Select-Object -ExpandProperty Index)])
        Call-DatabaseStatisticsForm_psf
    }
	
    $dropDatabaseToolStripMenuItem_Click = {
        $datagridviewDatabaseManager.Enabled = $false
        if ([System.Windows.Forms.MessageBox]::Show("$script:DatabaseDropPart1 ""$($script:MyDataTable.Name[($datagridviewDatabaseManager.SelectedRows | Select-Object -ExpandProperty Index)])"" $script:DatabaseDropPart2",$script:CaptionWarning, [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
        {
            $SQL_spids = (Invoke-DatabaseTable @GetDatabaseTableParams -Query "SELECT spid FROM sys.sysprocesses WHERE dbid > 0 and DB_NAME(dbid) = N'$($script:MyDataTable.Name[($datagridviewDatabaseManager.SelectedRows | Select-Object -ExpandProperty Index)])'" | Select-Object -ExpandProperty spid) -join ','
            Write-Host -Object $($SQL_spids)
            if ($SQL_spids -ne [System.DBNull]::Value)
            {
                foreach ($SQL_spid in $SQL_spids)
                {
                    Invoke-DatabaseTable @GetDatabaseTableParams -Query "kill $SQL_spid"
                }
            }
            Invoke-DatabaseTable @GetDatabaseTableParams -Query "drop database [$($script:MyDataTable.Name[($datagridviewDatabaseManager.SelectedRows | Select-Object -ExpandProperty Index)])]"
            Set-MyDataGridView -Query 'select name as Name, create_date as Created from sys.databases where database_id > 4 order by Created desc' -DataGridView $datagridviewDatabaseManager
            $script:DBNames = @()
            $datagridviewDatabaseManager.Rows |
            Select-Object -ExpandProperty Index |
            ForEach-Object -Process {
                $script:DBNames += $script:MyDataTable.Name[$_]
            }
        }
        $datagridviewDatabaseManager.Enabled = $true
    }
	
    $contextmenustripDatabaseManager_Opening = [System.ComponentModel.CancelEventHandler]{
        if ($datagridviewDatabaseManager.RowCount -gt 0)
        {
            $dropDatabaseToolStripMenuItem.Enabled = $true
            $StatisticsToolStripMenuItem.Enabled = $true
        }
        else
        {
            $dropDatabaseToolStripMenuItem.Enabled = $false
            $StatisticsToolStripMenuItem.Enabled = $false
        }
    }
    $textboxDatabaseManager_PreviewKeyDown = [System.Windows.Forms.PreviewKeyDownEventHandler]{
        if ($_.KeyCode -eq [System.Windows.Forms.Keys]::Enter)
        {
            &$buttonDatabaseManagerCreateDatabase_Click
        }
    }
    # --End User Generated Script--
    #----------------------------------------------
    #region Generated Events
    #----------------------------------------------
	
    $Form_StateCorrection_Load = 
    {
        #Correct the initial state of the form to prevent the .Net maximized form issue
        $formDatabaseManager.WindowState = $InitialFormWindowState
    }
	
    $Form_StoreValues_Closing = 
    {
        #Store the control values
        $script:DatabaseManager_textboxDatabaseManager = $textboxDatabaseManager.Text
    }

	
    $Form_Cleanup_FormClosed = 
    {
        #Remove all event handlers from the controls
        try
        {
            $buttonDatabaseManagerClose.remove_Click($buttonDatabaseManagerClose_Click)
            $buttonDatabaseManagerCreateDatabase.remove_Click($buttonDatabaseManagerCreateDatabase_Click)
            $textboxDatabaseManager.remove_PreviewKeyDown($textboxDatabaseManager_PreviewKeyDown)
            $formDatabaseManager.remove_Load($formDatabaseManager_Load)
            $timerDatabaseSetupConnectionCheck.remove_Tick($timerDatabaseSetupConnectionCheck_Tick)
            $TimerInput.remove_Tick($timerInput_Tick)
            $contextmenustripDatabaseManager.remove_Opening($contextmenustripDatabaseManager_Opening)
            $StatisticsToolStripMenuItem.remove_Click($StatisticsToolStripMenuItem_Click)
            $dropDatabaseToolStripMenuItem.remove_Click($dropDatabaseToolStripMenuItem_Click)
            $formDatabaseManager.remove_Load($Form_StateCorrection_Load)
            $formDatabaseManager.remove_Closing($Form_StoreValues_Closing)
            $formDatabaseManager.remove_FormClosed($Form_Cleanup_FormClosed)
        }
        catch [Exception]
        {
 
        }
    }
    #endregion Generated Events

    #----------------------------------------------
    #region Generated Form Code
    #----------------------------------------------
    $formDatabaseManager.SuspendLayout()
    $groupboxDatabaseManagerExistingDatabases.SuspendLayout()
    $groupboxDatabaseManagerControls.SuspendLayout()
    $groupboxDatabaseManagerCreate.SuspendLayout()
    #
    # formDatabaseManager
    #
    $formDatabaseManager.Controls.Add($groupboxDatabaseManagerExistingDatabases)
    $formDatabaseManager.Controls.Add($groupboxDatabaseManagerControls)
    $formDatabaseManager.Controls.Add($groupboxDatabaseManagerCreate)
    $formDatabaseManager.CancelButton = $buttonDatabaseManagerClose
    $formDatabaseManager.ClientSize = '237, 381'
    $formDatabaseManager.ControlBox = $false
    $formDatabaseManager.FormBorderStyle = 'FixedDialog'
    $formDatabaseManager.Name = 'formDatabaseManager'
    $formDatabaseManager.StartPosition = 'CenterScreen'
    $formDatabaseManager.Text = 'Database Manager'
    $formDatabaseManager.add_Load($formDatabaseManager_Load)
    #
    # groupboxDatabaseManagerExistingDatabases
    #
    $groupboxDatabaseManagerExistingDatabases.Controls.Add($datagridviewDatabaseManager)
    $groupboxDatabaseManagerExistingDatabases.Dock = 'Fill'
    $groupboxDatabaseManagerExistingDatabases.Location = '0, 66'
    $groupboxDatabaseManagerExistingDatabases.Name = 'groupboxDatabaseManagerExistingDatabases'
    $groupboxDatabaseManagerExistingDatabases.Size = '237, 286'
    $groupboxDatabaseManagerExistingDatabases.TabIndex = 0
    $groupboxDatabaseManagerExistingDatabases.TabStop = $false
    $groupboxDatabaseManagerExistingDatabases.Text = 'Existing Databases'
    #
    # datagridviewDatabaseManager
    #
    $datagridviewDatabaseManager.AllowUserToAddRows = $false
    $datagridviewDatabaseManager.AllowUserToDeleteRows = $false
    $datagridviewDatabaseManager.AllowUserToResizeColumns = $false
    $datagridviewDatabaseManager.AllowUserToResizeRows = $false
    $System_Windows_Forms_DataGridViewCellStyle_1 = New-Object -TypeName 'System.Windows.Forms.DataGridViewCellStyle'
    $System_Windows_Forms_DataGridViewCellStyle_1.BackColor = 'Gainsboro'
    $datagridviewDatabaseManager.AlternatingRowsDefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_1
    $datagridviewDatabaseManager.AutoSizeColumnsMode = 'Fill'
    $datagridviewDatabaseManager.AutoSizeRowsMode = 'AllCells'
    $datagridviewDatabaseManager.ColumnHeadersHeightSizeMode = 'AutoSize'
    $datagridviewDatabaseManager.ContextMenuStrip = $contextmenustripDatabaseManager
    $datagridviewDatabaseManager.Cursor = 'Hand'
    $datagridviewDatabaseManager.Dock = 'Fill'
    $datagridviewDatabaseManager.Location = '3, 16'
    $datagridviewDatabaseManager.MultiSelect = $false
    $datagridviewDatabaseManager.Name = 'datagridviewDatabaseManager'
    $datagridviewDatabaseManager.ReadOnly = $true
    $datagridviewDatabaseManager.RowHeadersWidth = 24
    $datagridviewDatabaseManager.RowHeadersWidthSizeMode = 'DisableResizing'
    $datagridviewDatabaseManager.SelectionMode = 'FullRowSelect'
    $datagridviewDatabaseManager.Size = '231, 267'
    $datagridviewDatabaseManager.TabIndex = 1
    #
    # groupboxDatabaseManagerControls
    #
    $groupboxDatabaseManagerControls.Controls.Add($buttonDatabaseManagerClose)
    $groupboxDatabaseManagerControls.Dock = 'Bottom'
    $groupboxDatabaseManagerControls.Font = 'Microsoft Sans Serif, 0.25pt'
    $groupboxDatabaseManagerControls.Location = '0, 352'
    $groupboxDatabaseManagerControls.Name = 'groupboxDatabaseManagerControls'
    $groupboxDatabaseManagerControls.Size = '237, 29'
    $groupboxDatabaseManagerControls.TabIndex = 7
    $groupboxDatabaseManagerControls.TabStop = $false
    #
    # buttonDatabaseManagerClose
    #
    $buttonDatabaseManagerClose.DialogResult = 'Cancel'
    $buttonDatabaseManagerClose.Dock = 'Bottom'
    $buttonDatabaseManagerClose.Font = 'Microsoft Sans Serif, 8.25pt'
    $buttonDatabaseManagerClose.Location = '3, 3'
    $buttonDatabaseManagerClose.Name = 'buttonDatabaseManagerClose'
    $buttonDatabaseManagerClose.Size = '231, 23'
    $buttonDatabaseManagerClose.TabIndex = 1
    $buttonDatabaseManagerClose.Text = 'Close'
    $buttonDatabaseManagerClose.UseVisualStyleBackColor = $true
    $buttonDatabaseManagerClose.add_Click($buttonDatabaseManagerClose_Click)
    #
    # groupboxDatabaseManagerCreate
    #
    $groupboxDatabaseManagerCreate.Controls.Add($buttonDatabaseManagerCreateDatabase)
    $groupboxDatabaseManagerCreate.Controls.Add($labelDatabaseManagerName)
    $groupboxDatabaseManagerCreate.Controls.Add($textboxDatabaseManager)
    $groupboxDatabaseManagerCreate.Dock = 'Top'
    $groupboxDatabaseManagerCreate.Location = '0, 0'
    $groupboxDatabaseManagerCreate.Name = 'groupboxDatabaseManagerCreate'
    $groupboxDatabaseManagerCreate.Size = '237, 66'
    $groupboxDatabaseManagerCreate.TabIndex = 0
    $groupboxDatabaseManagerCreate.TabStop = $false
    $groupboxDatabaseManagerCreate.Text = 'New Database'
    #
    # buttonDatabaseManagerCreateDatabase
    #
    $buttonDatabaseManagerCreateDatabase.Location = '162, 36'
    $buttonDatabaseManagerCreateDatabase.Name = 'buttonDatabaseManagerCreateDatabase'
    $buttonDatabaseManagerCreateDatabase.Size = '72, 23'
    $buttonDatabaseManagerCreateDatabase.TabIndex = 2
    $buttonDatabaseManagerCreateDatabase.Text = 'Create'
    $buttonDatabaseManagerCreateDatabase.UseVisualStyleBackColor = $true
    $buttonDatabaseManagerCreateDatabase.add_Click($buttonDatabaseManagerCreateDatabase_Click)
    #
    # labelDatabaseManagerName
    #
    $labelDatabaseManagerName.Location = '6, 16'
    $labelDatabaseManagerName.Name = 'labelDatabaseManagerName'
    $labelDatabaseManagerName.Size = '150, 20'
    $labelDatabaseManagerName.TabIndex = 5
    $labelDatabaseManagerName.Text = 'Name'
    $labelDatabaseManagerName.TextAlign = 'MiddleLeft'
    #
    # textboxDatabaseManager
    #
    $textboxDatabaseManager.Location = '6, 39'
    $textboxDatabaseManager.MaxLength = 20
    $textboxDatabaseManager.Name = 'textboxDatabaseManager'
    $textboxDatabaseManager.Size = '150, 20'
    $textboxDatabaseManager.TabIndex = 1
    $textboxDatabaseManager.TextAlign = 'Center'
    $textboxDatabaseManager.add_PreviewKeyDown($textboxDatabaseManager_PreviewKeyDown)
    #
    # timerDatabaseSetupConnectionCheck
    #
    $timerDatabaseSetupConnectionCheck.Interval = 10000
    $timerDatabaseSetupConnectionCheck.add_Tick($timerDatabaseSetupConnectionCheck_Tick)
    #
    # timerInput
    #
    $TimerInput.Interval = 300
    $TimerInput.add_Tick($timerInput_Tick)
    #
    # contextmenustripDatabaseManager
    #
    [void]$contextmenustripDatabaseManager.Items.Add($StatisticsToolStripMenuItem)
    [void]$contextmenustripDatabaseManager.Items.Add($toolstripseparator1)
    [void]$contextmenustripDatabaseManager.Items.Add($dropDatabaseToolStripMenuItem)
    $contextmenustripDatabaseManager.Name = 'contextmenustripDatabaseManager'
    $contextmenustripDatabaseManager.ShowImageMargin = $false
    $contextmenustripDatabaseManager.Size = '223, 32'
    $contextmenustripDatabaseManager.add_Opening($contextmenustripDatabaseManager_Opening)
    #
    # StatisticsToolStripMenuItem
    #
    $StatisticsToolStripMenuItem.Name = 'StatisticsToolStripMenuItem'
    $StatisticsToolStripMenuItem.Size = '222, 22'
    $StatisticsToolStripMenuItem.Text = 'Show selected database statistics'
    $StatisticsToolStripMenuItem.add_Click($StatisticsToolStripMenuItem_Click)
    #
    # dropDatabaseToolStripMenuItem
    #
    $dropDatabaseToolStripMenuItem.Name = 'dropDatabaseToolStripMenuItem'
    $dropDatabaseToolStripMenuItem.Size = '222, 22'
    $dropDatabaseToolStripMenuItem.Text = 'Drop selected database'
    $dropDatabaseToolStripMenuItem.add_Click($dropDatabaseToolStripMenuItem_Click)
    #
    # toolstripseparator1
    #
    $toolstripseparator1.Name = 'toolstripseparator1'
    $toolstripseparator1.Size = '219, 6'
    $groupboxDatabaseManagerCreate.ResumeLayout($false)
    $groupboxDatabaseManagerControls.ResumeLayout($false)
    $groupboxDatabaseManagerExistingDatabases.ResumeLayout($false)
    $formDatabaseManager.ResumeLayout($false)
    #endregion Generated Form Code

    #----------------------------------------------

    #Save the initial state of the form
    $InitialFormWindowState = $formDatabaseManager.WindowState
    #Init the OnLoad event to correct the initial state of the form
    $formDatabaseManager.add_Load($Form_StateCorrection_Load)
    #Clean up the control events
    $formDatabaseManager.add_FormClosed($Form_Cleanup_FormClosed)
    #Store the control values when form is closing
    $formDatabaseManager.add_Closing($Form_StoreValues_Closing)
    #Show the Form
    return $formDatabaseManager.ShowDialog()
}
#endregion Source: DatabaseManager.psf

#region Source: DatabaseStatisticsForm.psf
function Call-DatabaseStatisticsForm_psf
{
    #----------------------------------------------
    #region Import the Assemblies
    #----------------------------------------------
    [void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    [void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    [void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    #endregion Import Assemblies

    #----------------------------------------------
    #region Generated Form Objects
    #----------------------------------------------
    [System.Windows.Forms.Application]::EnableVisualStyles()
    $formDatabaseStatisticsForm = New-Object -TypeName 'System.Windows.Forms.Form'
    $groupboxDatabaseStatisticsData = New-Object -TypeName 'System.Windows.Forms.GroupBox'
    $datagridviewDatabaseStatistics = New-Object -TypeName 'System.Windows.Forms.DataGridView'
    $groupboxDatabaseStatisticsControls = New-Object -TypeName 'System.Windows.Forms.GroupBox'
    $buttonDatabaseStatisticsClose = New-Object -TypeName 'System.Windows.Forms.Button'
    $timerDatabaseStatisticsConnectionCheck = New-Object -TypeName 'System.Windows.Forms.Timer'
    $InitialFormWindowState = New-Object -TypeName 'System.Windows.Forms.FormWindowState'
    #endregion Generated Form Objects

    #----------------------------------------------
    # User Generated Script
    #----------------------------------------------
	
    $formDatabaseStatisticsForm_Load = {
        $timerDatabaseStatisticsConnectionCheck.Start()
        Set-StatisticsGridView -DataGridView $datagridviewDatabaseStatistics
        Set-Language
        Set-DisplayColor
    }
	
    function Load-DataGridView
    {
        <#
                .SYNOPSIS
                This functions helps you load items into a DataGridView.
	
                .DESCRIPTION
                Use this function to dynamically load items into the DataGridView control.
	
                .PARAMETER  DataGridView
                The ComboBox control you want to add items to.
	
                .PARAMETER  Item
                The object or objects you wish to load into the ComboBox's items collection.
		
                .PARAMETER  DataMember
                Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
        #>
        Param (
            [ValidateNotNull()]
            [Parameter(Mandatory = $true)]
            [System.Windows.Forms.DataGridView]$DataGridView,
            [ValidateNotNull()]
            [Parameter(Mandatory = $true)]
            $Item,
            [Parameter(Mandatory = $false)]
            [string]$DataMember
        )
        $DataGridView.SuspendLayout()
        $DataGridView.DataMember = $DataMember
		
        if ($Item -is [System.ComponentModel.IListSource]`
        -or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView])
        {
            $DataGridView.DataSource = $Item
        }
        else
        {
            $array = New-Object -TypeName System.Collections.ArrayList
			
            if ($Item -is [System.Collections.IList])
            {
                $array.AddRange($Item)
            }
            else
            {
                $array.Add($Item)
            }
            $DataGridView.DataSource = $array
        }
		
        $DataGridView.ResumeLayout()
    }
	
    $buttonDatabaseStatisticsClose_Click = {
        $formDatabaseStatisticsForm.Close()
    }
	
    $timerDatabaseStatisticsConnectionCheck_Tick = {
        if ($script:ConnectionState -eq 0)
        {
            $timerDatabaseStatisticsConnectionCheck.Stop()
            $formDatabaseStatisticsForm.Close()
        }
    }
    # --End User Generated Script--
    #----------------------------------------------
    #region Generated Events
    #----------------------------------------------
	
    $Form_StateCorrection_Load = 
    {
        #Correct the initial state of the form to prevent the .Net maximized form issue
        $formDatabaseStatisticsForm.WindowState = $InitialFormWindowState
    }
	
    $Form_StoreValues_Closing = 
    {
        #Store the control values
    }

	
    $Form_Cleanup_FormClosed = 
    {
        #Remove all event handlers from the controls
        try
        {
            $buttonDatabaseStatisticsClose.remove_Click($buttonDatabaseStatisticsClose_Click)
            $formDatabaseStatisticsForm.remove_Load($formDatabaseStatisticsForm_Load)
            $timerDatabaseStatisticsConnectionCheck.remove_Tick($timerDatabaseStatisticsConnectionCheck_Tick)
            $formDatabaseStatisticsForm.remove_Load($Form_StateCorrection_Load)
            $formDatabaseStatisticsForm.remove_Closing($Form_StoreValues_Closing)
            $formDatabaseStatisticsForm.remove_FormClosed($Form_Cleanup_FormClosed)
        }
        catch [Exception]
        {
 
        }
    }
    #endregion Generated Events

    #----------------------------------------------
    #region Generated Form Code
    #----------------------------------------------
    $formDatabaseStatisticsForm.SuspendLayout()
    $groupboxDatabaseStatisticsData.SuspendLayout()
    $groupboxDatabaseStatisticsControls.SuspendLayout()
    #
    # formDatabaseStatisticsForm
    #
    $formDatabaseStatisticsForm.Controls.Add($groupboxDatabaseStatisticsData)
    $formDatabaseStatisticsForm.Controls.Add($groupboxDatabaseStatisticsControls)
    $formDatabaseStatisticsForm.CancelButton = $buttonDatabaseStatisticsClose
    $formDatabaseStatisticsForm.ClientSize = '784, 662'
    $formDatabaseStatisticsForm.ControlBox = $false
    $formDatabaseStatisticsForm.Name = 'formDatabaseStatisticsForm'
    $formDatabaseStatisticsForm.StartPosition = 'CenterScreen'
    $formDatabaseStatisticsForm.Text = 'Database Statistics'
    $formDatabaseStatisticsForm.WindowState = 'Maximized'
    $formDatabaseStatisticsForm.add_Load($formDatabaseStatisticsForm_Load)
    #
    # groupboxDatabaseStatisticsData
    #
    $groupboxDatabaseStatisticsData.Controls.Add($datagridviewDatabaseStatistics)
    $groupboxDatabaseStatisticsData.Dock = 'Fill'
    $groupboxDatabaseStatisticsData.Font = 'Microsoft Sans Serif, 0.25pt'
    $groupboxDatabaseStatisticsData.Location = '0, 0'
    $groupboxDatabaseStatisticsData.Name = 'groupboxDatabaseStatisticsData'
    $groupboxDatabaseStatisticsData.Size = '784, 633'
    $groupboxDatabaseStatisticsData.TabIndex = 0
    $groupboxDatabaseStatisticsData.TabStop = $false
    #
    # datagridviewDatabaseStatistics
    #
    $datagridviewDatabaseStatistics.AllowUserToAddRows = $false
    $datagridviewDatabaseStatistics.AllowUserToDeleteRows = $false
    $datagridviewDatabaseStatistics.AllowUserToResizeColumns = $false
    $datagridviewDatabaseStatistics.AllowUserToResizeRows = $false
    $System_Windows_Forms_DataGridViewCellStyle_1 = New-Object -TypeName 'System.Windows.Forms.DataGridViewCellStyle'
    $System_Windows_Forms_DataGridViewCellStyle_1.BackColor = 'Gainsboro'
    $datagridviewDatabaseStatistics.AlternatingRowsDefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_1
    $datagridviewDatabaseStatistics.AutoSizeColumnsMode = 'Fill'
    $datagridviewDatabaseStatistics.AutoSizeRowsMode = 'AllCells'
    $datagridviewDatabaseStatistics.ColumnHeadersHeightSizeMode = 'AutoSize'
    $datagridviewDatabaseStatistics.Cursor = 'Hand'
    $datagridviewDatabaseStatistics.Dock = 'Fill'
    $datagridviewDatabaseStatistics.Location = '3, 4'
    $datagridviewDatabaseStatistics.Name = 'datagridviewDatabaseStatistics'
    $datagridviewDatabaseStatistics.ReadOnly = $true
    $datagridviewDatabaseStatistics.RowHeadersWidth = 24
    $datagridviewDatabaseStatistics.RowHeadersWidthSizeMode = 'DisableResizing'
    $datagridviewDatabaseStatistics.Size = '778, 626'
    $datagridviewDatabaseStatistics.TabIndex = 0
    #
    # groupboxDatabaseStatisticsControls
    #
    $groupboxDatabaseStatisticsControls.Controls.Add($buttonDatabaseStatisticsClose)
    $groupboxDatabaseStatisticsControls.Dock = 'Bottom'
    $groupboxDatabaseStatisticsControls.Font = 'Microsoft Sans Serif, 0.25pt'
    $groupboxDatabaseStatisticsControls.Location = '0, 633'
    $groupboxDatabaseStatisticsControls.Name = 'groupboxDatabaseStatisticsControls'
    $groupboxDatabaseStatisticsControls.Size = '784, 29'
    $groupboxDatabaseStatisticsControls.TabIndex = 1
    $groupboxDatabaseStatisticsControls.TabStop = $false
    #
    # buttonDatabaseStatisticsClose
    #
    $buttonDatabaseStatisticsClose.DialogResult = 'Cancel'
    $buttonDatabaseStatisticsClose.Dock = 'Bottom'
    $buttonDatabaseStatisticsClose.Font = 'Microsoft Sans Serif, 8.25pt'
    $buttonDatabaseStatisticsClose.Location = '3, 3'
    $buttonDatabaseStatisticsClose.Name = 'buttonDatabaseStatisticsClose'
    $buttonDatabaseStatisticsClose.Size = '778, 23'
    $buttonDatabaseStatisticsClose.TabIndex = 0
    $buttonDatabaseStatisticsClose.Text = 'Close'
    $buttonDatabaseStatisticsClose.UseVisualStyleBackColor = $true
    $buttonDatabaseStatisticsClose.add_Click($buttonDatabaseStatisticsClose_Click)
    #
    # timerDatabaseStatisticsConnectionCheck
    #
    $timerDatabaseStatisticsConnectionCheck.Interval = 10000
    $timerDatabaseStatisticsConnectionCheck.add_Tick($timerDatabaseStatisticsConnectionCheck_Tick)
    $groupboxDatabaseStatisticsControls.ResumeLayout($false)
    $groupboxDatabaseStatisticsData.ResumeLayout($false)
    $formDatabaseStatisticsForm.ResumeLayout($false)
    #endregion Generated Form Code

    #----------------------------------------------

    #Save the initial state of the form
    $InitialFormWindowState = $formDatabaseStatisticsForm.WindowState
    #Init the OnLoad event to correct the initial state of the form
    $formDatabaseStatisticsForm.add_Load($Form_StateCorrection_Load)
    #Clean up the control events
    $formDatabaseStatisticsForm.add_FormClosed($Form_Cleanup_FormClosed)
    #Store the control values when form is closing
    $formDatabaseStatisticsForm.add_Closing($Form_StoreValues_Closing)
    #Show the Form
    return $formDatabaseStatisticsForm.ShowDialog()
}
#endregion Source: DatabaseStatisticsForm.psf

#region Source: DataOutputCharts.psf
function Call-DataOutputCharts_psf
{
    #----------------------------------------------
    #region Import the Assemblies
    #----------------------------------------------
    [void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    [void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    [void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    [void][reflection.assembly]::Load('System.Windows.Forms.DataVisualization, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35')
    #endregion Import Assemblies

    #----------------------------------------------
    #region Generated Form Objects
    #----------------------------------------------
    [System.Windows.Forms.Application]::EnableVisualStyles()
    $formDataCharts = New-Object -TypeName 'System.Windows.Forms.Form'
    $formDataChartsgroupboxCharts = New-Object -TypeName 'System.Windows.Forms.GroupBox'
    $comboboxDataChartsPallete = New-Object -TypeName 'System.Windows.Forms.ComboBox'
    $checkboxDataCharts3D = New-Object -TypeName 'System.Windows.Forms.CheckBox'
    $comboboxDataCharts = New-Object -TypeName 'System.Windows.Forms.ComboBox'
    $chart = New-Object -TypeName 'System.Windows.Forms.DataVisualization.Charting.Chart'
    $formDataChartsgroupboxControls = New-Object -TypeName 'System.Windows.Forms.GroupBox'
    $buttonDataChartsClose = New-Object -TypeName 'System.Windows.Forms.Button'
    $buttonDataChartsSave = New-Object -TypeName 'System.Windows.Forms.Button'
    $forDataChartsSavefiledialog = New-Object -TypeName 'System.Windows.Forms.SaveFileDialog'
    $timerDataChartsConnectionCheck = New-Object -TypeName 'System.Windows.Forms.Timer'
    $InitialFormWindowState = New-Object -TypeName 'System.Windows.Forms.FormWindowState'
    #endregion Generated Form Objects

    #----------------------------------------------
    # User Generated Script
    #----------------------------------------------
	
    $formDataCharts_Load = {
        Set-Language
        Set-DisplayColor
        $timerDataChartsConnectionCheck.Start()
        $ChartTypes = 'Area', 'Bar', 'BoxPlot', 'Bubble', 'Candlestick', 'Column', 'Doughnut', 'ErrorBar', 'FastLine', 'FastPoint', 'Funnel', 'Kagi', 'Line', 'Pie', 'Point', 'PointAndFigure', 'Polar', 'Pyramid', 'Radar', 'Range', 'RangeBar', 'RangeColumn', 'Renko', 'Spline', 'SplineArea', 'SplineRange', 'StackedArea100', 'StackedBar', 'StackedBar100', 'StackedColumn', 'StackedColumn100', 'StepLine', 'Stock', 'ThreeLineBreak'
        $comboboxDataCharts.Items.Clear()
        foreach ($ChartSingleType in $ChartTypes) 
        {
            Load-ComboBox -ComboBox $comboboxDataCharts -Items $ChartSingleType -Append
        }
        $comboboxDataCharts.SelectedItem = 'Pie'
        $ChartPalettes = 'BrightPastel', 'SeaGreen', 'Fire', 'Chocolate', 'Berry', 'SemiTransparent', 'EarthTones', 'Pastel', 'Light', 'Excel', 'Grayscale', 'Bright'
        $comboboxDataChartsPallete.Items.Clear()
        foreach ($ChartSinglePalette in $ChartPalettes)
        {
            Load-ComboBox -ComboBox $comboboxDataChartsPallete -Items $ChartSinglePalette -Append
        }
        Set-Charts -ChartType 'Pie' -Title "$script:ChartsTitle $script:ChartsManagerItem"
        $comboboxDataChartsPallete.SelectedItem = 'BrightPastel'
    }
	
    function Load-Chart
    {
        <#
                .SYNOPSIS
                This functions helps you plot points on a chart
	
                .DESCRIPTION
                Use the function to plot points on a chart or add more charts to a chart control
	
                .PARAMETER  ChartControl
                The Chart Control you when to add points to
	
                .PARAMETER  XPoints
                Set the X Axis Points. These can be strings or numerical values.
	
                .PARAMETER  YPoints
                Set the Y Axis Points. These can be strings or numerical values.
		
                .PARAMETER  XTitle
                Set the Title for the X Axis.
	
                .PARAMETER  YTitle
                Set the Title for the Y Axis.
		
                .PARAMETER  Title
                Set the Title for the chart.
		
                .PARAMETER  ChartType
                Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum
	
                .PARAMETER SeriesIndex
                Set the settings of a particular Series and corresponding ChartArea
	
                .PARAMETER TitleIndex
                Set the settings of a particular Title
		
                .PARAMETER SeriesName
                Set the settings of a particular Series using its name and corresponding ChartArea. 
                The Series will be created if not found.
                If SeriesIndex is set, it will replace the Series' name if the Series does not exist
		
                .PARAMETER Enable3D
                The chart will be rendered in 3D.
		
                .PARAMETER Disable3D
                The chart will be rendered in 2D.	
		
                .PARAMETER Append
                When this switch is used, a new ChartArea is added to Chart Control.
	
                .LINK
                http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
		
        #>
        Param( #$XPoints, $YPoints, $XTitle, $YTitle, $Title, $ChartStyle)
            [ValidateNotNull()]
            [Parameter(Position = 1,Mandatory = $true)]
            [System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
            ,
            [ValidateNotNull()]
            [Parameter(Position = 2,Mandatory = $true)]
            $XPoints
            ,
            [Parameter(Position = 3,Mandatory = $true)]
            $YPoints
            ,
            [Parameter(Position = 4,Mandatory = $false)]
            [string]$XTitle
            ,
            [Parameter(Position = 5,Mandatory = $false)]
            [string]$YTitle
            ,
            [Parameter(Position = 6,Mandatory = $false)]
            [string]$Title
            ,
            [Parameter(Position = 7,Mandatory = $false)]
            [System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType
            ,
            [Parameter(Position = 8,Mandatory = $false)]
            $SeriesIndex = -1
            ,
            [Parameter(Position = 9,Mandatory = $false)]
            $TitleIndex = 0,
            [Parameter(Mandatory = $false)]
            [string]$SeriesName = $null,
            [switch]$Enable3D,
            [switch]$Disable3D,
        [switch]$Append)
	
        $ChartAreaIndex = 0
        if($Append)
        {
            $name = 'ChartArea ' + ($ChartControl.ChartAreas.Count + 1).ToString()
            $ChartArea = $ChartControl.ChartAreas.Add($name)
            $ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
			
            $name = 'Series ' + ($ChartControl.Series.Count + 1).ToString()
            $Series = $ChartControl.Series.Add($name) 
            $SeriesIndex = $ChartControl.Series.Count - 1
	
            $Series.ChartArea = $ChartArea.Name
			
            if($Title)
            {
                $name = 'Title ' + ($ChartControl.Titles.Count + 1).ToString()
                $TitleObj = $ChartControl.Titles.Add($Title)
                $TitleIndex = $ChartControl.Titles.Count - 1	
                $TitleObj.DockedToChartArea = $ChartArea.Name
                $TitleObj.IsDockedInsideChartArea = $false
            }
        }
        else
        {
            if($ChartControl.ChartAreas.Count -eq 0)
            {
                $name = 'ChartArea ' + ($ChartControl.ChartAreas.Count + 1).ToString()
                [void]$ChartControl.ChartAreas.Add($name)
                $ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
            }	
			
            if($ChartControl.Series.Count -eq 0)
            {
                if(-not $SeriesName)
                {
                    $SeriesName = 'Series ' + ($ChartControl.Series.Count + 1).ToString()
                }
				
                $Series = $ChartControl.Series.Add($SeriesName) 
                $SeriesIndex = $ChartControl.Series.Count - 1
                $Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
            }
            elseif($SeriesName)
            {
                $Series = $ChartControl.Series.FindByName($SeriesName)
					
                if($Series -eq $null)
                {
                    if(($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
                    {
                        $Series = $ChartControl.Series[$SeriesIndex]
                        $Series.Name = $SeriesName
                    }
                    else
                    {
                        $Series = $ChartControl.Series.Add($SeriesName)
                        $SeriesIndex = $ChartControl.Series.Count - 1
                    }
					
                    $Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
                }
                else
                {
                    $SeriesIndex = $ChartControl.Series.IndexOf($Series)
                    $ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
                }		
            }
        }
		
        if(($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
        {
            $SeriesIndex = 0
        }
		
        $Series = $ChartControl.Series[$SeriesIndex]
        $Series.Points.Clear()
        $ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
		
        if($Enable3D)
        {
            $ChartArea.Area3DStyle.Enable3D = $true
        }
        elseif($Disable3D)
        {
            $ChartArea.Area3DStyle.Enable3D = $false
        }
		
        if($Title)
        {
            if($ChartControl.Titles.Count -eq 0)
            {
                #$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
                $TitleObj = $ChartControl.Titles.Add($Title)
                $TitleIndex = $ChartControl.Titles.Count - 1
                $TitleObj.DockedToChartArea = $ChartArea.Name
                $TitleObj.IsDockedInsideChartArea = $false
            }
			
            $ChartControl.Titles[$TitleIndex].Text = $Title
        }
		
        if($ChartType)
        {
            $Series.ChartType = $ChartType
        }
		
        if($XTitle)
        {
            $ChartArea.AxisX.Title = $XTitle
        }
		
        if($YTitle)
        {
            $ChartArea.AxisY.Title = $YTitle
        }
		
        if($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
        {
            $array = New-Object -TypeName System.Collections.ArrayList
            $array.Add($XPoints)
            $XPoints = $array
        }
		
        if($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
        {
            $array = New-Object -TypeName System.Collections.ArrayList
            $array.Add($YPoints)
            $YPoints = $array
        }
		
        $Series.Points.DataBindXY($XPoints, $YPoints)
    }
    function Clear-Chart
    {
        <#
                .SYNOPSIS
                This function clears the contents of the chart
	
                .DESCRIPTION
                Use the function to remove contents from the chart control
	
                .PARAMETER  ChartControl
                The Chart Control to clear
	
                .PARAMETER  LeaveSingleChart
                Leaves the first chart and removes all others from the control
		
                .LINK
                http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
        #>
        Param (	
            [ValidateNotNull()]
            [Parameter(Position = 1,Mandatory = $true)]
            [System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
            ,
            [Parameter(Position = 2, Mandatory = $false)]
            [Switch]$LeaveSingleChart
        )
		
        $count = 0	
        if($LeaveSingleChart)
        {
            $count = 1
        }
		
        while($ChartControl.Series.Count -gt $count)
        {
            $ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
        }
		
        while($ChartControl.ChartAreas.Count -gt $count)
        {
            $ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
        }
		
        while($ChartControl.Titles.Count -gt $count)
        {
            $ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
        }
		
        if($ChartControl.Series.Count -gt 0)
        {
            $ChartControl.Series[0].Points.Clear()
        }
    }
    $buttonDataChartsSave_Click = {
        if ($forDataChartsSavefiledialog.ShowDialog() -eq 'OK')
        {
            $chart.SaveImage($forDataChartsSavefiledialog.FileName, 'PNG')
        }
    }
	
    $buttonDataChartsClose_Click = {
        $script:ChartsManagerOpen = 0
        $formDataCharts.Close()	
    }
	
    function Load-ComboBox 
    {
        <#
                .SYNOPSIS
                This functions helps you load items into a ComboBox.
	
                .DESCRIPTION
                Use this function to dynamically load items into the ComboBox control.
	
                .PARAMETER  ComboBox
                The ComboBox control you want to add items to.
	
                .PARAMETER  Items
                The object or objects you wish to load into the ComboBox's Items collection.
	
                .PARAMETER  DisplayMember
                Indicates the property to display for the items in this control.
		
                .PARAMETER  Append
                Adds the item(s) to the ComboBox without clearing the Items collection.
		
                .EXAMPLE
                Load-ComboBox $combobox1 "Red", "White", "Blue"
		
                .EXAMPLE
                Load-ComboBox $combobox1 "Red" -Append
                Load-ComboBox $combobox1 "White" -Append
                Load-ComboBox $combobox1 "Blue" -Append
		
                .EXAMPLE
                Load-ComboBox $combobox1 (Get-Process) "ProcessName"
        #>
        Param (
            [ValidateNotNull()]
            [Parameter(Mandatory = $true)]
            [System.Windows.Forms.ComboBox]$ComboBox,
            [ValidateNotNull()]
            [Parameter(Mandatory = $true)]
            $Items,
            [Parameter(Mandatory = $false)]
            [string]$DisplayMember,
            [switch]$Append
        )
		
        if(-not $Append)
        {
            $ComboBox.Items.Clear()
        }
		
        if($Items -is [Object[]])
        {
            $ComboBox.Items.AddRange($Items)
        }
        elseif ($Items -is [Array])
        {
            $ComboBox.BeginUpdate()
            foreach($obj in $Items)
            {
                $ComboBox.Items.Add($obj)
            }
            $ComboBox.EndUpdate()
        }
        else
        {
            $ComboBox.Items.Add($Items)
        }
	
        $ComboBox.DisplayMember = $DisplayMember
    }
	
    $comboboxDataCharts_SelectedIndexChanged = {
        Set-Charts -ChartType $($comboboxDataCharts.SelectedItem) -Title "$script:ChartsTitle $script:ChartsManagerItem"
    }
	
    $timerDataChartsConnectionCheck_Tick = {
        if ($script:ConnectionState -eq 0)
        {
            $timerDataChartsConnectionCheck.Stop()
            $formDataCharts.Close()
        }
    }
	
    $checkboxDataCharts3D_CheckedChanged = {
        Set-Charts -ChartType $($comboboxDataCharts.SelectedItem) -Title "$script:ChartsTitle $script:ChartsManagerItem"
    }
	
    $comboboxDataChartsPallete_SelectedIndexChanged = {
        $chart.Palette = $($comboboxDataChartsPallete.SelectedItem)
        Set-Charts -ChartType $($comboboxDataCharts.SelectedItem) -Title "$script:ChartsTitle $script:ChartsManagerItem"
    }
    # --End User Generated Script--
    #----------------------------------------------
    #region Generated Events
    #----------------------------------------------
	
    $Form_StateCorrection_Load = 
    {
        #Correct the initial state of the form to prevent the .Net maximized form issue
        $formDataCharts.WindowState = $InitialFormWindowState
    }
	
    $Form_StoreValues_Closing = 
    {
        #Store the control values
        $script:DataOutputCharts_comboboxDataChartsPallete_SelectedItem = $comboboxDataChartsPallete.SelectedItems
        $script:DataOutputCharts_checkboxDataCharts3D = $checkboxDataCharts3D.Checked
        $script:DataOutputCharts_comboboxDataCharts_SelectedItem = $comboboxDataCharts.SelectedItems
    }

	
    $Form_Cleanup_FormClosed = 
    {
        #Remove all event handlers from the controls
        try
        {
            $comboboxDataChartsPallete.remove_SelectedIndexChanged($comboboxDataChartsPallete_SelectedIndexChanged)
            $checkboxDataCharts3D.remove_CheckedChanged($checkboxDataCharts3D_CheckedChanged)
            $comboboxDataCharts.remove_SelectedIndexChanged($comboboxDataCharts_SelectedIndexChanged)
            $buttonDataChartsClose.remove_Click($buttonDataChartsClose_Click)
            $buttonDataChartsSave.remove_Click($buttonDataChartsSave_Click)
            $formDataCharts.remove_Load($formDataCharts_Load)
            $timerDataChartsConnectionCheck.remove_Tick($timerDataChartsConnectionCheck_Tick)
            $formDataCharts.remove_Load($Form_StateCorrection_Load)
            $formDataCharts.remove_Closing($Form_StoreValues_Closing)
            $formDataCharts.remove_FormClosed($Form_Cleanup_FormClosed)
        }
        catch [Exception]
        {
 
        }
    }
    #endregion Generated Events

    #----------------------------------------------
    #region Generated Form Code
    #----------------------------------------------
    $formDataCharts.SuspendLayout()
    $formDataChartsgroupboxCharts.SuspendLayout()
    $chart.BeginInit()
    $formDataChartsgroupboxControls.SuspendLayout()
    #
    # formDataCharts
    #
    $formDataCharts.Controls.Add($formDataChartsgroupboxCharts)
    $formDataCharts.Controls.Add($formDataChartsgroupboxControls)
    $formDataCharts.CancelButton = $buttonDataChartsClose
    $formDataCharts.ClientSize = '526, 423'
    $formDataCharts.ControlBox = $false
    $formDataCharts.Name = 'formDataCharts'
    $formDataCharts.StartPosition = 'CenterScreen'
    $formDataCharts.Text = 'Charts Manager'
    $formDataCharts.add_Load($formDataCharts_Load)
    #
    # formDataChartsgroupboxCharts
    #
    $formDataChartsgroupboxCharts.Controls.Add($comboboxDataChartsPallete)
    $formDataChartsgroupboxCharts.Controls.Add($checkboxDataCharts3D)
    $formDataChartsgroupboxCharts.Controls.Add($comboboxDataCharts)
    $formDataChartsgroupboxCharts.Controls.Add($chart)
    $formDataChartsgroupboxCharts.Dock = 'Fill'
    $formDataChartsgroupboxCharts.Font = 'Microsoft Sans Serif, 0.25pt'
    $formDataChartsgroupboxCharts.Location = '0, 0'
    $formDataChartsgroupboxCharts.Name = 'formDataChartsgroupboxCharts'
    $formDataChartsgroupboxCharts.Size = '526, 394'
    $formDataChartsgroupboxCharts.TabIndex = 1
    $formDataChartsgroupboxCharts.TabStop = $false
    #
    # comboboxDataChartsPallete
    #
    $comboboxDataChartsPallete.Anchor = 'Bottom, Left'
    $comboboxDataChartsPallete.DropDownStyle = 'DropDownList'
    $comboboxDataChartsPallete.Font = 'Microsoft Sans Serif, 8.25pt'
    $comboboxDataChartsPallete.FormattingEnabled = $true
    $comboboxDataChartsPallete.Location = '134, 370'
    $comboboxDataChartsPallete.Name = 'comboboxDataChartsPallete'
    $comboboxDataChartsPallete.Size = '125, 21'
    $comboboxDataChartsPallete.TabIndex = 3
    $comboboxDataChartsPallete.add_SelectedIndexChanged($comboboxDataChartsPallete_SelectedIndexChanged)
    #
    # checkboxDataCharts3D
    #
    $checkboxDataCharts3D.Anchor = 'Bottom, Left'
    $checkboxDataCharts3D.BackColor = 'White'
    $checkboxDataCharts3D.Checked = $true
    $checkboxDataCharts3D.CheckState = 'Checked'
    $checkboxDataCharts3D.Font = 'Microsoft Sans Serif, 8.25pt'
    $checkboxDataCharts3D.Location = '265, 370'
    $checkboxDataCharts3D.Name = 'checkboxDataCharts3D'
    $checkboxDataCharts3D.Size = '40, 21'
    $checkboxDataCharts3D.TabIndex = 2
    $checkboxDataCharts3D.Text = '3D'
    $checkboxDataCharts3D.UseVisualStyleBackColor = $false
    $checkboxDataCharts3D.add_CheckedChanged($checkboxDataCharts3D_CheckedChanged)
    #
    # comboboxDataCharts
    #
    $comboboxDataCharts.Anchor = 'Bottom, Left'
    $comboboxDataCharts.DropDownStyle = 'DropDownList'
    $comboboxDataCharts.Font = 'Microsoft Sans Serif, 8.25pt'
    $comboboxDataCharts.FormattingEnabled = $true
    $comboboxDataCharts.Location = '3, 370'
    $comboboxDataCharts.Name = 'comboboxDataCharts'
    $comboboxDataCharts.Size = '125, 21'
    $comboboxDataCharts.TabIndex = 1
    $comboboxDataCharts.add_SelectedIndexChanged($comboboxDataCharts_SelectedIndexChanged)
    #
    # chart
    #
    $System_Windows_Forms_DataVisualization_Charting_ChartArea_1 = New-Object -TypeName 'System.Windows.Forms.DataVisualization.Charting.ChartArea'
    $System_Windows_Forms_DataVisualization_Charting_ChartArea_1.Name = 'ChartArea1'
    [void]$chart.ChartAreas.Add($System_Windows_Forms_DataVisualization_Charting_ChartArea_1)
    $chart.Cursor = 'Hand'
    $chart.Dock = 'Fill'
    $System_Windows_Forms_DataVisualization_Charting_Legend_2 = New-Object -TypeName 'System.Windows.Forms.DataVisualization.Charting.Legend'
    $System_Windows_Forms_DataVisualization_Charting_Legend_2.Name = 'Legend1'
    [void]$chart.Legends.Add($System_Windows_Forms_DataVisualization_Charting_Legend_2)
    $chart.Location = '3, 4'
    $chart.Name = 'chart'
    $System_Windows_Forms_DataVisualization_Charting_Series_3 = New-Object -TypeName 'System.Windows.Forms.DataVisualization.Charting.Series'
    $System_Windows_Forms_DataVisualization_Charting_Series_3.ChartArea = 'ChartArea1'
    $System_Windows_Forms_DataVisualization_Charting_Series_3.Legend = 'Legend1'
    $System_Windows_Forms_DataVisualization_Charting_Series_3.Name = 'Series1'
    [void]$chart.Series.Add($System_Windows_Forms_DataVisualization_Charting_Series_3)
    $chart.Size = '520, 387'
    $chart.TabIndex = 0
    #
    # formDataChartsgroupboxControls
    #
    $formDataChartsgroupboxControls.Controls.Add($buttonDataChartsClose)
    $formDataChartsgroupboxControls.Controls.Add($buttonDataChartsSave)
    $formDataChartsgroupboxControls.Dock = 'Bottom'
    $formDataChartsgroupboxControls.Font = 'Microsoft Sans Serif, 0.25pt'
    $formDataChartsgroupboxControls.Location = '0, 394'
    $formDataChartsgroupboxControls.Name = 'formDataChartsgroupboxControls'
    $formDataChartsgroupboxControls.Size = '526, 29'
    $formDataChartsgroupboxControls.TabIndex = 2
    $formDataChartsgroupboxControls.TabStop = $false
    #
    # buttonDataChartsClose
    #
    $buttonDataChartsClose.Anchor = 'Bottom'
    $buttonDataChartsClose.DialogResult = 'Cancel'
    $buttonDataChartsClose.Font = 'Microsoft Sans Serif, 8.25pt'
    $buttonDataChartsClose.Location = '265, 3'
    $buttonDataChartsClose.Name = 'buttonDataChartsClose'
    $buttonDataChartsClose.Size = '258, 23'
    $buttonDataChartsClose.TabIndex = 1
    $buttonDataChartsClose.Text = 'Close charts manager'
    $buttonDataChartsClose.UseVisualStyleBackColor = $true
    $buttonDataChartsClose.add_Click($buttonDataChartsClose_Click)
    #
    # buttonDataChartsSave
    #
    $buttonDataChartsSave.Anchor = 'Bottom'
    $buttonDataChartsSave.Font = 'Microsoft Sans Serif, 8.25pt'
    $buttonDataChartsSave.Location = '3, 3'
    $buttonDataChartsSave.Name = 'buttonDataChartsSave'
    $buttonDataChartsSave.Size = '258, 23'
    $buttonDataChartsSave.TabIndex = 0
    $buttonDataChartsSave.Text = 'Save chart picture to disk'
    $buttonDataChartsSave.UseVisualStyleBackColor = $true
    $buttonDataChartsSave.add_Click($buttonDataChartsSave_Click)
    #
    # forDataChartsSavefiledialog
    #
    $forDataChartsSavefiledialog.DefaultExt = 'png'
    $forDataChartsSavefiledialog.Filter = 'PNG Image (.png)|*.png'
    $forDataChartsSavefiledialog.ShowHelp = $true
    #
    # timerDataChartsConnectionCheck
    #
    $timerDataChartsConnectionCheck.Interval = 10000
    $timerDataChartsConnectionCheck.add_Tick($timerDataChartsConnectionCheck_Tick)
    $formDataChartsgroupboxControls.ResumeLayout($false)
    $chart.EndInit()
    $formDataChartsgroupboxCharts.ResumeLayout($false)
    $formDataCharts.ResumeLayout($false)
    #endregion Generated Form Code

    #----------------------------------------------

    #Save the initial state of the form
    $InitialFormWindowState = $formDataCharts.WindowState
    #Init the OnLoad event to correct the initial state of the form
    $formDataCharts.add_Load($Form_StateCorrection_Load)
    #Clean up the control events
    $formDataCharts.add_FormClosed($Form_Cleanup_FormClosed)
    #Store the control values when form is closing
    $formDataCharts.add_Closing($Form_StoreValues_Closing)
    #Show the Form
    return $formDataCharts.ShowDialog()
}
#endregion Source: DataOutputCharts.psf

#Start the application
Main ($Commandline)
