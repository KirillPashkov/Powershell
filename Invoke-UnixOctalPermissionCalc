<#
        Generated on:       22.05.2014 16:51
        Generated by:       Kirill Pashkov
#>

function Main 
{
    if((Call-MainForm_psf) -eq 'OK')
    {

    }
	
    $global:ExitCode = 0
}

function Call-MainForm_psf
{
    [System.Windows.Forms.Application]::EnableVisualStyles()
    $MainForm = New-Object -TypeName 'System.Windows.Forms.Form'
    $buttonInfo = New-Object -TypeName 'System.Windows.Forms.Button'
    $Result = New-Object -TypeName 'System.Windows.Forms.Label'
    $groupbox4 = New-Object -TypeName 'System.Windows.Forms.GroupBox'
    $checkboxOtherExecute = New-Object -TypeName 'System.Windows.Forms.CheckBox'
    $checkboxOtherWrite = New-Object -TypeName 'System.Windows.Forms.CheckBox'
    $checkboxOtherRead = New-Object -TypeName 'System.Windows.Forms.CheckBox'
    $groupbox3 = New-Object -TypeName 'System.Windows.Forms.GroupBox'
    $checkboxGroupExecute = New-Object -TypeName 'System.Windows.Forms.CheckBox'
    $checkboxGroupWrite = New-Object -TypeName 'System.Windows.Forms.CheckBox'
    $checkboxGroupRead = New-Object -TypeName 'System.Windows.Forms.CheckBox'
    $groupbox2 = New-Object -TypeName 'System.Windows.Forms.GroupBox'
    $checkboxUserExecute = New-Object -TypeName 'System.Windows.Forms.CheckBox'
    $checkboxUserWrite = New-Object -TypeName 'System.Windows.Forms.CheckBox'
    $checkboxUserRead = New-Object -TypeName 'System.Windows.Forms.CheckBox'
    $groupbox1 = New-Object -TypeName 'System.Windows.Forms.GroupBox'
    $buttonStickyBit = New-Object -TypeName 'System.Windows.Forms.Button'
    $buttonSetGID = New-Object -TypeName 'System.Windows.Forms.Button'
    $buttonSetUID = New-Object -TypeName 'System.Windows.Forms.Button'
    $checkboxStickyBit = New-Object -TypeName 'System.Windows.Forms.CheckBox'
    $checkboxSetgid = New-Object -TypeName 'System.Windows.Forms.CheckBox'
    $checkboxSetuid = New-Object -TypeName 'System.Windows.Forms.CheckBox'
    $InitialFormWindowState = New-Object -TypeName 'System.Windows.Forms.FormWindowState'
  
    $OnLoadFormEvent = {
        Set-Octal
    }
	
    $checkboxSetuid_CheckedChanged = {
        Set-Octal
    }
	
    $checkboxSetgid_CheckedChanged = {
        Set-Octal
    }
	
    $checkboxStickyBit_CheckedChanged = {
        Set-Octal
    }
	
    $checkboxUserRead_CheckedChanged = {
        Set-Octal
    }
	
    $checkboxUserWrite_CheckedChanged = {
        Set-Octal
    }
	
    $checkboxUserExecute_CheckedChanged = {
        Set-Octal
    }
	
    $checkboxGroupRead_CheckedChanged = {
        Set-Octal
    }
	
    $checkboxGroupWrite_CheckedChanged = {
        Set-Octal
    }
	
    $checkboxGroupExecute_CheckedChanged = {
        Set-Octal
    }
	
    $checkboxOtherRead_CheckedChanged = {
        Set-Octal
    }
	
    $checkboxOtherWrite_CheckedChanged = {
        Set-Octal
    }
	
    $checkboxOtherExecute_CheckedChanged = {
        Set-Octal
    }
	
    $buttonSetUID_Click = {
        Call-Help_psf -Item 'SetUID'
    }
	
    $buttonSetGID_Click = {
        Call-Help_psf -Item 'SetGID'
    }
	
    $buttonStickyBit_Click = {
        Call-Help_psf -Item 'Sticky Bit'
    }
	
    $buttonInfo_Click = {
        Call-Help_psf -Item 'Info'
    }
   
    $Form_StateCorrection_Load = 
    {
        $MainForm.WindowState = $InitialFormWindowState
    }
	
    $Form_StoreValues_Closing = 
    {
        $script:MainForm_checkboxOtherExecute = $checkboxOtherExecute.Checked
        $script:MainForm_checkboxOtherWrite = $checkboxOtherWrite.Checked
        $script:MainForm_checkboxOtherRead = $checkboxOtherRead.Checked
        $script:MainForm_checkboxGroupExecute = $checkboxGroupExecute.Checked
        $script:MainForm_checkboxGroupWrite = $checkboxGroupWrite.Checked
        $script:MainForm_checkboxGroupRead = $checkboxGroupRead.Checked
        $script:MainForm_checkboxUserExecute = $checkboxUserExecute.Checked
        $script:MainForm_checkboxUserWrite = $checkboxUserWrite.Checked
        $script:MainForm_checkboxUserRead = $checkboxUserRead.Checked
        $script:MainForm_checkboxStickyBit = $checkboxStickyBit.Checked
        $script:MainForm_checkboxSetgid = $checkboxSetgid.Checked
        $script:MainForm_checkboxSetuid = $checkboxSetuid.Checked
    }

	
    $Form_Cleanup_FormClosed = 
    {
        try
        {
            $buttonInfo.remove_Click($buttonInfo_Click)
            $checkboxOtherExecute.remove_CheckedChanged($checkboxOtherExecute_CheckedChanged)
            $checkboxOtherWrite.remove_CheckedChanged($checkboxOtherWrite_CheckedChanged)
            $checkboxOtherRead.remove_CheckedChanged($checkboxOtherRead_CheckedChanged)
            $checkboxGroupExecute.remove_CheckedChanged($checkboxGroupExecute_CheckedChanged)
            $checkboxGroupWrite.remove_CheckedChanged($checkboxGroupWrite_CheckedChanged)
            $checkboxGroupRead.remove_CheckedChanged($checkboxGroupRead_CheckedChanged)
            $checkboxUserExecute.remove_CheckedChanged($checkboxUserExecute_CheckedChanged)
            $checkboxUserWrite.remove_CheckedChanged($checkboxUserWrite_CheckedChanged)
            $checkboxUserRead.remove_CheckedChanged($checkboxUserRead_CheckedChanged)
            $buttonStickyBit.remove_Click($buttonStickyBit_Click)
            $buttonSetGID.remove_Click($buttonSetGID_Click)
            $buttonSetUID.remove_Click($buttonSetUID_Click)
            $checkboxStickyBit.remove_CheckedChanged($checkboxStickyBit_CheckedChanged)
            $checkboxSetgid.remove_CheckedChanged($checkboxSetgid_CheckedChanged)
            $checkboxSetuid.remove_CheckedChanged($checkboxSetuid_CheckedChanged)
            $MainForm.remove_Load($OnLoadFormEvent)
            $MainForm.remove_Load($Form_StateCorrection_Load)
            $MainForm.remove_Closing($Form_StoreValues_Closing)
            $MainForm.remove_FormClosed($Form_Cleanup_FormClosed)
        }
        catch [Exception]
        {

        }
    }

    $MainForm.SuspendLayout()
    $groupbox4.SuspendLayout()
    $groupbox3.SuspendLayout()
    $groupbox2.SuspendLayout()
    $groupbox1.SuspendLayout()
    #
    # MainForm
    #
    $MainForm.Controls.Add($buttonInfo)
    $MainForm.Controls.Add($Result)
    $MainForm.Controls.Add($groupbox4)
    $MainForm.Controls.Add($groupbox3)
    $MainForm.Controls.Add($groupbox2)
    $MainForm.Controls.Add($groupbox1)
    $MainForm.ClientSize = '604, 162'
    $MainForm.FormBorderStyle = 'FixedSingle'
    $MainForm.MaximizeBox = $False
    $MainForm.MinimizeBox = $False
    $MainForm.Name = 'MainForm'
    $MainForm.ShowIcon = $False
    $MainForm.ShowInTaskbar = $False
    $MainForm.StartPosition = 'CenterScreen'
    $MainForm.Text = 'Unix Permissions Calculator'
    $MainForm.add_Load($OnLoadFormEvent)
    #
    # buttonInfo
    #
    $buttonInfo.BackColor = 'Control'
    $buttonInfo.FlatStyle = 'Flat'
    $buttonInfo.Font = 'Arial, 8.25pt'
    $buttonInfo.ForeColor = 'Control'
    $buttonInfo.Location = '594, 5'
    $buttonInfo.Name = 'buttonInfo'
    $buttonInfo.Size = '5, 5'
    $buttonInfo.TabIndex = 5
    $buttonInfo.UseVisualStyleBackColor = $False
    $buttonInfo.add_Click($buttonInfo_Click)
    #
    # Result
    #
    $Result.Font = 'Arial, 12pt, style=Bold'
    $Result.Location = '13, 131'
    $Result.Name = 'Result'
    $Result.Size = '578, 23'
    $Result.TabIndex = 4
    $Result.TextAlign = 'MiddleCenter'
    #
    # groupbox4
    #
    $groupbox4.Controls.Add($checkboxOtherExecute)
    $groupbox4.Controls.Add($checkboxOtherWrite)
    $groupbox4.Controls.Add($checkboxOtherRead)
    $groupbox4.Font = 'Arial, 12pt'
    $groupbox4.Location = '451, 8'
    $groupbox4.Name = 'groupbox4'
    $groupbox4.Size = '140, 120'
    $groupbox4.TabIndex = 2
    $groupbox4.TabStop = $False
    $groupbox4.Text = 'Other'
    #
    # checkboxOtherExecute
    #
    $checkboxOtherExecute.Location = '6, 83'
    $checkboxOtherExecute.Name = 'checkboxOtherExecute'
    $checkboxOtherExecute.Size = '90, 23'
    $checkboxOtherExecute.TabIndex = 2
    $checkboxOtherExecute.Text = 'Execute'
    $checkboxOtherExecute.UseVisualStyleBackColor = $True
    $checkboxOtherExecute.add_CheckedChanged($checkboxOtherExecute_CheckedChanged)
    #
    # checkboxOtherWrite
    #
    $checkboxOtherWrite.Location = '6, 52'
    $checkboxOtherWrite.Name = 'checkboxOtherWrite'
    $checkboxOtherWrite.Size = '90, 23'
    $checkboxOtherWrite.TabIndex = 1
    $checkboxOtherWrite.Text = 'Write'
    $checkboxOtherWrite.UseVisualStyleBackColor = $True
    $checkboxOtherWrite.add_CheckedChanged($checkboxOtherWrite_CheckedChanged)
    #
    # checkboxOtherRead
    #
    $checkboxOtherRead.Location = '6, 23'
    $checkboxOtherRead.Name = 'checkboxOtherRead'
    $checkboxOtherRead.Size = '90, 23'
    $checkboxOtherRead.TabIndex = 0
    $checkboxOtherRead.Text = 'Read'
    $checkboxOtherRead.UseVisualStyleBackColor = $True
    $checkboxOtherRead.add_CheckedChanged($checkboxOtherRead_CheckedChanged)
    #
    # groupbox3
    #
    $groupbox3.Controls.Add($checkboxGroupExecute)
    $groupbox3.Controls.Add($checkboxGroupWrite)
    $groupbox3.Controls.Add($checkboxGroupRead)
    $groupbox3.Font = 'Arial, 12pt'
    $groupbox3.Location = '305, 8'
    $groupbox3.Name = 'groupbox3'
    $groupbox3.Size = '140, 120'
    $groupbox3.TabIndex = 1
    $groupbox3.TabStop = $False
    $groupbox3.Text = 'Group'
    #
    # checkboxGroupExecute
    #
    $checkboxGroupExecute.Location = '6, 83'
    $checkboxGroupExecute.Name = 'checkboxGroupExecute'
    $checkboxGroupExecute.Size = '90, 23'
    $checkboxGroupExecute.TabIndex = 2
    $checkboxGroupExecute.Text = 'Execute'
    $checkboxGroupExecute.UseVisualStyleBackColor = $True
    $checkboxGroupExecute.add_CheckedChanged($checkboxGroupExecute_CheckedChanged)
    #
    # checkboxGroupWrite
    #
    $checkboxGroupWrite.Location = '6, 54'
    $checkboxGroupWrite.Name = 'checkboxGroupWrite'
    $checkboxGroupWrite.Size = '90, 23'
    $checkboxGroupWrite.TabIndex = 1
    $checkboxGroupWrite.Text = 'Write'
    $checkboxGroupWrite.UseVisualStyleBackColor = $True
    $checkboxGroupWrite.add_CheckedChanged($checkboxGroupWrite_CheckedChanged)
    #
    # checkboxGroupRead
    #
    $checkboxGroupRead.Location = '6, 23'
    $checkboxGroupRead.Name = 'checkboxGroupRead'
    $checkboxGroupRead.Size = '90, 23'
    $checkboxGroupRead.TabIndex = 0
    $checkboxGroupRead.Text = 'Read'
    $checkboxGroupRead.UseVisualStyleBackColor = $True
    $checkboxGroupRead.add_CheckedChanged($checkboxGroupRead_CheckedChanged)
    #
    # groupbox2
    #
    $groupbox2.Controls.Add($checkboxUserExecute)
    $groupbox2.Controls.Add($checkboxUserWrite)
    $groupbox2.Controls.Add($checkboxUserRead)
    $groupbox2.Font = 'Arial, 12pt'
    $groupbox2.Location = '159, 8'
    $groupbox2.Name = 'groupbox2'
    $groupbox2.Size = '140, 120'
    $groupbox2.TabIndex = 0
    $groupbox2.TabStop = $False
    $groupbox2.Text = 'User'
    #
    # checkboxUserExecute
    #
    $checkboxUserExecute.Location = '6, 83'
    $checkboxUserExecute.Name = 'checkboxUserExecute'
    $checkboxUserExecute.Size = '90, 23'
    $checkboxUserExecute.TabIndex = 2
    $checkboxUserExecute.Text = 'Execute'
    $checkboxUserExecute.UseVisualStyleBackColor = $True
    $checkboxUserExecute.add_CheckedChanged($checkboxUserExecute_CheckedChanged)
    #
    # checkboxUserWrite
    #
    $checkboxUserWrite.Location = '6, 54'
    $checkboxUserWrite.Name = 'checkboxUserWrite'
    $checkboxUserWrite.Size = '90, 23'
    $checkboxUserWrite.TabIndex = 1
    $checkboxUserWrite.Text = 'Write'
    $checkboxUserWrite.UseVisualStyleBackColor = $True
    $checkboxUserWrite.add_CheckedChanged($checkboxUserWrite_CheckedChanged)
    #
    # checkboxUserRead
    #
    $checkboxUserRead.Location = '6, 25'
    $checkboxUserRead.Name = 'checkboxUserRead'
    $checkboxUserRead.Size = '90, 23'
    $checkboxUserRead.TabIndex = 0
    $checkboxUserRead.Text = 'Read'
    $checkboxUserRead.UseVisualStyleBackColor = $True
    $checkboxUserRead.add_CheckedChanged($checkboxUserRead_CheckedChanged)
    #
    # groupbox1
    #
    $groupbox1.Controls.Add($buttonStickyBit)
    $groupbox1.Controls.Add($buttonSetGID)
    $groupbox1.Controls.Add($buttonSetUID)
    $groupbox1.Controls.Add($checkboxStickyBit)
    $groupbox1.Controls.Add($checkboxSetgid)
    $groupbox1.Controls.Add($checkboxSetuid)
    $groupbox1.Font = 'Arial, 12pt'
    $groupbox1.Location = '13, 8'
    $groupbox1.Name = 'groupbox1'
    $groupbox1.Size = '140, 120'
    $groupbox1.TabIndex = 3
    $groupbox1.TabStop = $False
    $groupbox1.Text = 'Special'
    #
    # buttonStickyBit
    #
    $buttonStickyBit.FlatStyle = 'Popup'
    $buttonStickyBit.Font = 'Arial, 10pt'
    $buttonStickyBit.Location = '102, 83'
    $buttonStickyBit.Name = 'buttonStickyBit'
    $buttonStickyBit.Size = '23, 23'
    $buttonStickyBit.TabIndex = 5
    $buttonStickyBit.Text = '?'
    $buttonStickyBit.UseVisualStyleBackColor = $True
    $buttonStickyBit.add_Click($buttonStickyBit_Click)
    #
    # buttonSetGID
    #
    $buttonSetGID.FlatStyle = 'Popup'
    $buttonSetGID.Font = 'Arial, 10pt'
    $buttonSetGID.Location = '102, 54'
    $buttonSetGID.Name = 'buttonSetGID'
    $buttonSetGID.Size = '23, 23'
    $buttonSetGID.TabIndex = 3
    $buttonSetGID.Text = '?'
    $buttonSetGID.UseVisualStyleBackColor = $True
    $buttonSetGID.add_Click($buttonSetGID_Click)
    #
    # buttonSetUID
    #
    $buttonSetUID.FlatStyle = 'Popup'
    $buttonSetUID.Font = 'Arial, 10pt'
    $buttonSetUID.Location = '102, 25'
    $buttonSetUID.Name = 'buttonSetUID'
    $buttonSetUID.Size = '23, 23'
    $buttonSetUID.TabIndex = 1
    $buttonSetUID.Text = '?'
    $buttonSetUID.UseVisualStyleBackColor = $True
    $buttonSetUID.add_Click($buttonSetUID_Click)
    #
    # checkboxStickyBit
    #
    $checkboxStickyBit.Location = '6, 83'
    $checkboxStickyBit.Name = 'checkboxStickyBit'
    $checkboxStickyBit.Size = '95, 23'
    $checkboxStickyBit.TabIndex = 4
    $checkboxStickyBit.Text = 'Sticky Bit'
    $checkboxStickyBit.UseVisualStyleBackColor = $True
    $checkboxStickyBit.add_CheckedChanged($checkboxStickyBit_CheckedChanged)
    #
    # checkboxSetgid
    #
    $checkboxSetgid.Location = '6, 54'
    $checkboxSetgid.Name = 'checkboxSetgid'
    $checkboxSetgid.Size = '90, 23'
    $checkboxSetgid.TabIndex = 2
    $checkboxSetgid.Text = 'SetGID'
    $checkboxSetgid.UseVisualStyleBackColor = $True
    $checkboxSetgid.add_CheckedChanged($checkboxSetgid_CheckedChanged)
    #
    # checkboxSetuid
    #
    $checkboxSetuid.Location = '6, 25'
    $checkboxSetuid.Name = 'checkboxSetuid'
    $checkboxSetuid.Size = '90, 23'
    $checkboxSetuid.TabIndex = 0
    $checkboxSetuid.Text = 'SetUID'
    $checkboxSetuid.UseVisualStyleBackColor = $True
    $checkboxSetuid.add_CheckedChanged($checkboxSetuid_CheckedChanged)
    $groupbox1.ResumeLayout($False)
    $groupbox2.ResumeLayout($False)
    $groupbox3.ResumeLayout($False)
    $groupbox4.ResumeLayout($False)
    $MainForm.ResumeLayout($False)

    #Save the initial state of the form
    $InitialFormWindowState = $MainForm.WindowState
    #Init the OnLoad event to correct the initial state of the form
    $MainForm.add_Load($Form_StateCorrection_Load)
    #Clean up the control events
    $MainForm.add_FormClosed($Form_Cleanup_FormClosed)
    #Store the control values when form is closing
    $MainForm.add_Closing($Form_StoreValues_Closing)
    #Show the Form
    return $MainForm.ShowDialog()
}
function Set-Octal
{
    $Special = 0
    if ($checkboxSetuid.Checked) 
    {
        $Special += 4
    }
    if ($checkboxSetgid.Checked) 
    {
        $Special += 2
    }
    if ($checkboxStickyBit.Checked) 
    {
        $Special += 1
    }
    $User = 0
    if ($checkboxUserRead.Checked) 
    {
        $User += 4
    }
    if ($checkboxUserWrite.Checked) 
    {
        $User += 2
    }
    if ($checkboxUserExecute.Checked) 
    {
        $User += 1
    }
    $Group = 0
    if ($checkboxGroupRead.Checked) 
    {
        $Group += 4
    }
    if ($checkboxGroupWrite.Checked) 
    {
        $Group += 2
    }
    if ($checkboxGroupExecute.Checked) 
    {
        $Group += 1
    }
    $Other = 0
    if ($checkboxOtherRead.Checked) 
    {
        $Other += 4
    }
    if ($checkboxOtherWrite.Checked) 
    {
        $Other += 2
    }
    if ($checkboxOtherExecute.Checked) 
    {
        $Other += 1
    }
    if ($Special -eq 0) 
    {
        $Special = $null
    }
    $Result.Text = "chmod $($Special)$($User)$($Group)$($Other) <path-to-file>"
}
	
function Set-Help
{
    Param ($Item)
    switch ($Item)
    {
        'SetUID'
        {
            $HelpRichTextBox.Text = @"
Binary executables with the setuid bit (chmod u+s path) can be executed with the privileges of the file's owner. 
Due to it's nature it should be used with care.
 
In octal, the setuid bit is set with 4000 e.g: "chmod 4755 path".
 
setuid has no effect if the user does not have execute permissions.
 
setuid is represented with a lower-case "s" in the output of ls. 
In cases where it has no effect it is represented with an upper-case "S".
"@
        }
        'SetGID'
        {
            $HelpRichTextBox.Text = @"
Binary executables with the setgid bit (chmod g+s path) can be executed with the privileges of the file's group.
 
A useful property is to set the setgid bit on a directory so that all files and directories newly created within it inherit the group from that directory.
 
In octal, the setgid bit is represented by 2000 e.g: "chmod 2755 path".
 
setgid has no effect if the group does not have execute permissions.
 
setgid is represented with a lower-case "s" in the output of ls. 
In cases where it has no effect it is represented with an upper-case "S".
"@
        }
        'Sticky Bit' 
        {
            $HelpRichTextBox.Text = @"
The sticky bit (chmod +t path) was introduced for use with executables as a way of telling an operating system to keep the text segment of the program in swap space after the process had terminated. 
This was a performance feature designed to make subsequent execution of the program faster.

The sticky bit is more commonly used on directories where it allows the files or directories within to only be moved or deleted by that object's owner, the directory owner, or the super-user.

In octal, the sticky bit is set with 1000 e.g: "chmod 1755 path".

The sticky bit has no effect if other does not have execute permissions.

The sticky bit is represented with a lower-case "t" in the output of ls. 
In cases where it has no effect it is represented with an upper-case "T".
"@
        }
        'Info'
        {
            $HelpRichTextBox.Text = 'Created by Kirill Pashkov. Send feedback to KirillPashkov@yandex.ru'
        }
    }
}
function Call-Help_psf
{
    Param ($Item)
    [System.Windows.Forms.Application]::EnableVisualStyles()
    $HelpForm = New-Object -TypeName 'System.Windows.Forms.Form'
    $HelpRichTextBox = New-Object -TypeName 'System.Windows.Forms.RichTextBox'
    $InitialFormWindowState = New-Object -TypeName 'System.Windows.Forms.FormWindowState'

    $HelpForm_Load = {
        $HelpForm.Text = $Item
        Set-Help -Item $Item
    }
	
    $Form_StateCorrection_Load = 
    {
        #Correct the initial state of the form to prevent the .Net maximized form issue
        $HelpForm.WindowState = $InitialFormWindowState
    }
	
    $Form_StoreValues_Closing = 
    {
        #Store the control values
        $script:Help_HelpRichTextBox = $HelpRichTextBox.Text
    }

	
    $Form_Cleanup_FormClosed = 
    {
        #Remove all event handlers from the controls
        try
        {
            $HelpForm.remove_Load($HelpForm_Load)
            $HelpForm.remove_Load($Form_StateCorrection_Load)
            $HelpForm.remove_Closing($Form_StoreValues_Closing)
            $HelpForm.remove_FormClosed($Form_Cleanup_FormClosed)
        }
        catch [Exception]
        {

        }
    }

    $HelpForm.SuspendLayout()
    #
    # HelpForm
    #
    $HelpForm.Controls.Add($HelpRichTextBox)
    $HelpForm.ClientSize = '584, 362'
    $HelpForm.Font = 'Arial, 12pt'
    $HelpForm.MaximizeBox = $False
    $HelpForm.MinimizeBox = $False
    $HelpForm.Name = 'HelpForm'
    $HelpForm.ShowIcon = $False
    $HelpForm.ShowInTaskbar = $False
    $HelpForm.StartPosition = 'CenterScreen'
    $HelpForm.add_Load($HelpForm_Load)
    #
    # HelpRichTextBox
    #
    $HelpRichTextBox.Dock = 'Fill'
    $HelpRichTextBox.Font = 'Arial, 12pt'
    $HelpRichTextBox.Location = '0, 0'
    $HelpRichTextBox.Name = 'HelpRichTextBox'
    $HelpRichTextBox.ReadOnly = $True
    $HelpRichTextBox.Size = '584, 362'
    $HelpRichTextBox.TabIndex = 0
    $HelpRichTextBox.Text = ''
    $HelpForm.ResumeLayout($False)

    #Save the initial state of the form
    $InitialFormWindowState = $HelpForm.WindowState
    #Init the OnLoad event to correct the initial state of the form
    $HelpForm.add_Load($Form_StateCorrection_Load)
    #Clean up the control events
    $HelpForm.add_FormClosed($Form_Cleanup_FormClosed)
    #Store the control values when form is closing
    $HelpForm.add_Closing($Form_StoreValues_Closing)
    #Show the Form
    return $HelpForm.ShowDialog()
}
#Start the application
Main ($Commandline)
