<#
        --------------------------------------------------------------------------------
        Generated on:       20.09.2015 11:42
        Generated by:       Kirill Pashkov
        --------------------------------------------------------------------------------

#>


#region Source: Startup.pss
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main 
{
    Param ([String]$Commandline)
    #Note: This function starts the application
    #Note: $Commandline contains the complete argument string passed to the packager 
    #Note: To get the script directory in the Packager use: Split-Path $hostinvocation.MyCommand.path
    #Note: To get the console output in the Packager (Forms Mode) use: $ConsoleOutput (Type: System.Collections.ArrayList)
    #TODO: Initialize and add Function calls to forms
	
    if((Call-MainForm_psf) -eq 'OK')
    {

    }
	
    $global:ExitCode = 0 #Set the exit code for the Packager
}






#endregion Source: Startup.pss

#region Source: MainForm.psf
function Call-MainForm_psf
{
    #----------------------------------------------
    #region Import the Assemblies
    #----------------------------------------------
    [void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    [void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    [void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    #endregion Import Assemblies

    #----------------------------------------------
    #region Generated Form Objects
    #----------------------------------------------
    [System.Windows.Forms.Application]::EnableVisualStyles()
    $MainForm = New-Object -TypeName 'System.Windows.Forms.Form'
    $groupboxMessage = New-Object -TypeName 'System.Windows.Forms.GroupBox'
    $richtextboxText = New-Object -TypeName 'System.Windows.Forms.RichTextBox'
    $checkboxAsHTML = New-Object -TypeName 'System.Windows.Forms.CheckBox'
    $trackbarFontSize = New-Object -TypeName 'System.Windows.Forms.TrackBar'
    $buttonStartJobSend = New-Object -TypeName 'System.Windows.Forms.Button'
    $groupboxSettings = New-Object -TypeName 'System.Windows.Forms.GroupBox'
    $labelDisplayName = New-Object -TypeName 'System.Windows.Forms.Label'
    $textboxDisplayName = New-Object -TypeName 'System.Windows.Forms.TextBox'
    $labelBcc = New-Object -TypeName 'System.Windows.Forms.Label'
    $textboxBcc = New-Object -TypeName 'System.Windows.Forms.TextBox'
    $labelCc = New-Object -TypeName 'System.Windows.Forms.Label'
    $textboxCc = New-Object -TypeName 'System.Windows.Forms.TextBox'
    $labelAttachments = New-Object -TypeName 'System.Windows.Forms.Label'
    $buttonBrowse = New-Object -TypeName 'System.Windows.Forms.Button'
    $textboxFile = New-Object -TypeName 'System.Windows.Forms.TextBox'
    $comboboxPriority = New-Object -TypeName 'System.Windows.Forms.ComboBox'
    $comboboxEncodings = New-Object -TypeName 'System.Windows.Forms.ComboBox'
    $labelEncoding = New-Object -TypeName 'System.Windows.Forms.Label'
    $labelPriority = New-Object -TypeName 'System.Windows.Forms.Label'
    $labelSubject = New-Object -TypeName 'System.Windows.Forms.Label'
    $textboxSubject = New-Object -TypeName 'System.Windows.Forms.TextBox'
    $labelTo = New-Object -TypeName 'System.Windows.Forms.Label'
    $textboxTo = New-Object -TypeName 'System.Windows.Forms.TextBox'
    $labelFrom = New-Object -TypeName 'System.Windows.Forms.Label'
    $textboxFrom = New-Object -TypeName 'System.Windows.Forms.TextBox'
    $labelSMTPServer = New-Object -TypeName 'System.Windows.Forms.Label'
    $textboxSmtpServer = New-Object -TypeName 'System.Windows.Forms.TextBox'
    $groupboxConfiguration = New-Object -TypeName 'System.Windows.Forms.GroupBox'
    $labelGUILanguage = New-Object -TypeName 'System.Windows.Forms.Label'
    $checkboxSave = New-Object -TypeName 'System.Windows.Forms.CheckBox'
    $comboboxLanguages = New-Object -TypeName 'System.Windows.Forms.ComboBox'
    $imagelistButtonBusyAnimation = New-Object -TypeName 'System.Windows.Forms.ImageList'
    $timerJobTracker = New-Object -TypeName 'System.Windows.Forms.Timer'
    $openfiledialog1 = New-Object -TypeName 'System.Windows.Forms.OpenFileDialog'
    $tooltip1 = New-Object -TypeName 'System.Windows.Forms.ToolTip'
    $timer1 = New-Object -TypeName 'System.Windows.Forms.Timer'
    $errorprovider1 = New-Object -TypeName 'System.Windows.Forms.ErrorProvider'
    $InitialFormWindowState = New-Object -TypeName 'System.Windows.Forms.FormWindowState'
    #endregion Generated Form Objects

    #----------------------------------------------
    # User Generated Script
    #----------------------------------------------
    $OnLoadFormEvent = {
        if (-not (Test-Path -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access'))
        {
            New-RegistryKeys -New 
        }
        'Русский', 'English' | ForEach-Object -Process {
            Load-ComboBox -ComboBox $comboboxLanguages -Items $_ -Append 
        }
        $comboboxLanguages.SelectedIndex = 1
        [System.Text.Encoding]::GetEncodings() |
        Select-Object -ExpandProperty Name |
        ForEach-Object -Process {
            Load-ComboBox -ComboBox $comboboxEncodings -Items $_ -Append
        }
        $comboboxEncodings.SelectedIndex = ($comboboxEncodings.Items.Count - 1)
        'Low', 'Normal', 'High' | ForEach-Object -Process {
            Load-ComboBox -ComboBox $comboboxPriority -Items $_ -Append 
        }
        $comboboxPriority.SelectedIndex = 1
        $script:JobTrackerList = New-Object -TypeName System.Collections.ArrayList
        Load-Registry
        & $trackbarFontSize_Scroll
        Check-Updates
    }
	
    $buttonStartJobSend_Click = {
        if ($textboxSmtpServer.Text.Trim() -ne '' -and $textboxFrom.Text.Trim() -ne '' -and $textboxTo.Text.Trim() -ne '' -and $textboxSubject.Text.Trim() -ne '')
        {
            $FromEmail = $($textboxFrom.Text.Trim())
            $FromDisplayName = $($textboxDisplayName.Text.Trim())
            $From = New-Object -TypeName System.Net.Mail.MailAddress -ArgumentList ($FromEmail, $FromDisplayName)
            $MailObject = [hashtable]@{
                SmtpServer = $($textboxSmtpServer.Text.Trim())
                Subject    = $($textboxSubject.Text.Trim())
                To         = $($textboxTo.Text.Trim()) -split ','
                From       = $From
                Priority   = $($comboboxPriority.SelectedItem)
                Body       = $($richtextboxText.Text.Trim())
            }
            if ($textboxFile.Text.Trim() -ne '')
            {
                $MailObject.Add('Attachments', $($textboxFile.Text.Trim() -split ',')) 
            }
            if ($textboxCc.Text.Trim() -ne '')
            {
                $MailObject.Add('Cc', $($textboxCc.Text.Trim() -split ',')) 
            }
            if ($textboxBcc.Text.Trim() -ne '')
            {
                $MailObject.Add('Bcc', $($textboxBcc.Text.Trim() -split ',')) 
            }
            if ($checkboxAsHTML.Checked) 
            {
                $BodyAsHTML = $true 
            }
            $Encoding = $($comboboxEncodings.SelectedItem)
			
            $buttonStartJobSend.Enabled = $false
            Add-JobTracker -Name 'JobName' `
            -JobScript {
                Param ($MailObject, $BodyAsHTML, $Encoding)
                $ErrorActionPreference = 'Stop'
                try
                {
                    if ($BodyAsHTML)
                    {
                        Send-MailMessage @MailObject -Encoding $([System.Text.Encoding]::GetEncoding($Encoding)) -BodyAsHtml
                    }
                    else
                    {
                        Send-MailMessage @MailObject -Encoding $([System.Text.Encoding]::GetEncoding($Encoding))
                    }
                    Write-Output $true
                }
                catch
                {
                    Write-Output $false
                }
            }`
            -CompletedScript {
                Param ($Job)
                $result = Receive-Job -Job $Job
                if ($result)
                {
                    $buttonStartJobSend.BackColor = 'YellowGreen'
                }
                else
                {
                    $buttonStartJobSend.BackColor = 'LightCoral'
                }
                $timer1.Start()
                $buttonStartJobSend.ImageIndex = -1
                $buttonStartJobSend.Enabled = $true
            }`
            -UpdateScript {
                Param ($Job)
                if ($buttonStartJobSend.ImageList -ne $null)
                {
                    if ($buttonStartJobSend.ImageIndex -lt $buttonStartJobSend.ImageList.Images.Count - 1)
                    {
                        $buttonStartJobSend.ImageIndex += 1
                    }
                    else
                    {
                        $buttonStartJobSend.ImageIndex = 0
                    }
                }
            } -ArgumentList $MailObject, $BodyAsHTML, $Encoding
        }
        else
        {
            [void][System.Windows.Forms.MessageBox]::Show('Text','Caption')
        }
    }
	
    $formMain_FormClosed = [System.Windows.Forms.FormClosedEventHandler]{
        Set-Registry
        Stop-JobTracker
    }
	
    $timerJobTracker_Tick = {
        Update-JobTracker
    }
	
    $trackbarFontSize_Scroll = {
        $richtextboxText.Font = New-Object -TypeName System.Drawing.Font -ArgumentList ('Microsoft Sans Serif', $($trackbarFontSize.Value))
        if ($checkboxSave.Checked) 
        {
            Set-Registry 
        }
    }
	
    $buttonBrowse_Click = {
        if($openfiledialog1.ShowDialog() -eq 'OK')
        {
            $textboxFile.Text = ($openfiledialog1.FileNames -join ',')
        }
    }
	
    $comboboxLanguages_SelectedIndexChanged = {
        Set-Language
        if ($checkboxSave.Checked) 
        {
            Set-Registry 
        }
    }
    $timer1_Tick = {
        Start-Sleep -Milliseconds 300
        $timer1.Stop()
        $buttonStartJobSend.BackColor = 'Control'
    }
	
    $checkboxSave_CheckedChanged = {
        Set-Registry
    }
	
    $comboboxEncodings_SelectedIndexChanged = {
        if ($checkboxSave.Checked) 
        {
            Set-Registry 
        }
    }
	
    $comboboxPriority_SelectedIndexChanged = {
        if ($checkboxSave.Checked) 
        {
            Set-Registry 
        }
    }
	
    $checkboxAsHTML_CheckedChanged = {
        if ($checkboxSave.Checked) 
        {
            Set-Registry 
        }
    }
	
    $textboxEmailValidating = [System.ComponentModel.CancelEventHandler]{
        Invoke-EmailAddressValidating -Textbox $this
    }
    # --End User Generated Script--
    #----------------------------------------------
    #region Generated Events
    #----------------------------------------------
	
    $Form_StateCorrection_Load = 
    {
        #Correct the initial state of the form to prevent the .Net maximized form issue
        $MainForm.WindowState = $InitialFormWindowState
    }
	
    $Form_StoreValues_Closing = 
    {
        #Store the control values
        $script:MainForm_richtextboxText = $richtextboxText.Text
        $script:MainForm_checkboxAsHTML = $checkboxAsHTML.Checked
        $script:MainForm_trackbarFontSize = $trackbarFontSize.Value
        $script:MainForm_textboxDisplayName = $textboxDisplayName.Text
        $script:MainForm_textboxBcc = $textboxBcc.Text
        $script:MainForm_textboxCc = $textboxCc.Text
        $script:MainForm_textboxFile = $textboxFile.Text
        $script:MainForm_comboboxPriority_SelectedItem = $comboboxPriority.SelectedItems
        $script:MainForm_comboboxEncodings_SelectedItem = $comboboxEncodings.SelectedItems
        $script:MainForm_textboxSubject = $textboxSubject.Text
        $script:MainForm_textboxTo = $textboxTo.Text
        $script:MainForm_textboxFrom = $textboxFrom.Text
        $script:MainForm_textboxSmtpServer = $textboxSmtpServer.Text
        $script:MainForm_checkboxSave = $checkboxSave.Checked
        $script:MainForm_comboboxLanguages_SelectedItem = $comboboxLanguages.SelectedItems
    }

	
    $Form_Cleanup_FormClosed = 
    {
        #Remove all event handlers from the controls
        try
        {
            $checkboxAsHTML.remove_CheckedChanged($checkboxAsHTML_CheckedChanged)
            $trackbarFontSize.remove_Scroll($trackbarFontSize_Scroll)
            $buttonStartJobSend.remove_Click($buttonStartJobSend_Click)
            $textboxBcc.remove_Validating($textboxEmailValidating)
            $textboxCc.remove_Validating($textboxEmailValidating)
            $buttonBrowse.remove_Click($buttonBrowse_Click)
            $comboboxPriority.remove_SelectedIndexChanged($comboboxPriority_SelectedIndexChanged)
            $comboboxEncodings.remove_SelectedIndexChanged($comboboxEncodings_SelectedIndexChanged)
            $textboxTo.remove_Validating($textboxEmailValidating)
            $textboxFrom.remove_Validating($textboxEmailValidating)
            $checkboxSave.remove_CheckedChanged($checkboxSave_CheckedChanged)
            $comboboxLanguages.remove_SelectedIndexChanged($comboboxLanguages_SelectedIndexChanged)
            $MainForm.remove_FormClosed($formMain_FormClosed)
            $MainForm.remove_Load($OnLoadFormEvent)
            $timerJobTracker.remove_Tick($timerJobTracker_Tick)
            $timer1.remove_Tick($timer1_Tick)
            $MainForm.remove_Load($Form_StateCorrection_Load)
            $MainForm.remove_Closing($Form_StoreValues_Closing)
            $MainForm.remove_FormClosed($Form_Cleanup_FormClosed)
        }
        catch [Exception]
        {
 
        }
    }
    #endregion Generated Events

    #----------------------------------------------
    #region Generated Form Code
    #----------------------------------------------
    $MainForm.SuspendLayout()
    $groupboxMessage.SuspendLayout()
    $trackbarFontSize.BeginInit()
    $groupboxSettings.SuspendLayout()
    $groupboxConfiguration.SuspendLayout()
    #
    # MainForm
    #
    $MainForm.Controls.Add($groupboxMessage)
    $MainForm.Controls.Add($buttonStartJobSend)
    $MainForm.Controls.Add($groupboxSettings)
    $MainForm.Controls.Add($groupboxConfiguration)
    $MainForm.ClientSize = '478, 392'
    $MainForm.Name = 'MainForm'
    $MainForm.StartPosition = 'CenterScreen'
    $MainForm.Text = 'SMTP Anonymous Access'
    $MainForm.add_FormClosed($formMain_FormClosed)
    $MainForm.add_Load($OnLoadFormEvent)
    #
    # groupboxMessage
    #
    $groupboxMessage.Controls.Add($richtextboxText)
    $groupboxMessage.Controls.Add($checkboxAsHTML)
    $groupboxMessage.Controls.Add($trackbarFontSize)
    $groupboxMessage.Anchor = 'Top, Bottom, Left, Right'
    $groupboxMessage.Location = '0, 220'
    $groupboxMessage.Name = 'groupboxMessage'
    $groupboxMessage.Size = '478, 147'
    $groupboxMessage.TabIndex = 1
    $groupboxMessage.TabStop = $false
    $groupboxMessage.Text = 'Message Text'
    #
    # richtextboxText
    #
    $richtextboxText.Dock = 'Fill'
    $richtextboxText.Font = 'Microsoft Sans Serif, 9.75pt'
    $richtextboxText.Location = '3, 16'
    $richtextboxText.Name = 'richtextboxText'
    $richtextboxText.Size = '454, 128'
    $richtextboxText.TabIndex = 0
    $richtextboxText.Text = ''
    #
    # checkboxAsHTML
    #
    $checkboxAsHTML.Anchor = 'Top, Right'
    $checkboxAsHTML.Location = '382, 0'
    $checkboxAsHTML.Name = 'checkboxAsHTML'
    $checkboxAsHTML.Size = '80, 16'
    $checkboxAsHTML.TabIndex = 1
    $checkboxAsHTML.Text = 'As HTML'
    $checkboxAsHTML.UseVisualStyleBackColor = $true
    $checkboxAsHTML.add_CheckedChanged($checkboxAsHTML_CheckedChanged)
    #
    # trackbarFontSize
    #
    $trackbarFontSize.AutoSize = $false
    $trackbarFontSize.Dock = 'Right'
    $trackbarFontSize.Location = '457, 16'
    $trackbarFontSize.Maximum = 48
    $trackbarFontSize.Minimum = 8
    $trackbarFontSize.Name = 'trackbarFontSize'
    $trackbarFontSize.Orientation = 'Vertical'
    $trackbarFontSize.Size = '18, 128'
    $trackbarFontSize.TabIndex = 3
    $trackbarFontSize.TickStyle = 'None'
    $tooltip1.SetToolTip($trackbarFontSize, 'Размер шрифта')
    $trackbarFontSize.Value = 10
    $trackbarFontSize.add_Scroll($trackbarFontSize_Scroll)
    #
    # buttonStartJobSend
    #
    $buttonStartJobSend.Dock = 'Bottom'
    $buttonStartJobSend.ImageList = $imagelistButtonBusyAnimation
    $buttonStartJobSend.Location = '0, 369'
    $buttonStartJobSend.Name = 'buttonStartJobSend'
    $buttonStartJobSend.Size = '478, 23'
    $buttonStartJobSend.TabIndex = 2
    $buttonStartJobSend.Text = 'Send email'
    $buttonStartJobSend.TextImageRelation = 'ImageBeforeText'
    $buttonStartJobSend.UseVisualStyleBackColor = $true
    $buttonStartJobSend.add_Click($buttonStartJobSend_Click)
    #
    # groupboxSettings
    #
    $groupboxSettings.Controls.Add($labelDisplayName)
    $groupboxSettings.Controls.Add($textboxDisplayName)
    $groupboxSettings.Controls.Add($labelBcc)
    $groupboxSettings.Controls.Add($textboxBcc)
    $groupboxSettings.Controls.Add($labelCc)
    $groupboxSettings.Controls.Add($textboxCc)
    $groupboxSettings.Controls.Add($labelAttachments)
    $groupboxSettings.Controls.Add($buttonBrowse)
    $groupboxSettings.Controls.Add($textboxFile)
    $groupboxSettings.Controls.Add($comboboxPriority)
    $groupboxSettings.Controls.Add($comboboxEncodings)
    $groupboxSettings.Controls.Add($labelEncoding)
    $groupboxSettings.Controls.Add($labelPriority)
    $groupboxSettings.Controls.Add($labelSubject)
    $groupboxSettings.Controls.Add($textboxSubject)
    $groupboxSettings.Controls.Add($labelTo)
    $groupboxSettings.Controls.Add($textboxTo)
    $groupboxSettings.Controls.Add($labelFrom)
    $groupboxSettings.Controls.Add($textboxFrom)
    $groupboxSettings.Controls.Add($labelSMTPServer)
    $groupboxSettings.Controls.Add($textboxSmtpServer)
    $groupboxSettings.Dock = 'Fill'
    $groupboxSettings.Location = '0, 41'
    $groupboxSettings.Name = 'groupboxSettings'
    $groupboxSettings.Size = '478, 351'
    $groupboxSettings.TabIndex = 1
    $groupboxSettings.TabStop = $false
    $groupboxSettings.Text = 'Settings'
    #
    # labelDisplayName
    #
    $labelDisplayName.Location = '162, 56'
    $labelDisplayName.Name = 'labelDisplayName'
    $labelDisplayName.Size = '150, 15'
    $labelDisplayName.TabIndex = 20
    $labelDisplayName.Text = 'Display Name'
    $labelDisplayName.TextAlign = 'BottomLeft'
    #
    # textboxDisplayName
    #
    $textboxDisplayName.Location = '162, 74'
    $textboxDisplayName.Name = 'textboxDisplayName'
    $textboxDisplayName.Size = '150, 20'
    $textboxDisplayName.TabIndex = 4
    #
    # labelBcc
    #
    $labelBcc.Anchor = 'Top, Left, Right'
    $labelBcc.Location = '318, 97'
    $labelBcc.Name = 'labelBcc'
    $labelBcc.Size = '150, 15'
    $labelBcc.TabIndex = 18
    $labelBcc.Text = 'Bcc'
    $labelBcc.TextAlign = 'BottomLeft'
    #
    # textboxBcc
    #
    $textboxBcc.Anchor = 'Top, Left, Right'
    $textboxBcc.Location = '318, 115'
    $textboxBcc.Name = 'textboxBcc'
    $textboxBcc.Size = '150, 20'
    $textboxBcc.TabIndex = 8
    $textboxBcc.add_Validating($textboxEmailValidating)
    #
    # labelCc
    #
    $labelCc.Location = '162, 97'
    $labelCc.Name = 'labelCc'
    $labelCc.Size = '150, 15'
    $labelCc.TabIndex = 16
    $labelCc.Text = 'Cc'
    $labelCc.TextAlign = 'BottomLeft'
    #
    # textboxCc
    #
    $textboxCc.Location = '162, 115'
    $textboxCc.Name = 'textboxCc'
    $textboxCc.Size = '150, 20'
    $textboxCc.TabIndex = 7
    $textboxCc.add_Validating($textboxEmailValidating)
    #
    # labelAttachments
    #
    $labelAttachments.Location = '7, 138'
    $labelAttachments.Name = 'labelAttachments'
    $labelAttachments.Size = '371, 15'
    $labelAttachments.TabIndex = 14
    $labelAttachments.Text = 'Attachments'
    $labelAttachments.TextAlign = 'BottomLeft'
    #
    # buttonBrowse
    #
    $buttonBrowse.Anchor = 'Top, Right'
    $buttonBrowse.Location = '441, 152'
    $buttonBrowse.Name = 'buttonBrowse'
    $buttonBrowse.Size = '30, 23'
    $buttonBrowse.TabIndex = 10
    $buttonBrowse.Text = '...'
    $buttonBrowse.UseVisualStyleBackColor = $true
    $buttonBrowse.add_Click($buttonBrowse_Click)
    #
    # textboxFile
    #
    $textboxFile.Anchor = 'Top, Bottom, Left, Right'
    $textboxFile.AutoCompleteMode = 'SuggestAppend'
    $textboxFile.AutoCompleteSource = 'FileSystem'
    $textboxFile.Location = '7, 155'
    $textboxFile.Name = 'textboxFile'
    $textboxFile.Size = '430, 20'
    $textboxFile.TabIndex = 9
    #
    # comboboxPriority
    #
    $comboboxPriority.DropDownStyle = 'DropDownList'
    $comboboxPriority.FormattingEnabled = $true
    $comboboxPriority.Location = '318, 32'
    $comboboxPriority.Name = 'comboboxPriority'
    $comboboxPriority.Size = '150, 21'
    $comboboxPriority.TabIndex = 2
    $comboboxPriority.add_SelectedIndexChanged($comboboxPriority_SelectedIndexChanged)
    #
    # comboboxEncodings
    #
    $comboboxEncodings.DropDownStyle = 'DropDownList'
    $comboboxEncodings.FormattingEnabled = $true
    $comboboxEncodings.Location = '163, 32'
    $comboboxEncodings.Name = 'comboboxEncodings'
    $comboboxEncodings.Size = '150, 21'
    $comboboxEncodings.TabIndex = 1
    $comboboxEncodings.add_SelectedIndexChanged($comboboxEncodings_SelectedIndexChanged)
    #
    # labelEncoding
    #
    $labelEncoding.Location = '162, 14'
    $labelEncoding.Name = 'labelEncoding'
    $labelEncoding.Size = '150, 15'
    $labelEncoding.TabIndex = 11
    $labelEncoding.Text = 'Encoding'
    $labelEncoding.TextAlign = 'BottomLeft'
    #
    # labelPriority
    #
    $labelPriority.Location = '319, 14'
    $labelPriority.Name = 'labelPriority'
    $labelPriority.Size = '149, 15'
    $labelPriority.TabIndex = 9
    $labelPriority.Text = 'Priority'
    $labelPriority.TextAlign = 'BottomLeft'
    #
    # labelSubject
    #
    $labelSubject.Anchor = 'Top, Left, Right'
    $labelSubject.Location = '319, 56'
    $labelSubject.Name = 'labelSubject'
    $labelSubject.Size = '149, 15'
    $labelSubject.TabIndex = 7
    $labelSubject.Text = 'Subject'
    $labelSubject.TextAlign = 'BottomLeft'
    #
    # textboxSubject
    #
    $textboxSubject.Anchor = 'Top, Left, Right'
    $textboxSubject.Location = '318, 74'
    $textboxSubject.Name = 'textboxSubject'
    $textboxSubject.Size = '150, 20'
    $textboxSubject.TabIndex = 5
    #
    # labelTo
    #
    $labelTo.Location = '6, 97'
    $labelTo.Name = 'labelTo'
    $labelTo.Size = '150, 15'
    $labelTo.TabIndex = 5
    $labelTo.Text = 'To'
    $labelTo.TextAlign = 'BottomLeft'
    #
    # textboxTo
    #
    $textboxTo.Location = '6, 115'
    $textboxTo.Name = 'textboxTo'
    $textboxTo.Size = '150, 20'
    $textboxTo.TabIndex = 6
    $textboxTo.add_Validating($textboxEmailValidating)
    #
    # labelFrom
    #
    $labelFrom.Location = '7, 56'
    $labelFrom.Name = 'labelFrom'
    $labelFrom.Size = '150, 15'
    $labelFrom.TabIndex = 3
    $labelFrom.Text = 'From'
    $labelFrom.TextAlign = 'BottomLeft'
    #
    # textboxFrom
    #
    $textboxFrom.Location = '7, 74'
    $textboxFrom.Name = 'textboxFrom'
    $textboxFrom.Size = '150, 20'
    $textboxFrom.TabIndex = 3
    $textboxFrom.add_Validating($textboxEmailValidating)
    #
    # labelSMTPServer
    #
    $labelSMTPServer.Location = '7, 16'
    $labelSMTPServer.Name = 'labelSMTPServer'
    $labelSMTPServer.Size = '149, 15'
    $labelSMTPServer.TabIndex = 1
    $labelSMTPServer.Text = 'Smtp Server'
    $labelSMTPServer.TextAlign = 'BottomLeft'
    #
    # textboxSmtpServer
    #
    $textboxSmtpServer.Location = '7, 33'
    $textboxSmtpServer.Name = 'textboxSmtpServer'
    $textboxSmtpServer.Size = '150, 20'
    $textboxSmtpServer.TabIndex = 0
    #
    # groupboxConfiguration
    #
    $groupboxConfiguration.Controls.Add($labelGUILanguage)
    $groupboxConfiguration.Controls.Add($checkboxSave)
    $groupboxConfiguration.Controls.Add($comboboxLanguages)
    $groupboxConfiguration.Dock = 'Top'
    $groupboxConfiguration.Location = '0, 0'
    $groupboxConfiguration.Name = 'groupboxConfiguration'
    $groupboxConfiguration.Size = '478, 41'
    $groupboxConfiguration.TabIndex = 0
    $groupboxConfiguration.TabStop = $false
    $groupboxConfiguration.Text = 'Configuration'
    #
    # labelGUILanguage
    #
    $labelGUILanguage.Anchor = 'Top, Right'
    $labelGUILanguage.Location = '245, 13'
    $labelGUILanguage.Name = 'labelGUILanguage'
    $labelGUILanguage.Size = '100, 21'
    $labelGUILanguage.TabIndex = 1
    $labelGUILanguage.Text = 'GUI Language'
    $labelGUILanguage.TextAlign = 'MiddleCenter'
    #
    # checkboxSave
    #
    $checkboxSave.Location = '7, 13'
    $checkboxSave.Name = 'checkboxSave'
    $checkboxSave.Size = '124, 21'
    $checkboxSave.TabIndex = 0
    $checkboxSave.Text = 'Save'
    $checkboxSave.UseVisualStyleBackColor = $true
    $checkboxSave.add_CheckedChanged($checkboxSave_CheckedChanged)
    #
    # comboboxLanguages
    #
    $comboboxLanguages.Anchor = 'Top, Right'
    $comboboxLanguages.DropDownStyle = 'DropDownList'
    $comboboxLanguages.FormattingEnabled = $true
    $comboboxLanguages.Location = '351, 13'
    $comboboxLanguages.Name = 'comboboxLanguages'
    $comboboxLanguages.Size = '120, 21'
    $comboboxLanguages.TabIndex = 2
    $comboboxLanguages.add_SelectedIndexChanged($comboboxLanguages_SelectedIndexChanged)
    #
    # imagelistButtonBusyAnimation
    #
    $Formatter_binaryFomatter = New-Object -TypeName System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
    #region Binary Data
    $System_IO_MemoryStream = New-Object -TypeName System.IO.MemoryStream -ArgumentList (,[byte[]][System.Convert]::FromBase64String('
                AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAu
                MC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAA
                ACZTeXN0ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkD
                AAAADwMAAAB2CgAAAk1TRnQBSQFMAgEBCAEAAUgBAAFIAQABEAEAARABAAT/ASEBAAj/AUIBTQE2
                BwABNgMAASgDAAFAAwABMAMAAQEBAAEgBgABMP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/
                AP8AugADwgH/AzkB/wM5Af8DwgH/MAADwgH/A1kB/wOCAf8DwgH/sAADOQH/AwAB/wMAAf8DOQH/
                MAADggH/AzkB/wM5Af8DWQH/gAADwgH/AzkB/wM5Af8DwgH/IAADOQH/AwAB/wMAAf8DOQH/A8IB
                /wNZAf8DggH/A8IB/xAAA8IB/wM5Af8DOQH/A8IB/wNZAf8DOQH/AzkB/wNZAf8EAAOSAf8DkgH/
                A8IB/3AAAzkB/wMAAf8DAAH/AzkB/yAAA8IB/wM5Af8DOQH/A8IB/wOCAf8DOQH/AzkB/wOCAf8Q
                AAM5Af8DAAH/AwAB/wM5Af8DwgH/A1kB/wOCAf8DwgH/A5IB/wOCAf8DggH/A5IB/3AAAzkB/wMA
                Af8DAAH/AzkB/zAAA1kB/wM5Af8DOQH/A1kB/xAAAzkB/wMAAf8DAAH/AzkB/xAAA5IB/wOSAf8D
                kgH/A8IB/3AAA8IB/wM5Af8DOQH/A8IB/zAAA8IB/wNZAf8DggH/A8IB/xAAA8IB/wM5Af8DOQH/
                A8IB/xAAA8IB/wOSAf8DkgH/A8IB/zgAA8IB/wM5Af8DOQH/A8IB/zAAA8IB/wOCAf8DWQH/A8IB
                /zAAA8IB/wPCAf8DkgH/A8IB/zQAA8IB/wPCAf80AAM5Af8DAAH/AwAB/wM5Af8wAANZAf8DOQH/
                AzkB/wNZAf8wAAOSAf8DggH/A4IB/wOSAf8wAAPCAf8DwgH/A8IB/wPCAf8wAAM5Af8DAAH/AwAB
                /wM5Af8wAAOCAf8DOQH/AzkB/wOCAf8wAAPCAf8DggH/A5IB/wOSAf8wAAPCAf8DwgH/A8IB/wPC
                Af8wAAPCAf8DOQH/AzkB/wPCAf8wAAPCAf8DggH/A1kB/wPCAf8wAAPCAf8DkgH/A5IB/wPCAf80
                AAPCAf8DwgH/EAADwgH/A8IB/xQAA8IB/wOCAf8DWQH/A8IB/zAAA8IB/wOSAf8DkgH/A8IB/zQA
                A8IB/wPCAf9UAAPCAf8DwgH/A8IB/wPCAf8QAANZAf8DOQH/AzkB/wNZAf8wAAOSAf8DggH/A5IB
                /wOSAf8wAAPCAf8DwgH/A8IB/wPCAf9QAAPCAf8DwgH/A8IB/wPCAf8DwgH/A8IB/wOSAf8DwgH/
                A4IB/wM5Af8DOQH/A4IB/yQAA8IB/wPCAf8EAAPCAf8DggH/A5IB/wOSAf8wAAPCAf8DwgH/A8IB
                /wPCAf9UAAPCAf8DwgH/BAADkgH/A4IB/wOCAf8DkgH/A8IB/wOCAf8DWQH/A8IB/yAAA8IB/wPC
                Af8DwgH/A8IB/wPCAf8DkgH/A5IB/wPCAf80AAPCAf8DwgH/ZAADkgH/A5IB/wOSAf8DkgH/MAAD
                wgH/A8IB/wPCAf8DwgH/sAADwgH/A5IB/wOSAf8DwgH/NAADwgH/A8IB/7QAA8IB/wPCAf8DkgH/
                A8IB/zQAA8IB/wPCAf+0AAOSAf8DggH/A4IB/wOSAf8wAAPCAf8DwgH/A8IB/wPCAf+gAAPCAf8D
                WQH/A4IB/wPCAf8DkgH/A5IB/wOSAf8DwgH/BAADwgH/A8IB/xQAA8IB/wPCAf8DkgH/A8IB/wPC
                Af8DwgH/A8IB/wPCAf8kAAPCAf8DwgH/dAADggH/AzkB/wM5Af8DggH/A8IB/wOSAf8DkgH/A8IB
                /wPCAf8DwgH/A8IB/wPCAf8QAAOSAf8DggH/A4IB/wOSAf8EAAPCAf8DwgH/JAADwgH/A8IB/wPC
                Af8DwgH/cAADWQH/AzkB/wM5Af8DggH/EAADwgH/A8IB/wPCAf8DwgH/EAADkgH/A5IB/wOSAf8D
                kgH/MAADwgH/A8IB/wPCAf8DwgH/cAADwgH/A1kB/wNZAf8DwgH/FAADwgH/A8IB/xQAA8IB/wOS
                Af8DkgH/A8IB/zQAA8IB/wPCAf9sAAPCAf8DOQH/AzkB/wPCAf8wAAPCAf8DWQH/A4IB/wPCAf8w
                AAPCAf8DwgH/A5IB/wPCAf80AAPCAf8DwgH/NAADOQH/AwAB/wMAAf8DOQH/MAADggH/AzkB/wM5
                Af8DWQH/MAADkgH/A4IB/wOCAf8DkgH/MAADwgH/A8IB/wPCAf8DwgH/MAADOQH/AwAB/wMAAf8D
                OQH/MAADWQH/AzkB/wM5Af8DggH/MAADkgH/A5IB/wOSAf8DkgH/MAADwgH/A8IB/wPCAf8DwgH/
                MAADwgH/AzkB/wM5Af8DwgH/MAADwgH/A1kB/wNZAf8DwgH/MAADwgH/A5IB/wOSAf8DwgH/NAAD
                wgH/A8IB/3wAA8IB/wM5Af8DOQH/A8IB/zAAA8IB/wNZAf8DggH/A8IB/zAAA8IB/wPCAf8DkgH/
                A8IB/xAAA8IB/wM5Af8DOQH/A8IB/1AAAzkB/wMAAf8DAAH/AzkB/zAAA4IB/wM5Af8DOQH/A1kB
                /zAAA5IB/wOCAf8DggH/A5IB/xAAAzkB/wMAAf8DAAH/AzkB/1AAAzkB/wMAAf8DAAH/AzkB/zAA
                A1kB/wM5Af8DOQH/A4IB/wOSAf8DOQH/AzkB/wPCAf8gAAOSAf8DkgH/A5IB/wOSAf8DwgH/A1kB
                /wOCAf8DwgH/AzkB/wMAAf8DAAH/AzkB/1AAA8IB/wM5Af8DOQH/A8IB/zAAA8IB/wOCAf8DWQH/
                A8IB/wM5Af8DAAH/AwAB/wM5Af8gAAPCAf8DkgH/A5IB/wPCAf8DggH/AzkB/wM5Af8DWQH/A8IB
                /wM5Af8DOQH/A8IB/6AAAzkB/wMAAf8DAAH/AzkB/zAAA1kB/wM5Af8DOQH/A4IB/7AAA8IB/wM5
                Af8DOQH/A8IB/zAAA8IB/wOCAf8DWQH/A8IB/xgAAUIBTQE+BwABPgMAASgDAAFAAwABMAMAAQEB
                AAEBBQABgAEBFgAD/4EABP8B/AE/AfwBPwT/AfwBPwH8AT8D/wHDAfwBAwHAASMD/wHDAfwBAwHA
                AQMD/wHDAf8DwwP/AcMB/wPDAf8B8AH/AfAB/wHwAf8B+QH/AfAB/wHwAf8B8AH/AfAB/wHwAf8B
                8AH/AfAB/wHwAf8B8AH/AfAB/wHwAf8B+QHnAcMB/wHDAf8B5wL/AsMB/wHDAf8BwwL/AcABAwH+
                AUMB/wHDAv8B5AEDAfwBAwH/AecC/wH8AT8B/AE/BP8B/AE/Af4BfwT/AfwBPwH+AX8E/wH8AT8B
                /AE/BP8BwAEnAcABPwHnA/8BwAEDAcIBfwHDA/8DwwH/AcMD/wHDAecBwwH/AecD/wEPAf8BDwH/
                AQ8B/wGfAf8BDwH/AQ8B/wEPAf8BDwH/AQ8B/wEPAf8BDwH/AQ8B/wEPAf8BDwH/AQ8B/wGfA/8B
                wwH/AcMB/wLDAv8BwwH/AcMB/wLDAv8BwwH/AcABPwHAAQMC/wHDAf8BwAE/AcABAwT/AfwBPwH8
    AT8E/wH8AT8B/AE/Cw=='))
    #endregion
    $imagelistButtonBusyAnimation.ImageStream = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
    $Formatter_binaryFomatter = $null
    $System_IO_MemoryStream = $null
    $imagelistButtonBusyAnimation.TransparentColor = 'Transparent'
    #
    # timerJobTracker
    #
    $timerJobTracker.add_Tick($timerJobTracker_Tick)
    #
    # openfiledialog1
    #
    $openfiledialog1.Filter = 'All Files|*.*'
    $openfiledialog1.Multiselect = $true
    $openfiledialog1.ShowHelp = $true
    #
    # tooltip1
    #
    #
    # timer1
    #
    $timer1.add_Tick($timer1_Tick)
    #
    # errorprovider1
    #
    $errorprovider1.BlinkStyle = 'NeverBlink'
    $errorprovider1.ContainerControl = $MainForm
    $groupboxConfiguration.ResumeLayout($false)
    $groupboxSettings.ResumeLayout($false)
    $trackbarFontSize.EndInit()
    $groupboxMessage.ResumeLayout($false)
    $MainForm.ResumeLayout($false)
    #endregion Generated Form Code

    #----------------------------------------------

    #Save the initial state of the form
    $InitialFormWindowState = $MainForm.WindowState
    #Init the OnLoad event to correct the initial state of the form
    $MainForm.add_Load($Form_StateCorrection_Load)
    #Clean up the control events
    $MainForm.add_FormClosed($Form_Cleanup_FormClosed)
    #Store the control values when form is closing
    $MainForm.add_Closing($Form_StoreValues_Closing)
    #Show the Form
    return $MainForm.ShowDialog()
}
#endregion Source: MainForm.psf

#region Source: Globals.ps1
$ErrorActionPreference = 'SilentlyContinue'
	
function New-RegistryKeys
{
    param([switch]$New)
    if ($New)
    {
        [void](New-Item -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access')
        [void](New-Item -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\General')
        [void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\General' -Name Version -Value 1.0.0.1 -PropertyType String)
        [void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\General' -Name Update -Value 0 -PropertyType String)
        [void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\General' -Name UpdateDescription -Value '' -PropertyType String)
    }
    [void](New-Item -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\Configuration' -Force)
    [void](New-Item -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\Configuration\Common' -Force)
    [void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\Configuration\Common' -Name KeepConfiguration -Value False -PropertyType String -Force)
    [void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\Configuration\Common' -Name Language -Value English -PropertyType String -Force)
    [void](New-Item -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\Configuration\Settings' -Force)
    [void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\Configuration\Settings' -Name SmtpServer -Value '' -PropertyType String -Force)
    [void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\Configuration\Settings' -Name Encoding -Value '' -PropertyType String -Force)
    [void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\Configuration\Settings' -Name Priority -Value '' -PropertyType String -Force)
    [void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\Configuration\Settings' -Name From -Value '' -PropertyType String -Force)
    [void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\Configuration\Settings' -Name Subject -Value '' -PropertyType String -Force)
    [void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\Configuration\Settings' -Name To -Value '' -PropertyType String -Force)
    [void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\Configuration\Settings' -Name Cc -Value '' -PropertyType String -Force)
    [void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\Configuration\Settings' -Name Bcc -Value '' -PropertyType String -Force)
    [void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\Configuration\Settings' -Name BodyAsHTML -Value False -PropertyType String -Force)
    [void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\Configuration\Settings' -Name FontSize -Value 10 -PropertyType String -Force)
}
	
function Check-Updates
{
    Add-JobTracker -Name 'JobName' `
    -JobScript {
        try
        {
            $nc = New-Object -TypeName System.Net.WebClient
            $check = $nc.DownloadString('http://wgo-it000000601/software/smtp/update.txt')
            if ($check -gt 0)
            {
                $nc.DownloadString('http://wgo-it000000601/software/smtp/description.txt') 
            }
        }
        catch
        {
 
        }
    }`
    -CompletedScript {
        Param ($Job)
        $result = Receive-Job -Job $Job
        if ($result) 
        {
            Call-update_notification_psf -Title $UpdateFormText -DescriptionLabel $UpdateDescriptionLabelText -DescriptionText $result -UpdateLabel $UpdateLabelText
        }
    }
}
	
function Set-Registry
{
    if ($checkboxSave.Checked)
    {
        [void](Set-ItemProperty -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\Configuration\Common' -Name KeepConfiguration -Value $($checkboxSave.Checked))
        [void](Set-ItemProperty -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\Configuration\Common' -Name Language -Value $($comboboxLanguages.SelectedItem))
        [void](Set-ItemProperty -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\Configuration\Settings' -Name SmtpServer -Value $($textboxSmtpServer.Text.Trim()))
        [void](Set-ItemProperty -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\Configuration\Settings' -Name Encoding -Value $($comboboxEncodings.SelectedItem))
        [void](Set-ItemProperty -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\Configuration\Settings' -Name Priority -Value $($comboboxPriority.SelectedItem))
        [void](Set-ItemProperty -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\Configuration\Settings' -Name From -Value $($textboxFrom.Text.Trim()))
        [void](Set-ItemProperty -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\Configuration\Settings' -Name Subject -Value $($textboxSubject.Text.Trim()))
        [void](Set-ItemProperty -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\Configuration\Settings' -Name To -Value $($textboxTo.Text.Trim()))
        [void](Set-ItemProperty -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\Configuration\Settings' -Name Cc -Value $($textboxCc.Text.Trim()))
        [void](Set-ItemProperty -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\Configuration\Settings' -Name Bcc -Value $($textboxBcc.Text.Trim()))
        [void](Set-ItemProperty -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\Configuration\Settings' -Name BodyAsHTML -Value $($checkboxAsHTML.Checked))
        [void](Set-ItemProperty -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\Configuration\Settings' -Name FontSize -Value $($trackbarFontSize.Value))
    }
    else
    {
        New-RegistryKeys
    }
}
	
function Load-Registry
{
    if ((Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\Configuration\Common' -Name KeepConfiguration | Select-Object -ExpandProperty KeepConfiguration) -eq $true)
    {
        $comboboxLanguages.SelectedItem = Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\Configuration\Common' -Name Language | Select-Object -ExpandProperty Language
        $textboxSmtpServer.Text = Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\Configuration\Settings' -Name SmtpServer | Select-Object -ExpandProperty SmtpServer
        $comboboxEncodings.SelectedItem = Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\Configuration\Settings' -Name Encoding | Select-Object -ExpandProperty Encoding
        $comboboxPriority.SelectedItem = Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\Configuration\Settings' -Name Priority | Select-Object -ExpandProperty Priority
        $textboxFrom.Text = Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\Configuration\Settings' -Name From | Select-Object -ExpandProperty From
        $textboxSubject.Text = Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\Configuration\Settings' -Name Subject | Select-Object -ExpandProperty Subject
        $textboxTo.Text = Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\Configuration\Settings' -Name To | Select-Object -ExpandProperty To
        $textboxCc.Text = Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\Configuration\Settings' -Name Cc | Select-Object -ExpandProperty Cc
        $textboxBcc.Text = Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\Configuration\Settings' -Name Bcc | Select-Object -ExpandProperty Bcc
        if ((Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\Configuration\Settings' -Name BodyAsHTML | Select-Object -ExpandProperty BodyAsHTML) -eq $true)
        {
            $checkboxAsHTML.Checked = $true 
        }
        else
        {
            $checkboxAsHTML.Checked = $false 
        }
        $trackbarFontSize.Value = Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\Configuration\Settings' -Name FontSize | Select-Object -ExpandProperty FontSize
        $checkboxSave.Checked = Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\SMTP Anonymous Access\Configuration\Common' -Name KeepConfiguration | Select-Object -ExpandProperty KeepConfiguration
    }
}
	
function Load-ComboBox
{
    Param (
        [ValidateNotNull()]
        [Parameter(Mandatory = $true)]
        [System.Windows.Forms.ComboBox]$ComboBox,
        [ValidateNotNull()]
        [Parameter(Mandatory = $true)]
        $Items,
        [Parameter(Mandatory = $false)]
        [string]$DisplayMember,
        [switch]$Append
    )
		
    if (-not $Append)
    {
        $ComboBox.Items.Clear()
    }
		
    if ($Items -is [Object[]])
    {
        $ComboBox.Items.AddRange($Items)
    }
    elseif ($Items -is [Array])
    {
        $ComboBox.BeginUpdate()
        foreach ($obj in $Items)
        {
            $ComboBox.Items.Add($obj)
        }
        $ComboBox.EndUpdate()
    }
    else
    {
        $ComboBox.Items.Add($Items)
    }
		
    $ComboBox.DisplayMember = $DisplayMember
}
	
function Add-JobTracker
{
    Param (
        [ValidateNotNull()]
        [Parameter(Mandatory = $true)]
        [string]$Name,
        [ValidateNotNull()]
        [Parameter(Mandatory = $true)]
        [ScriptBlock]$JobScript,
        $ArgumentList = $null,
        [ScriptBlock]$CompletedScript,
    [ScriptBlock]$UpdateScript)
	
    $Job = Start-Job -Name $Name -ScriptBlock $JobScript -ArgumentList $ArgumentList
		
    if ($Job -ne $null)
    {
        $members = @{
            'Job'          = $Job
            'CompleteScript' = $CompletedScript
            'UpdateScript' = $UpdateScript
        }
			
        $psObject = New-Object -TypeName System.Management.Automation.PSObject -Property $members
			
        [void]$JobTrackerList.Add($psObject)
	
        if (-not $timerJobTracker.Enabled)
        {
            $timerJobTracker.Start()
        }
    }
    elseif ($CompletedScript -ne $null)
    {
        Invoke-Command -ScriptBlock $CompletedScript -ArgumentList $null
    }
}
	
function Update-JobTracker
{
    $timerJobTracker.Stop()
		
    for ($index = 0; $index -lt $JobTrackerList.Count; $index++)
    {
        $psObject = $JobTrackerList[$index]
			
        if ($psObject -ne $null)
        {
            if ($psObject.Job -ne $null)
            {
                if ($psObject.Job.State -ne 'Running')
                {
                    if ($psObject.CompleteScript -ne $null)
                    {
                        Invoke-Command -ScriptBlock $psObject.CompleteScript -ArgumentList $psObject.Job
                    }
						
                    $JobTrackerList.RemoveAt($index)
                    Remove-Job -Job $psObject.Job
                    $index--
                }
                elseif ($psObject.UpdateScript -ne $null)
                {
                    Invoke-Command -ScriptBlock $psObject.UpdateScript -ArgumentList $psObject.Job
                }
            }
        }
        else
        {
            $JobTrackerList.RemoveAt($index)
            $index-- 
        }
    }
		
    if ($JobTrackerList.Count -gt 0)
    {
        $timerJobTracker.Start()
    }
}
	
function Stop-JobTracker
{
    $timerJobTracker.Stop()
		
    while ($JobTrackerList.Count -gt 0)
    {
        $Job = $JobTrackerList[0].Job
        $JobTrackerList.RemoveAt(0)
        Stop-Job $Job
        Remove-Job $Job
    }
}
	
function Set-Language
{
    switch ($($comboboxLanguages.SelectedItem))
    {
        'Русский' 
        {
            $labelGUILanguage.Text = 'Язык интерфейса'
            $groupboxSettings.Text = 'Настройки'
            $labelSMTPServer.Text = 'Smtp сервер'
            $labelEncoding.Text = 'Кодировка'
            $labelPriority.Text = 'Приоритет'
            $labelFrom.Text = 'От'
            $labelDisplayName.Text = 'Отображаемое имя'
            $labelTo.Text = 'Для'
            $labelSubject.Text = 'Тема'
            $labelAttachments.Text = 'Вложение'
            $groupboxMessage.Text = 'Текст сообщения'
            $buttonStartJobSend.Text = 'Отправить email'
            $checkboxAsHTML.Text = 'Как HTML'
            $checkboxSave.Text = 'Сохранить'
            $tooltip1.SetToolTip($trackbarFontSize, 'Размер шрифта')
            $groupboxConfiguration.Text = 'Конфигурация'
            $labelCc.Text = 'Копия'
            $labelBcc.Text = 'Скрытая копия'
            $script:UpdateFormText = 'Обновление'
            $script:UpdateLabelText = 'Доступна новая версия!'
            $script:UpdateDescriptionLabelText = 'Описание'
            $script:NotValidEmail = 'Неверно указан email адрес'
            $script:NotEmptyValidating = 'Не указано'
        }
        'English' 
        {
            $labelGUILanguage.Text = 'GUI Language'
            $groupboxSettings.Text = 'Settings'
            $labelSMTPServer.Text = 'Smtp server'
            $labelEncoding.Text = 'Encoding'
            $labelPriority.Text = 'Priority'
            $labelFrom.Text = 'From'
            $labelDisplayName.Text = 'Display Name'
            $labelTo.Text = 'To'
            $labelSubject.Text = 'Subject'
            $labelAttachments.Text = 'Attachments'
            $groupboxMessage.Text = 'Message Text'
            $buttonStartJobSend.Text = 'Send email'
            $checkboxAsHTML.Text = 'As HTML'
            $checkboxSave.Text = 'Save'
            $tooltip1.SetToolTip($trackbarFontSize, 'Font size')
            $groupboxConfiguration.Text = 'Configuration'
            $labelCc.Text = 'Copy'
            $labelBcc.Text = 'Hidden copy'
            $script:UpdateFormText = 'Update'
            $script:UpdateLabelText = 'New version available!'
            $script:UpdateDescriptionLabelText = 'Description'
            $script:NotValidEmail = 'Not valid email address'
            $script:NotEmptyValidating = 'Not specified'
        }
    }
}
	
function Invoke-EmailAddressValidating
{
    param ([System.Windows.Forms.TextBox]$Textbox)
    if ($Textbox.Text.Trim() -ne '')
    {
        if ($Textbox.Text.Trim() -notmatch '[_a-zA-Z0-9-]+(\.[_a-zA-Z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,4})')
        {
            $errorprovider1.SetIconPadding($Textbox, -18)
            $errorprovider1.SetIconAlignment($Textbox, 'MiddleRight')
            $errorprovider1.SetError($Textbox, $NotValidEmail)
        }
        else
        {
            $errorprovider1.SetIconPadding($Textbox, -18)
            $errorprovider1.SetIconAlignment($Textbox, 'MiddleRight')
            $errorprovider1.SetError($Textbox, '')
        }
    }
}#endregion Source: Globals.ps1

#region Source: update_notification.psf
function Call-update_notification_psf
{
    Param($Title, $DescriptionLabel, $DescriptionText, $UpdateLabel)

    #----------------------------------------------
    #region Import the Assemblies
    #----------------------------------------------
    [void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    [void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    [void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    #endregion Import Assemblies

    #----------------------------------------------
    #region Generated Form Objects
    #----------------------------------------------
    [System.Windows.Forms.Application]::EnableVisualStyles()
    $formUpdate = New-Object -TypeName 'System.Windows.Forms.Form'
    $labelDescription = New-Object -TypeName 'System.Windows.Forms.Label'
    $labelNewVersionAvailable = New-Object -TypeName 'System.Windows.Forms.Label'
    $richtextboxDescription = New-Object -TypeName 'System.Windows.Forms.RichTextBox'
    $linklabelUpdate = New-Object -TypeName 'System.Windows.Forms.LinkLabel'
    $InitialFormWindowState = New-Object -TypeName 'System.Windows.Forms.FormWindowState'
    #endregion Generated Form Objects

    #----------------------------------------------
    # User Generated Script
    #----------------------------------------------
	
	
    $formUpdate_Load = {
        $formUpdate.Text = $Title
        $labelNewVersionAvailable.Text = $UpdateLabel
        $labelDescription.Text = $DescriptionLabel
        $richtextboxDescription.Text = $DescriptionText
    }
	
    $linklabelUpdate_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
        [System.Diagnostics.Process]::Start($this.Text)
    }
	
    # --End User Generated Script--
    #----------------------------------------------
    #region Generated Events
    #----------------------------------------------
	
    $Form_StateCorrection_Load = 
    {
        #Correct the initial state of the form to prevent the .Net maximized form issue
        $formUpdate.WindowState = $InitialFormWindowState
    }
	
    $Form_StoreValues_Closing = 
    {
        #Store the control values
        $script:update_notification_richtextboxDescription = $richtextboxDescription.Text
    }

	
    $Form_Cleanup_FormClosed = 
    {
        #Remove all event handlers from the controls
        try
        {
            $linklabelUpdate.remove_LinkClicked($linklabelUpdate_LinkClicked)
            $formUpdate.remove_Load($formUpdate_Load)
            $formUpdate.remove_Load($Form_StateCorrection_Load)
            $formUpdate.remove_Closing($Form_StoreValues_Closing)
            $formUpdate.remove_FormClosed($Form_Cleanup_FormClosed)
        }
        catch [Exception]
        {
 
        }
    }
    #endregion Generated Events

    #----------------------------------------------
    #region Generated Form Code
    #----------------------------------------------
    $formUpdate.SuspendLayout()
    #
    # formUpdate
    #
    $formUpdate.Controls.Add($labelDescription)
    $formUpdate.Controls.Add($labelNewVersionAvailable)
    $formUpdate.Controls.Add($richtextboxDescription)
    $formUpdate.Controls.Add($linklabelUpdate)
    $formUpdate.ClientSize = '411, 164'
    $formUpdate.FormBorderStyle = 'FixedDialog'
    $formUpdate.MaximizeBox = $false
    $formUpdate.MinimizeBox = $false
    $formUpdate.Name = 'formUpdate'
    $formUpdate.StartPosition = 'CenterScreen'
    $formUpdate.Text = 'Update'
    $formUpdate.add_Load($formUpdate_Load)
    #
    # labelDescription
    #
    $labelDescription.Location = '12, 48'
    $labelDescription.Name = 'labelDescription'
    $labelDescription.Size = '387, 23'
    $labelDescription.TabIndex = 3
    $labelDescription.Text = 'Description'
    $labelDescription.TextAlign = 'MiddleCenter'
    #
    # labelNewVersionAvailable
    #
    $labelNewVersionAvailable.Location = '12, 2'
    $labelNewVersionAvailable.Name = 'labelNewVersionAvailable'
    $labelNewVersionAvailable.Size = '387, 23'
    $labelNewVersionAvailable.TabIndex = 2
    $labelNewVersionAvailable.Text = 'New version available!'
    $labelNewVersionAvailable.TextAlign = 'MiddleCenter'
    #
    # richtextboxDescription
    #
    $richtextboxDescription.Dock = 'Bottom'
    $richtextboxDescription.Location = '0, 74'
    $richtextboxDescription.Name = 'richtextboxDescription'
    $richtextboxDescription.Size = '411, 90'
    $richtextboxDescription.TabIndex = 1
    $richtextboxDescription.Text = ''
    #
    # linklabelUpdate
    #
    $linklabelUpdate.Location = '12, 25'
    $linklabelUpdate.Name = 'linklabelUpdate'
    $linklabelUpdate.Size = '387, 23'
    $linklabelUpdate.TabIndex = 0
    $linklabelUpdate.TabStop = $true
    $linklabelUpdate.Text = 'http://wgo-it000000601/software/smtp/SmtpAnonymousAccess.txt' #my pc to check for update flag
    $linklabelUpdate.TextAlign = 'MiddleCenter'
    $linklabelUpdate.add_LinkClicked($linklabelUpdate_LinkClicked)
    $formUpdate.ResumeLayout($false)
    #endregion Generated Form Code

    #----------------------------------------------

    #Save the initial state of the form
    $InitialFormWindowState = $formUpdate.WindowState
    #Init the OnLoad event to correct the initial state of the form
    $formUpdate.add_Load($Form_StateCorrection_Load)
    #Clean up the control events
    $formUpdate.add_FormClosed($Form_Cleanup_FormClosed)
    #Store the control values when form is closing
    $formUpdate.add_Closing($Form_StoreValues_Closing)
    #Show the Form
    return $formUpdate.ShowDialog()
}
#endregion Source: update_notification.psf

#Start the application
Main -Commandline ($Commandline)
